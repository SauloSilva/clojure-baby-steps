<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1462723745172">{:repl-history {:ide [], :local [&quot;(async/&gt;!! tea-channel :cup-of-tea)&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea2)&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea4)&quot; &quot;(async/close! tea-channel)&quot; &quot;(async/&lt;!! tea-channel)&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea5)&quot; &quot;(let [tea-channel (async/chan)]\n  (async/go (async/&gt;! tea-channel :cup-of-tea1))\n  (async/go (println \&quot;Thanks for the \&quot;(async/&lt;! tea-channel))))&quot; &quot;(async/&gt;! tea-channel :cup-of-tea1)&quot; &quot;(async/go-loop []\n  (println \&quot;Thanks for the \&quot; (async/&lt;! tea-channel))\n  (recur))&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea3)&quot; &quot;(ns async-tea-party.core\n  (:require [clojure.core.async :as async]))&quot; &quot;(def tea-channel (async/chan 10))&quot; &quot;(def milk-channel (async/chan 10))&quot; &quot;(def sugar-channel (async/chan 10))&quot; &quot;(async/go-loop []\n  (let [[v ch] (async/alts! [tea-channel\n                            milk-channel\n                            sugar-channel])]\n    (println \&quot;Got \&quot; v \&quot; from \&quot; ch)\n    (recur)))&quot; &quot;(async/&gt;!! tea-channel :cup-of-tea1)&quot; &quot;(async/&gt;!! milk-channel :cup-of-milk)&quot; &quot;(async/&gt;!! sugar-channel :chocolate-bar)&quot; &quot;(rand-int 10000)&quot; &quot;(repeat (rand-int 10000) 1)&quot; &quot;(conj [] (repeat (rand-int 10000) 1)))&quot; &quot;(conj [] (repeat (rand-int 10000) 1))&quot;], :remote []}}</component>
</project>