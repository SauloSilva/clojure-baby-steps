if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExecModule_(url);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in (obj)) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:" "};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "" && ch <= "�";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.operaVersion_ = function() {
  var version = goog.global.opera.version;
  try {
    return version();
  } catch (e) {
    return version;
  }
};
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    return goog.userAgent.operaVersion_();
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"‪", RLE:"‫", PDF:"‬", LRM:"‎", RLM:"‏"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿" + "‎Ⰰ-﬜︀-﹯﻽-￿";
goog.i18n.bidi.rtlChars_ = "֑-ۯۺ-߿‏יִ-﷿ﹰ-ﻼ";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1׳");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.userAgent.product");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.userAgent");
goog.define("goog.userAgent.product.ASSUME_FIREFOX", false);
goog.define("goog.userAgent.product.ASSUME_IPHONE", false);
goog.define("goog.userAgent.product.ASSUME_IPAD", false);
goog.define("goog.userAgent.product.ASSUME_ANDROID", false);
goog.define("goog.userAgent.product.ASSUME_CHROME", false);
goog.define("goog.userAgent.product.ASSUME_SAFARI", false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.8.51";
cljs.core._STAR_unchecked_if_STAR_ = false;
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__8325__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__8325 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8326__i = 0, G__8326__a = new Array(arguments.length - 0);
        while (G__8326__i < G__8326__a.length) {
          G__8326__a[G__8326__i] = arguments[G__8326__i + 0];
          ++G__8326__i;
        }
        args = new cljs.core.IndexedSeq(G__8326__a, 0);
      }
      return G__8325__delegate.call(this, args);
    };
    G__8325.cljs$lang$maxFixedArity = 0;
    G__8325.cljs$lang$applyTo = function(arglist__8327) {
      var args = cljs.core.seq(arglist__8327);
      return G__8325__delegate(args);
    };
    G__8325.cljs$core$IFn$_invoke$arity$variadic = G__8325__delegate;
    return G__8325;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__8328__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__8328 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8329__i = 0, G__8329__a = new Array(arguments.length - 0);
        while (G__8329__i < G__8329__a.length) {
          G__8329__a[G__8329__i] = arguments[G__8329__i + 0];
          ++G__8329__i;
        }
        args = new cljs.core.IndexedSeq(G__8329__a, 0);
      }
      return G__8328__delegate.call(this, args);
    };
    G__8328.cljs$lang$maxFixedArity = 0;
    G__8328.cljs$lang$applyTo = function(arglist__8330) {
      var args = cljs.core.seq(arglist__8330);
      return G__8328__delegate(args);
    };
    G__8328.cljs$core$IFn$_invoke$arity$variadic = G__8328__delegate;
    return G__8328;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__6181__auto__ = ty;
    if (cljs.core.truth_(and__6181__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__6181__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1E9 + t[1]) / 1E6;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args8331 = [];
  var len__7263__auto___8337 = arguments.length;
  var i__7264__auto___8338 = 0;
  while (true) {
    if (i__7264__auto___8338 < len__7263__auto___8337) {
      args8331.push(arguments[i__7264__auto___8338]);
      var G__8339 = i__7264__auto___8338 + 1;
      i__7264__auto___8338 = G__8339;
      continue;
    } else {
    }
    break;
  }
  var G__8336 = args8331.length;
  switch(G__8336) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8331.slice(2), 0, null);
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
  var dims = more_sizes;
  var dimarray = new Array(size);
  var n__7108__auto___8341 = dimarray.length;
  var i_8342 = 0;
  while (true) {
    if (i_8342 < n__7108__auto___8341) {
      dimarray[i_8342] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, dims) : cljs.core.apply.call(null, cljs.core.make_array, null, dims);
      var G__8343 = i_8342 + 1;
      i_8342 = G__8343;
      continue;
    } else {
    }
    break;
  }
  return dimarray;
};
cljs.core.make_array.cljs$lang$applyTo = function(seq8332) {
  var G__8333 = cljs.core.first(seq8332);
  var seq8332__$1 = cljs.core.next(seq8332);
  var G__8334 = cljs.core.first(seq8332__$1);
  var seq8332__$2 = cljs.core.next(seq8332__$1);
  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(G__8333, G__8334, seq8332__$2);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__7108__auto___8344 = len;
  var i_8345 = 0;
  while (true) {
    if (i_8345 < n__7108__auto___8344) {
      new_arr[i_8345] = arr[i_8345];
      var G__8346 = i_8345 + 1;
      i_8345 = G__8346;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__8347 = i + 1;
      i = G__8347;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget(var_args) {
  var args8348 = [];
  var len__7263__auto___8357 = arguments.length;
  var i__7264__auto___8358 = 0;
  while (true) {
    if (i__7264__auto___8358 < len__7263__auto___8357) {
      args8348.push(arguments[i__7264__auto___8358]);
      var G__8359 = i__7264__auto___8358 + 1;
      i__7264__auto___8358 = G__8359;
      continue;
    } else {
    }
    break;
  }
  var G__8353 = args8348.length;
  switch(G__8353) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8348.slice(2), 0, null);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__8354 = cljs.core.aget;
  var G__8355 = array[i];
  var G__8356 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__8354, G__8355, G__8356) : cljs.core.apply.call(null, G__8354, G__8355, G__8356);
};
cljs.core.aget.cljs$lang$applyTo = function(seq8349) {
  var G__8350 = cljs.core.first(seq8349);
  var seq8349__$1 = cljs.core.next(seq8349);
  var G__8351 = cljs.core.first(seq8349__$1);
  var seq8349__$2 = cljs.core.next(seq8349__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__8350, G__8351, seq8349__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args8361 = [];
  var len__7263__auto___8372 = arguments.length;
  var i__7264__auto___8373 = 0;
  while (true) {
    if (i__7264__auto___8373 < len__7263__auto___8372) {
      args8361.push(arguments[i__7264__auto___8373]);
      var G__8374 = i__7264__auto___8373 + 1;
      i__7264__auto___8373 = G__8374;
      continue;
    } else {
    }
    break;
  }
  var G__8367 = args8361.length;
  switch(G__8367) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8361.slice(3), 0, null);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__8368 = cljs.core.aset;
  var G__8369 = array[idx];
  var G__8370 = idx2;
  var G__8371 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__8368, G__8369, G__8370, G__8371) : cljs.core.apply.call(null, G__8368, G__8369, G__8370, G__8371);
};
cljs.core.aset.cljs$lang$applyTo = function(seq8362) {
  var G__8363 = cljs.core.first(seq8362);
  var seq8362__$1 = cljs.core.next(seq8362);
  var G__8364 = cljs.core.first(seq8362__$1);
  var seq8362__$2 = cljs.core.next(seq8362__$1);
  var G__8365 = cljs.core.first(seq8362__$2);
  var seq8362__$3 = cljs.core.next(seq8362__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__8363, G__8364, G__8365, seq8362__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args8376 = [];
  var len__7263__auto___8382 = arguments.length;
  var i__7264__auto___8383 = 0;
  while (true) {
    if (i__7264__auto___8383 < len__7263__auto___8382) {
      args8376.push(arguments[i__7264__auto___8383]);
      var G__8384 = i__7264__auto___8383 + 1;
      i__7264__auto___8383 = G__8384;
      continue;
    } else {
    }
    break;
  }
  var G__8378 = args8376.length;
  switch(G__8378) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8376.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__8379 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__8380 = [];
  var G__8381 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__8379, G__8380, G__8381) : cljs.core.reduce.call(null, G__8379, G__8380, G__8381);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8389 = arguments.length;
  var i__7264__auto___8390 = 0;
  while (true) {
    if (i__7264__auto___8390 < len__7263__auto___8389) {
      args__7270__auto__.push(arguments[i__7264__auto___8390]);
      var G__8391 = i__7264__auto___8390 + 1;
      i__7264__auto___8390 = G__8391;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 2 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(2), 0, null) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7271__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq8386) {
  var G__8387 = cljs.core.first(seq8386);
  var seq8386__$1 = cljs.core.next(seq8386);
  var G__8388 = cljs.core.first(seq8386__$1);
  var seq8386__$2 = cljs.core.next(seq8386__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__8387, G__8388, seq8386__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args8392 = [];
  var len__7263__auto___8395 = arguments.length;
  var i__7264__auto___8396 = 0;
  while (true) {
    if (i__7264__auto___8396 < len__7263__auto___8395) {
      args8392.push(arguments[i__7264__auto___8396]);
      var G__8397 = i__7264__auto___8396 + 1;
      i__7264__auto___8396 = G__8397;
      continue;
    } else {
    }
    break;
  }
  var G__8394 = args8392.length;
  switch(G__8394) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8392.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__6857__auto__.call(null, this$, a);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__6857__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__6857__auto__.call(null, this$, a, b);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__6857__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$4 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__6857__auto__.call(null, this$, a, b, c);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__6857__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$5 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__6857__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__6857__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$6 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__6857__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__6857__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$7 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__6857__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$8 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$9 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$10 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$11 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$12 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$13 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$14 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$15 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$16 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$17 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$18 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$19 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$20 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$21 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._invoke[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$22 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__6857__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__6857__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__6857__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__6856__auto__ = value == null ? null : value;
    var m__6857__auto__ = cljs.core._clone[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__6857__auto__.call(null, value);
    } else {
      var m__6857__auto____$1 = cljs.core._clone["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__6857__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._count[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._count["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._empty[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._empty["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._conj[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__6857__auto__.call(null, coll, o);
    } else {
      var m__6857__auto____$1 = cljs.core._conj["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__6857__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args8399 = [];
  var len__7263__auto___8402 = arguments.length;
  var i__7264__auto___8403 = 0;
  while (true) {
    if (i__7264__auto___8403 < len__7263__auto___8402) {
      args8399.push(arguments[i__7264__auto___8403]);
      var G__8404 = i__7264__auto___8403 + 1;
      i__7264__auto___8403 = G__8404;
      continue;
    } else {
    }
    break;
  }
  var G__8401 = args8399.length;
  switch(G__8401) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8399.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._nth[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__6857__auto__.call(null, coll, n);
    } else {
      var m__6857__auto____$1 = cljs.core._nth["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__6857__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._nth[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__6857__auto__.call(null, coll, n, not_found);
    } else {
      var m__6857__auto____$1 = cljs.core._nth["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__6857__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._first[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._first["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._rest[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._rest["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._next[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._next["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args8406 = [];
  var len__7263__auto___8409 = arguments.length;
  var i__7264__auto___8410 = 0;
  while (true) {
    if (i__7264__auto___8410 < len__7263__auto___8409) {
      args8406.push(arguments[i__7264__auto___8410]);
      var G__8411 = i__7264__auto___8410 + 1;
      i__7264__auto___8410 = G__8411;
      continue;
    } else {
    }
    break;
  }
  var G__8408 = args8406.length;
  switch(G__8408) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8406.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._lookup[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__6857__auto__.call(null, o, k);
    } else {
      var m__6857__auto____$1 = cljs.core._lookup["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__6857__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._lookup[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__6857__auto__.call(null, o, k, not_found);
    } else {
      var m__6857__auto____$1 = cljs.core._lookup["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__6857__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6857__auto__.call(null, coll, k);
    } else {
      var m__6857__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6857__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._assoc[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__6857__auto__.call(null, coll, k, v);
    } else {
      var m__6857__auto____$1 = cljs.core._assoc["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__6857__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._dissoc[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6857__auto__.call(null, coll, k);
    } else {
      var m__6857__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6857__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._key[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._key["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._val[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._val["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._disjoin[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__6857__auto__.call(null, coll, v);
    } else {
      var m__6857__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__6857__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._peek[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._peek["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._pop[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._pop["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._assoc_n[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__6857__auto__.call(null, coll, n, val);
    } else {
      var m__6857__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__6857__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._deref[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto__.call(null, o);
    } else {
      var m__6857__auto____$1 = cljs.core._deref["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__6857__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__6857__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__6857__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._meta[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto__.call(null, o);
    } else {
      var m__6857__auto____$1 = cljs.core._meta["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._with_meta[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__6857__auto__.call(null, o, meta);
    } else {
      var m__6857__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__6857__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args8413 = [];
  var len__7263__auto___8416 = arguments.length;
  var i__7264__auto___8417 = 0;
  while (true) {
    if (i__7264__auto___8417 < len__7263__auto___8416) {
      args8413.push(arguments[i__7264__auto___8417]);
      var G__8418 = i__7264__auto___8417 + 1;
      i__7264__auto___8417 = G__8418;
      continue;
    } else {
    }
    break;
  }
  var G__8415 = args8413.length;
  switch(G__8415) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8413.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._reduce[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__6857__auto__.call(null, coll, f);
    } else {
      var m__6857__auto____$1 = cljs.core._reduce["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__6857__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._reduce[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__6857__auto__.call(null, coll, f, start);
    } else {
      var m__6857__auto____$1 = cljs.core._reduce["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__6857__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._kv_reduce[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__6857__auto__.call(null, coll, f, init);
    } else {
      var m__6857__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__6857__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._equiv[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__6857__auto__.call(null, o, other);
    } else {
      var m__6857__auto____$1 = cljs.core._equiv["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__6857__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._hash[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto__.call(null, o);
    } else {
      var m__6857__auto____$1 = cljs.core._hash["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._seq[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto__.call(null, o);
    } else {
      var m__6857__auto____$1 = cljs.core._seq["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6857__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._rseq[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._rseq["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._sorted_seq[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__6857__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__6857__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__6857__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__6857__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__6857__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__6857__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._entry_key[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__6857__auto__.call(null, coll, entry);
    } else {
      var m__6857__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__6857__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._comparator[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._comparator["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__6856__auto__ = writer == null ? null : writer;
    var m__6857__auto__ = cljs.core._write[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__6857__auto__.call(null, writer, s);
    } else {
      var m__6857__auto____$1 = cljs.core._write["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__6857__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__6856__auto__ = writer == null ? null : writer;
    var m__6857__auto__ = cljs.core._flush[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__6857__auto__.call(null, writer);
    } else {
      var m__6857__auto____$1 = cljs.core._flush["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__6857__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._pr_writer[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__6857__auto__.call(null, o, writer, opts);
    } else {
      var m__6857__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__6857__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto__.call(null, x);
    } else {
      var m__6857__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", x);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._notify_watches[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__6857__auto__.call(null, this$, oldval, newval);
    } else {
      var m__6857__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__6857__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._add_watch[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__6857__auto__.call(null, this$, key, f);
    } else {
      var m__6857__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__6857__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core._remove_watch[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__6857__auto__.call(null, this$, key);
    } else {
      var m__6857__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__6857__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._as_transient[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__6857__auto__.call(null, tcoll, val);
    } else {
      var m__6857__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__6857__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6857__auto__.call(null, tcoll);
    } else {
      var m__6857__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6857__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__6857__auto__.call(null, tcoll, key, val);
    } else {
      var m__6857__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__6857__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__6857__auto__.call(null, tcoll, key);
    } else {
      var m__6857__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__6857__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__6857__auto__.call(null, tcoll, n, val);
    } else {
      var m__6857__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__6857__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6857__auto__.call(null, tcoll);
    } else {
      var m__6857__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6857__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__6856__auto__ = tcoll == null ? null : tcoll;
    var m__6857__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__6857__auto__.call(null, tcoll, v);
    } else {
      var m__6857__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__6857__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._compare[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__6857__auto__.call(null, x, y);
    } else {
      var m__6857__auto____$1 = cljs.core._compare["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__6857__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._drop_first[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._chunked_first[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._chunked_rest[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._chunked_next[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._name[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto__.call(null, x);
    } else {
      var m__6857__auto____$1 = cljs.core._name["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._namespace[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto__.call(null, x);
    } else {
      var m__6857__auto____$1 = cljs.core._namespace["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6857__auto__.call(null, o, new_value);
    } else {
      var m__6857__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6857__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args8420 = [];
  var len__7263__auto___8423 = arguments.length;
  var i__7264__auto___8424 = 0;
  while (true) {
    if (i__7264__auto___8424 < len__7263__auto___8423) {
      args8420.push(arguments[i__7264__auto___8424]);
      var G__8425 = i__7264__auto___8424 + 1;
      i__7264__auto___8424 = G__8425;
      continue;
    } else {
    }
    break;
  }
  var G__8422 = args8420.length;
  switch(G__8422) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8420.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__6857__auto__.call(null, o, f);
    } else {
      var m__6857__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__6857__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__6857__auto__.call(null, o, f, a);
    } else {
      var m__6857__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__6857__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$4 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__6857__auto__.call(null, o, f, a, b);
    } else {
      var m__6857__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__6857__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$5 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__6857__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__6857__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__6857__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__6856__auto__ = o == null ? null : o;
    var m__6857__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6857__auto__.call(null, o, new_value);
    } else {
      var m__6857__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6857__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__6856__auto__ = coll == null ? null : coll;
    var m__6857__auto__ = cljs.core._iterator[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto__.call(null, coll);
    } else {
      var m__6857__auto____$1 = cljs.core._iterator["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6857__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__8427 = i + 2;
        var G__8428 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__8427;
        h1 = G__8428;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__8431 = i + 1;
          var G__8432 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__8431;
          hash = G__8432;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      if (cljs.core.truth_(isFinite(o))) {
        return Math.floor(o) % 2147483647;
      } else {
        var G__8440 = o;
        switch(G__8440) {
          case Infinity:
            return 2146435072;
            break;
          case -Infinity:
            return -1048576;
            break;
          default:
            return 2146959360;
        }
      }
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = cljs.core.not(a.ns);
      if (and__6181__auto__) {
        return b.ns;
      } else {
        return and__6181__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__8448 = a.ns;
            var G__8449 = b.ns;
            return goog.array.defaultCompare(G__8448, G__8449);
          }();
          if (0 === nsc) {
            var G__8450 = a.name;
            var G__8451 = b.name;
            return goog.array.defaultCompare(G__8450, G__8451);
          } else {
            return nsc;
          }
        }
      } else {
        var G__8452 = a.name;
        var G__8453 = b.name;
        return goog.array.defaultCompare(G__8452, G__8453);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__8455 = null;
  var G__8455__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__8455__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__8455 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8455__2.call(this, self__, coll);
      case 3:
        return G__8455__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8455.cljs$core$IFn$_invoke$arity$2 = G__8455__2;
  G__8455.cljs$core$IFn$_invoke$arity$3 = G__8455__3;
  return G__8455;
}();
cljs.core.Symbol.prototype.apply = function(self__, args8454) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8454)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__6628__auto__ = self__._hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args8456 = [];
  var len__7263__auto___8459 = arguments.length;
  var i__7264__auto___8460 = 0;
  while (true) {
    if (i__7264__auto___8460 < len__7263__auto___8459) {
      args8456.push(arguments[i__7264__auto___8460]);
      var G__8461 = i__7264__auto___8460 + 1;
      i__7264__auto___8460 = G__8461;
      continue;
    } else {
    }
    break;
  }
  var G__8458 = args8456.length;
  switch(G__8458) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8456.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx < 1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__8464 = this$__$1.sym;
    var G__8465 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__8464, G__8465) : cljs.core._EQ_.call(null, G__8464, G__8465);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__8510 = null;
  var G__8510__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__8510__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__8510__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__8510__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__8510__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__8510__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__8510__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__8510__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__8510__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__8510__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8510__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8510__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8510__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8510__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8510__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8510__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8510__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8510__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8510__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8510__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8510__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8510__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__8466 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__8467 = a;
    var G__8468 = b;
    var G__8469 = c;
    var G__8470 = d;
    var G__8471 = e;
    var G__8472 = f;
    var G__8473 = g;
    var G__8474 = h;
    var G__8475 = i;
    var G__8476 = j;
    var G__8477 = k;
    var G__8478 = l;
    var G__8479 = m;
    var G__8480 = n;
    var G__8481 = o;
    var G__8482 = p;
    var G__8483 = q;
    var G__8484 = r;
    var G__8485 = s;
    var G__8486 = t;
    var G__8487 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__8466, G__8467, G__8468, G__8469, G__8470, G__8471, G__8472, G__8473, G__8474, G__8475, G__8476, G__8477, G__8478, G__8479, G__8480, G__8481, G__8482, G__8483, G__8484, G__8485, G__8486, G__8487) : cljs.core.apply.call(null, G__8466, G__8467, G__8468, G__8469, G__8470, G__8471, G__8472, G__8473, G__8474, G__8475, G__8476, G__8477, G__8478, G__8479, G__8480, G__8481, G__8482, G__8483, G__8484, 
    G__8485, G__8486, G__8487);
  };
  G__8510 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8510__1.call(this, self__);
      case 2:
        return G__8510__2.call(this, self__, a);
      case 3:
        return G__8510__3.call(this, self__, a, b);
      case 4:
        return G__8510__4.call(this, self__, a, b, c);
      case 5:
        return G__8510__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8510__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8510__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8510__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8510__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8510__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8510__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8510__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8510__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8510__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8510__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8510__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8510__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8510__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8510__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8510__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8510__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8510__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8510.cljs$core$IFn$_invoke$arity$1 = G__8510__1;
  G__8510.cljs$core$IFn$_invoke$arity$2 = G__8510__2;
  G__8510.cljs$core$IFn$_invoke$arity$3 = G__8510__3;
  G__8510.cljs$core$IFn$_invoke$arity$4 = G__8510__4;
  G__8510.cljs$core$IFn$_invoke$arity$5 = G__8510__5;
  G__8510.cljs$core$IFn$_invoke$arity$6 = G__8510__6;
  G__8510.cljs$core$IFn$_invoke$arity$7 = G__8510__7;
  G__8510.cljs$core$IFn$_invoke$arity$8 = G__8510__8;
  G__8510.cljs$core$IFn$_invoke$arity$9 = G__8510__9;
  G__8510.cljs$core$IFn$_invoke$arity$10 = G__8510__10;
  G__8510.cljs$core$IFn$_invoke$arity$11 = G__8510__11;
  G__8510.cljs$core$IFn$_invoke$arity$12 = G__8510__12;
  G__8510.cljs$core$IFn$_invoke$arity$13 = G__8510__13;
  G__8510.cljs$core$IFn$_invoke$arity$14 = G__8510__14;
  G__8510.cljs$core$IFn$_invoke$arity$15 = G__8510__15;
  G__8510.cljs$core$IFn$_invoke$arity$16 = G__8510__16;
  G__8510.cljs$core$IFn$_invoke$arity$17 = G__8510__17;
  G__8510.cljs$core$IFn$_invoke$arity$18 = G__8510__18;
  G__8510.cljs$core$IFn$_invoke$arity$19 = G__8510__19;
  G__8510.cljs$core$IFn$_invoke$arity$20 = G__8510__20;
  G__8510.cljs$core$IFn$_invoke$arity$21 = G__8510__21;
  G__8510.cljs$core$IFn$_invoke$arity$22 = G__8510__22;
  return G__8510;
}();
cljs.core.Var.prototype.apply = function(self__, args8463) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8463)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__8488 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__8489 = a;
  var G__8490 = b;
  var G__8491 = c;
  var G__8492 = d;
  var G__8493 = e;
  var G__8494 = f;
  var G__8495 = g;
  var G__8496 = h;
  var G__8497 = i;
  var G__8498 = j;
  var G__8499 = k;
  var G__8500 = l;
  var G__8501 = m;
  var G__8502 = n;
  var G__8503 = o;
  var G__8504 = p;
  var G__8505 = q;
  var G__8506 = r;
  var G__8507 = s;
  var G__8508 = t;
  var G__8509 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__8488, G__8489, G__8490, G__8491, G__8492, G__8493, G__8494, G__8495, G__8496, G__8497, G__8498, G__8499, G__8500, G__8501, G__8502, G__8503, G__8504, G__8505, G__8506, G__8507, G__8508, G__8509) : cljs.core.apply.call(null, G__8488, G__8489, G__8490, G__8491, G__8492, G__8493, G__8494, G__8495, G__8496, G__8497, G__8498, G__8499, G__8500, G__8501, G__8502, G__8503, G__8504, G__8505, G__8506, 
  G__8507, G__8508, G__8509);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0, null);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0, null);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args8523 = [];
  var len__7263__auto___8529 = arguments.length;
  var i__7264__auto___8530 = 0;
  while (true) {
    if (i__7264__auto___8530 < len__7263__auto___8529) {
      args8523.push(arguments[i__7264__auto___8530]);
      var G__8531 = i__7264__auto___8530 + 1;
      i__7264__auto___8530 = G__8531;
      continue;
    } else {
    }
    break;
  }
  var G__8528 = args8523.length;
  switch(G__8528) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8523.slice(2), 0, null);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__8533 = y;
        var G__8534 = cljs.core.first(more);
        var G__8535 = cljs.core.next(more);
        x = G__8533;
        y = G__8534;
        more = G__8535;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq8524) {
  var G__8525 = cljs.core.first(seq8524);
  var seq8524__$1 = cljs.core.next(seq8524);
  var G__8526 = cljs.core.first(seq8524__$1);
  var seq8524__$2 = cljs.core.next(seq8524__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8525, G__8526, seq8524__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8536 = n + 1;
      var G__8537 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8538 = cljs.core.next(coll__$1);
      n = G__8536;
      hash_code = G__8537;
      coll__$1 = G__8538;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8539 = n + 1;
      var G__8540 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8541 = cljs.core.next(coll__$1);
      n = G__8539;
      hash_code = G__8540;
      coll__$1 = G__8541;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__8542 = this$__$1.valueOf();
    var G__8543 = other.valueOf();
    return goog.array.defaultCompare(G__8542, G__8543);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args8544 = [];
  var len__7263__auto___8553 = arguments.length;
  var i__7264__auto___8554 = 0;
  while (true) {
    if (i__7264__auto___8554 < len__7263__auto___8553) {
      args8544.push(arguments[i__7264__auto___8554]);
      var G__8555 = i__7264__auto___8554 + 1;
      i__7264__auto___8554 = G__8555;
      continue;
    } else {
    }
    break;
  }
  var G__8546 = args8544.length;
  switch(G__8546) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8544.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8547 = val;
          var G__8548 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8547, G__8548) : f.call(null, G__8547, G__8548);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8557 = nval;
          var G__8558 = n + 1;
          val = G__8557;
          n = G__8558;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8549 = val__$1;
        var G__8550 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8549, G__8550) : f.call(null, G__8549, G__8550);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8559 = nval;
        var G__8560 = n + 1;
        val__$1 = G__8559;
        n = G__8560;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8551 = val__$1;
        var G__8552 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8551, G__8552) : f.call(null, G__8551, G__8552);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8561 = nval;
        var G__8562 = n + 1;
        val__$1 = G__8561;
        n = G__8562;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args8563 = [];
  var len__7263__auto___8572 = arguments.length;
  var i__7264__auto___8573 = 0;
  while (true) {
    if (i__7264__auto___8573 < len__7263__auto___8572) {
      args8563.push(arguments[i__7264__auto___8573]);
      var G__8574 = i__7264__auto___8573 + 1;
      i__7264__auto___8573 = G__8574;
      continue;
    } else {
    }
    break;
  }
  var G__8565 = args8563.length;
  switch(G__8565) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8563.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8566 = val;
          var G__8567 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8566, G__8567) : f.call(null, G__8566, G__8567);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8576 = nval;
          var G__8577 = n + 1;
          val = G__8576;
          n = G__8577;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8568 = val__$1;
        var G__8569 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8568, G__8569) : f.call(null, G__8568, G__8569);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8578 = nval;
        var G__8579 = n + 1;
        val__$1 = G__8578;
        n = G__8579;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8570 = val__$1;
        var G__8571 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8570, G__8571) : f.call(null, G__8570, G__8571);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8580 = nval;
        var G__8581 = n + 1;
        val__$1 = G__8580;
        n = G__8581;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core._indexOf = function cljs$core$_indexOf(var_args) {
  var args8586 = [];
  var len__7263__auto___8589 = arguments.length;
  var i__7264__auto___8590 = 0;
  while (true) {
    if (i__7264__auto___8590 < len__7263__auto___8589) {
      args8586.push(arguments[i__7264__auto___8590]);
      var G__8591 = i__7264__auto___8590 + 1;
      i__7264__auto___8590 = G__8591;
      continue;
    } else {
    }
    break;
  }
  var G__8588 = args8586.length;
  switch(G__8588) {
    case 2:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8586.length)].join(""));;
  }
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (start >= len) {
    return -1;
  } else {
    var idx = start > 0 ? start : start < 0 ? function() {
      var x__6524__auto__ = 0;
      var y__6525__auto__ = start + len;
      return x__6524__auto__ > y__6525__auto__ ? x__6524__auto__ : y__6525__auto__;
    }() : start;
    while (true) {
      if (idx < len) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__8593 = idx + 1;
          idx = G__8593;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
cljs.core._lastIndexOf = function cljs$core$_lastIndexOf(var_args) {
  var args8594 = [];
  var len__7263__auto___8597 = arguments.length;
  var i__7264__auto___8598 = 0;
  while (true) {
    if (i__7264__auto___8598 < len__7263__auto___8597) {
      args8594.push(arguments[i__7264__auto___8598]);
      var G__8599 = i__7264__auto___8598 + 1;
      i__7264__auto___8598 = G__8599;
      continue;
    } else {
    }
    break;
  }
  var G__8596 = args8594.length;
  switch(G__8596) {
    case 2:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8594.length)].join(""));;
  }
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (len === 0) {
    return -1;
  } else {
    var idx = start > 0 ? function() {
      var x__6531__auto__ = len - 1;
      var y__6532__auto__ = start;
      return x__6531__auto__ < y__6532__auto__ ? x__6531__auto__ : y__6532__auto__;
    }() : start < 0 ? len + start : start;
    while (true) {
      if (idx >= 0) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__8601 = idx - 1;
          idx = G__8601;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i, meta) {
  this.arr = arr;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 166592766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.indexOf = function() {
  var G__8602 = null;
  var G__8602__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__8602__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__8602 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__8602__1.call(this, x);
      case 2:
        return G__8602__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8602.cljs$core$IFn$_invoke$arity$1 = G__8602__1;
  G__8602.cljs$core$IFn$_invoke$arity$2 = G__8602__2;
  return G__8602;
}();
cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
  var G__8603 = null;
  var G__8603__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__8603__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__8603 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__8603__1.call(this, x);
      case 2:
        return G__8603__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8603.cljs$core$IFn$_invoke$arity$1 = G__8603__1;
  G__8603.cljs$core$IFn$_invoke$arity$2 = G__8603__2;
  return G__8603;
}();
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, self__.meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__6524__auto__ = 0;
  var y__6525__auto__ = self__.arr.length - self__.i;
  return x__6524__auto__ > y__6525__auto__ ? x__6524__auto__ : y__6525__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, new_meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i, meta) {
  return new cljs.core.IndexedSeq(arr, i, meta);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args8604 = [];
  var len__7263__auto___8607 = arguments.length;
  var i__7264__auto___8608 = 0;
  while (true) {
    if (i__7264__auto___8608 < len__7263__auto___8607) {
      args8604.push(arguments[i__7264__auto___8608]);
      var G__8609 = i__7264__auto___8608 + 1;
      i__7264__auto___8608 = G__8609;
      continue;
    } else {
    }
    break;
  }
  var G__8606 = args8604.length;
  switch(G__8606) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8604.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i, null);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args8611 = [];
  var len__7263__auto___8614 = arguments.length;
  var i__7264__auto___8615 = 0;
  while (true) {
    if (i__7264__auto___8615 < len__7263__auto___8614) {
      args8611.push(arguments[i__7264__auto___8615]);
      var G__8616 = i__7264__auto___8615 + 1;
      i__7264__auto___8615 = G__8616;
      continue;
    } else {
    }
    break;
  }
  var G__8613 = args8611.length;
  switch(G__8613) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8611.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.indexOf = function() {
  var G__8620 = null;
  var G__8620__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__8620__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__8620 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__8620__1.call(this, x);
      case 2:
        return G__8620__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8620.cljs$core$IFn$_invoke$arity$1 = G__8620__1;
  G__8620.cljs$core$IFn$_invoke$arity$2 = G__8620__2;
  return G__8620;
}();
cljs.core.RSeq.prototype.lastIndexOf = function() {
  var G__8621 = null;
  var G__8621__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__8621__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__8621 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__8621__1.call(this, x);
      case 2:
        return G__8621__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8621.cljs$core$IFn$_invoke$arity$1 = G__8621__1;
  G__8621.cljs$core$IFn$_invoke$arity$2 = G__8621__2;
  return G__8621;
}();
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__8618 = cljs.core.List.EMPTY;
  var G__8619 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__8618, G__8619) : cljs.core.with_meta.call(null, G__8618, G__8619);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__8622 = sn;
      s = G__8622;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args8623 = [];
  var len__7263__auto___8629 = arguments.length;
  var i__7264__auto___8630 = 0;
  while (true) {
    if (i__7264__auto___8630 < len__7263__auto___8629) {
      args8623.push(arguments[i__7264__auto___8630]);
      var G__8631 = i__7264__auto___8630 + 1;
      i__7264__auto___8630 = G__8631;
      continue;
    } else {
    }
    break;
  }
  var G__8628 = args8623.length;
  switch(G__8628) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8623.slice(2), 0, null);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    var x__7027__auto__ = x;
    return cljs.core._conj(cljs.core.List.EMPTY, x__7027__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__8633 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__8634 = cljs.core.first(xs);
      var G__8635 = cljs.core.next(xs);
      coll = G__8633;
      x = G__8634;
      xs = G__8635;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq8624) {
  var G__8625 = cljs.core.first(seq8624);
  var seq8624__$1 = cljs.core.next(seq8624);
  var G__8626 = cljs.core.first(seq8624__$1);
  var seq8624__$2 = cljs.core.next(seq8624__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__8625, G__8626, seq8624__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__8636 = cljs.core.next(s);
      var G__8637 = acc + 1;
      s = G__8636;
      acc = G__8637;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args8642 = [];
  var len__7263__auto___8645 = arguments.length;
  var i__7264__auto___8646 = 0;
  while (true) {
    if (i__7264__auto___8646 < len__7263__auto___8645) {
      args8642.push(arguments[i__7264__auto___8646]);
      var G__8647 = i__7264__auto___8646 + 1;
      i__7264__auto___8646 = G__8647;
      continue;
    } else {
    }
    break;
  }
  var G__8644 = args8642.length;
  switch(G__8644) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8642.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8649 = cljs.core.next(coll);
            var G__8650 = n - 1;
            coll = G__8649;
            n = G__8650;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8651 = cljs.core.next(coll);
            var G__8652 = n - 1;
            var G__8653 = not_found;
            coll = G__8651;
            n = G__8652;
            not_found = G__8653;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args8654 = [];
  var len__7263__auto___8661 = arguments.length;
  var i__7264__auto___8662 = 0;
  while (true) {
    if (i__7264__auto___8662 < len__7263__auto___8661) {
      args8654.push(arguments[i__7264__auto___8662]);
      var G__8663 = i__7264__auto___8662 + 1;
      i__7264__auto___8662 = G__8663;
      continue;
    } else {
    }
    break;
  }
  var G__8656 = args8654.length;
  switch(G__8656) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8654.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__8665 = n__$1 - 1;
      var G__8666 = cljs.core.rest(xs);
      n__$1 = G__8665;
      xs = G__8666;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args8667 = [];
  var len__7263__auto___8672 = arguments.length;
  var i__7264__auto___8673 = 0;
  while (true) {
    if (i__7264__auto___8673 < len__7263__auto___8672) {
      args8667.push(arguments[i__7264__auto___8673]);
      var G__8674 = i__7264__auto___8673 + 1;
      i__7264__auto___8673 = G__8674;
      continue;
    } else {
    }
    break;
  }
  var G__8669 = args8667.length;
  switch(G__8669) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8667.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args8676 = [];
  var len__7263__auto___8683 = arguments.length;
  var i__7264__auto___8684 = 0;
  while (true) {
    if (i__7264__auto___8684 < len__7263__auto___8683) {
      args8676.push(arguments[i__7264__auto___8684]);
      var G__8685 = i__7264__auto___8684 + 1;
      i__7264__auto___8684 = G__8685;
      continue;
    } else {
    }
    break;
  }
  var G__8682 = args8676.length;
  switch(G__8682) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8676.slice(3), 0, null);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__8687 = ret;
      var G__8688 = cljs.core.first(kvs);
      var G__8689 = cljs.core.second(kvs);
      var G__8690 = cljs.core.nnext(kvs);
      coll = G__8687;
      k = G__8688;
      v = G__8689;
      kvs = G__8690;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq8677) {
  var G__8678 = cljs.core.first(seq8677);
  var seq8677__$1 = cljs.core.next(seq8677);
  var G__8679 = cljs.core.first(seq8677__$1);
  var seq8677__$2 = cljs.core.next(seq8677__$1);
  var G__8680 = cljs.core.first(seq8677__$2);
  var seq8677__$3 = cljs.core.next(seq8677__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__8678, G__8679, G__8680, seq8677__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args8691 = [];
  var len__7263__auto___8697 = arguments.length;
  var i__7264__auto___8698 = 0;
  while (true) {
    if (i__7264__auto___8698 < len__7263__auto___8697) {
      args8691.push(arguments[i__7264__auto___8698]);
      var G__8699 = i__7264__auto___8698 + 1;
      i__7264__auto___8698 = G__8699;
      continue;
    } else {
    }
    break;
  }
  var G__8696 = args8691.length;
  switch(G__8696) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8691.slice(2), 0, null);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8701 = ret;
        var G__8702 = cljs.core.first(ks);
        var G__8703 = cljs.core.next(ks);
        coll = G__8701;
        k = G__8702;
        ks = G__8703;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq8692) {
  var G__8693 = cljs.core.first(seq8692);
  var seq8692__$1 = cljs.core.next(seq8692);
  var G__8694 = cljs.core.first(seq8692__$1);
  var seq8692__$2 = cljs.core.next(seq8692__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__8693, G__8694, seq8692__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__6193__auto__ = goog.isFunction(f);
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__8709 = null;
  var G__8709__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__8709__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__8709__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__8709__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__8709__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__8709__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__8709__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__8709__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__8709__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__8709__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8709__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8709__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8709__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8709__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8709__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8709__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8709__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8709__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8709__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8709__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8709__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8709__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__8709 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8709__1.call(this, self__);
      case 2:
        return G__8709__2.call(this, self__, a);
      case 3:
        return G__8709__3.call(this, self__, a, b);
      case 4:
        return G__8709__4.call(this, self__, a, b, c);
      case 5:
        return G__8709__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8709__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8709__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8709__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8709__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8709__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8709__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8709__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8709__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8709__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8709__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8709__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8709__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8709__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8709__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8709__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8709__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8709__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8709.cljs$core$IFn$_invoke$arity$1 = G__8709__1;
  G__8709.cljs$core$IFn$_invoke$arity$2 = G__8709__2;
  G__8709.cljs$core$IFn$_invoke$arity$3 = G__8709__3;
  G__8709.cljs$core$IFn$_invoke$arity$4 = G__8709__4;
  G__8709.cljs$core$IFn$_invoke$arity$5 = G__8709__5;
  G__8709.cljs$core$IFn$_invoke$arity$6 = G__8709__6;
  G__8709.cljs$core$IFn$_invoke$arity$7 = G__8709__7;
  G__8709.cljs$core$IFn$_invoke$arity$8 = G__8709__8;
  G__8709.cljs$core$IFn$_invoke$arity$9 = G__8709__9;
  G__8709.cljs$core$IFn$_invoke$arity$10 = G__8709__10;
  G__8709.cljs$core$IFn$_invoke$arity$11 = G__8709__11;
  G__8709.cljs$core$IFn$_invoke$arity$12 = G__8709__12;
  G__8709.cljs$core$IFn$_invoke$arity$13 = G__8709__13;
  G__8709.cljs$core$IFn$_invoke$arity$14 = G__8709__14;
  G__8709.cljs$core$IFn$_invoke$arity$15 = G__8709__15;
  G__8709.cljs$core$IFn$_invoke$arity$16 = G__8709__16;
  G__8709.cljs$core$IFn$_invoke$arity$17 = G__8709__17;
  G__8709.cljs$core$IFn$_invoke$arity$18 = G__8709__18;
  G__8709.cljs$core$IFn$_invoke$arity$19 = G__8709__19;
  G__8709.cljs$core$IFn$_invoke$arity$20 = G__8709__20;
  G__8709.cljs$core$IFn$_invoke$arity$21 = G__8709__21;
  G__8709.cljs$core$IFn$_invoke$arity$22 = G__8709__22;
  return G__8709;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args8708) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8708)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__6181__auto__ = !(o == null);
    if (and__6181__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__6181__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args8714 = [];
  var len__7263__auto___8720 = arguments.length;
  var i__7264__auto___8721 = 0;
  while (true) {
    if (i__7264__auto___8721 < len__7263__auto___8720) {
      args8714.push(arguments[i__7264__auto___8721]);
      var G__8722 = i__7264__auto___8721 + 1;
      i__7264__auto___8721 = G__8722;
      continue;
    } else {
    }
    break;
  }
  var G__8719 = args8714.length;
  switch(G__8719) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8714.slice(2), 0, null);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8724 = ret;
        var G__8725 = cljs.core.first(ks);
        var G__8726 = cljs.core.next(ks);
        coll = G__8724;
        k = G__8725;
        ks = G__8726;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq8715) {
  var G__8716 = cljs.core.first(seq8715);
  var seq8715__$1 = cljs.core.next(seq8715);
  var G__8717 = cljs.core.first(seq8715__$1);
  var seq8715__$2 = cljs.core.next(seq8715__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__8716, G__8717, seq8715__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args8747 = [];
  var len__7263__auto___8753 = arguments.length;
  var i__7264__auto___8754 = 0;
  while (true) {
    if (i__7264__auto___8754 < len__7263__auto___8753) {
      args8747.push(arguments[i__7264__auto___8754]);
      var G__8755 = i__7264__auto___8754 + 1;
      i__7264__auto___8754 = G__8755;
      continue;
    } else {
    }
    break;
  }
  var G__8750 = args8747.length;
  switch(G__8750) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8747.slice(0), 0, null);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__7282__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq8748) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8748));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__8759_8761 = obj;
  var G__8760_8762 = function(G__8759_8761, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__8759_8761, keys);
  goog.object.forEach(G__8759_8761, G__8760_8762);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8763 = i__$1 + 1;
      var G__8764 = j__$1 + 1;
      var G__8765 = len__$1 - 1;
      i__$1 = G__8763;
      j__$1 = G__8764;
      len__$1 = G__8765;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8766 = i__$1 - 1;
      var G__8767 = j__$1 - 1;
      var G__8768 = len__$1 - 1;
      i__$1 = G__8766;
      j__$1 = G__8767;
      len__$1 = G__8768;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__6193__auto__ = cljs.core.fn_QMARK_(f);
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args8779 = [];
  var len__7263__auto___8785 = arguments.length;
  var i__7264__auto___8786 = 0;
  while (true) {
    if (i__7264__auto___8786 < len__7263__auto___8785) {
      args8779.push(arguments[i__7264__auto___8786]);
      var G__8787 = i__7264__auto___8786 + 1;
      i__7264__auto___8786 = G__8787;
      continue;
    } else {
    }
    break;
  }
  var G__8784 = args8779.length;
  switch(G__8784) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8779.slice(2), 0, null);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__8789 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__8790 = etc;
          s = G__8789;
          xs = G__8790;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq8780) {
  var G__8781 = cljs.core.first(seq8780);
  var seq8780__$1 = cljs.core.next(seq8780);
  var G__8782 = cljs.core.first(seq8780__$1);
  var seq8780__$2 = cljs.core.next(seq8780__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__8781, G__8782, seq8780__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args8793 = [];
  var len__7263__auto___8796 = arguments.length;
  var i__7264__auto___8797 = 0;
  while (true) {
    if (i__7264__auto___8797 < len__7263__auto___8796) {
      args8793.push(arguments[i__7264__auto___8797]);
      var G__8798 = i__7264__auto___8797 + 1;
      i__7264__auto___8797 = G__8798;
      continue;
    } else {
    }
    break;
  }
  var G__8795 = args8793.length;
  switch(G__8795) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8793.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__8800 = xs;
      var G__8801 = ys;
      var G__8802 = len;
      var G__8803 = n + 1;
      xs = G__8800;
      ys = G__8801;
      len = G__8802;
      n = G__8803;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var args8804 = [];
  var len__7263__auto___8809 = arguments.length;
  var i__7264__auto___8810 = 0;
  while (true) {
    if (i__7264__auto___8810 < len__7263__auto___8809) {
      args8804.push(arguments[i__7264__auto___8810]);
      var G__8811 = i__7264__auto___8810 + 1;
      i__7264__auto___8810 = G__8811;
      continue;
    } else {
    }
    break;
  }
  var G__8806 = args8804.length;
  switch(G__8806) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8804.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__8807_8813 = a;
    var G__8808_8814 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__8807_8813, G__8808_8814);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args8815 = [];
  var len__7263__auto___8818 = arguments.length;
  var i__7264__auto___8819 = 0;
  while (true) {
    if (i__7264__auto___8819 < len__7263__auto___8818) {
      args8815.push(arguments[i__7264__auto___8819]);
      var G__8820 = i__7264__auto___8819 + 1;
      i__7264__auto___8819 = G__8820;
      continue;
    } else {
    }
    break;
  }
  var G__8817 = args8815.length;
  switch(G__8817) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8815.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args8822 = [];
  var len__7263__auto___8830 = arguments.length;
  var i__7264__auto___8831 = 0;
  while (true) {
    if (i__7264__auto___8831 < len__7263__auto___8830) {
      args8822.push(arguments[i__7264__auto___8831]);
      var G__8832 = i__7264__auto___8831 + 1;
      i__7264__auto___8831 = G__8832;
      continue;
    } else {
    }
    break;
  }
  var G__8824 = args8822.length;
  switch(G__8824) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8822.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__8825 = f;
    var G__8826 = cljs.core.first(s);
    var G__8827 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__8825, G__8826, G__8827) : cljs.core.reduce.call(null, G__8825, G__8826, G__8827);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__8828 = val__$1;
        var G__8829 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8828, G__8829) : f.call(null, G__8828, G__8829);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8834 = nval;
        var G__8835 = cljs.core.next(coll__$1);
        val__$1 = G__8834;
        coll__$1 = G__8835;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args8836 = [];
  var len__7263__auto___8841 = arguments.length;
  var i__7264__auto___8842 = 0;
  while (true) {
    if (i__7264__auto___8842 < len__7263__auto___8841) {
      args8836.push(arguments[i__7264__auto___8842]);
      var G__8843 = i__7264__auto___8842 + 1;
      i__7264__auto___8842 = G__8843;
      continue;
    } else {
    }
    break;
  }
  var G__8838 = args8836.length;
  switch(G__8838) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8836.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args8845 = [];
  var len__7263__auto___8848 = arguments.length;
  var i__7264__auto___8849 = 0;
  while (true) {
    if (i__7264__auto___8849 < len__7263__auto___8848) {
      args8845.push(arguments[i__7264__auto___8849]);
      var G__8850 = i__7264__auto___8849 + 1;
      i__7264__auto___8849 = G__8850;
      continue;
    } else {
    }
    break;
  }
  var G__8847 = args8845.length;
  switch(G__8847) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8845.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__8852 = null;
    var G__8852__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__8852__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__8852__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__8852 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__8852__0.call(this);
        case 1:
          return G__8852__1.call(this, x);
        case 2:
          return G__8852__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8852.cljs$core$IFn$_invoke$arity$0 = G__8852__0;
    G__8852.cljs$core$IFn$_invoke$arity$1 = G__8852__1;
    G__8852.cljs$core$IFn$_invoke$arity$2 = G__8852__2;
    return G__8852;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args8853 = [];
  var len__7263__auto___8856 = arguments.length;
  var i__7264__auto___8857 = 0;
  while (true) {
    if (i__7264__auto___8857 < len__7263__auto___8856) {
      args8853.push(arguments[i__7264__auto___8857]);
      var G__8858 = i__7264__auto___8857 + 1;
      i__7264__auto___8857 = G__8858;
      continue;
    } else {
    }
    break;
  }
  var G__8855 = args8853.length;
  switch(G__8855) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8853.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args8860 = [];
  var len__7263__auto___8866 = arguments.length;
  var i__7264__auto___8867 = 0;
  while (true) {
    if (i__7264__auto___8867 < len__7263__auto___8866) {
      args8860.push(arguments[i__7264__auto___8867]);
      var G__8868 = i__7264__auto___8867 + 1;
      i__7264__auto___8867 = G__8868;
      continue;
    } else {
    }
    break;
  }
  var G__8865 = args8860.length;
  switch(G__8865) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8860.slice(2), 0, null);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq8861) {
  var G__8862 = cljs.core.first(seq8861);
  var seq8861__$1 = cljs.core.next(seq8861);
  var G__8863 = cljs.core.first(seq8861__$1);
  var seq8861__$2 = cljs.core.next(seq8861__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__8862, G__8863, seq8861__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args8870 = [];
  var len__7263__auto___8876 = arguments.length;
  var i__7264__auto___8877 = 0;
  while (true) {
    if (i__7264__auto___8877 < len__7263__auto___8876) {
      args8870.push(arguments[i__7264__auto___8877]);
      var G__8878 = i__7264__auto___8877 + 1;
      i__7264__auto___8877 = G__8878;
      continue;
    } else {
    }
    break;
  }
  var G__8875 = args8870.length;
  switch(G__8875) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8870.slice(2), 0, null);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq8871) {
  var G__8872 = cljs.core.first(seq8871);
  var seq8871__$1 = cljs.core.next(seq8871);
  var G__8873 = cljs.core.first(seq8871__$1);
  var seq8871__$2 = cljs.core.next(seq8871__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__8872, G__8873, seq8871__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args8880 = [];
  var len__7263__auto___8886 = arguments.length;
  var i__7264__auto___8887 = 0;
  while (true) {
    if (i__7264__auto___8887 < len__7263__auto___8886) {
      args8880.push(arguments[i__7264__auto___8887]);
      var G__8888 = i__7264__auto___8887 + 1;
      i__7264__auto___8887 = G__8888;
      continue;
    } else {
    }
    break;
  }
  var G__8885 = args8880.length;
  switch(G__8885) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8880.slice(2), 0, null);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq8881) {
  var G__8882 = cljs.core.first(seq8881);
  var seq8881__$1 = cljs.core.next(seq8881);
  var G__8883 = cljs.core.first(seq8881__$1);
  var seq8881__$2 = cljs.core.next(seq8881__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__8882, G__8883, seq8881__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args8890 = [];
  var len__7263__auto___8896 = arguments.length;
  var i__7264__auto___8897 = 0;
  while (true) {
    if (i__7264__auto___8897 < len__7263__auto___8896) {
      args8890.push(arguments[i__7264__auto___8897]);
      var G__8898 = i__7264__auto___8897 + 1;
      i__7264__auto___8897 = G__8898;
      continue;
    } else {
    }
    break;
  }
  var G__8895 = args8890.length;
  switch(G__8895) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8890.slice(2), 0, null);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq8891) {
  var G__8892 = cljs.core.first(seq8891);
  var seq8891__$1 = cljs.core.next(seq8891);
  var G__8893 = cljs.core.first(seq8891__$1);
  var seq8891__$2 = cljs.core.next(seq8891__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__8892, G__8893, seq8891__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args8900 = [];
  var len__7263__auto___8906 = arguments.length;
  var i__7264__auto___8907 = 0;
  while (true) {
    if (i__7264__auto___8907 < len__7263__auto___8906) {
      args8900.push(arguments[i__7264__auto___8907]);
      var G__8908 = i__7264__auto___8907 + 1;
      i__7264__auto___8907 = G__8908;
      continue;
    } else {
    }
    break;
  }
  var G__8905 = args8900.length;
  switch(G__8905) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8900.slice(2), 0, null);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__8910 = y;
        var G__8911 = cljs.core.first(more);
        var G__8912 = cljs.core.next(more);
        x = G__8910;
        y = G__8911;
        more = G__8912;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq8901) {
  var G__8902 = cljs.core.first(seq8901);
  var seq8901__$1 = cljs.core.next(seq8901);
  var G__8903 = cljs.core.first(seq8901__$1);
  var seq8901__$2 = cljs.core.next(seq8901__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__8902, G__8903, seq8901__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args8913 = [];
  var len__7263__auto___8919 = arguments.length;
  var i__7264__auto___8920 = 0;
  while (true) {
    if (i__7264__auto___8920 < len__7263__auto___8919) {
      args8913.push(arguments[i__7264__auto___8920]);
      var G__8921 = i__7264__auto___8920 + 1;
      i__7264__auto___8920 = G__8921;
      continue;
    } else {
    }
    break;
  }
  var G__8918 = args8913.length;
  switch(G__8918) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8913.slice(2), 0, null);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__8923 = y;
        var G__8924 = cljs.core.first(more);
        var G__8925 = cljs.core.next(more);
        x = G__8923;
        y = G__8924;
        more = G__8925;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq8914) {
  var G__8915 = cljs.core.first(seq8914);
  var seq8914__$1 = cljs.core.next(seq8914);
  var G__8916 = cljs.core.first(seq8914__$1);
  var seq8914__$2 = cljs.core.next(seq8914__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8915, G__8916, seq8914__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args8926 = [];
  var len__7263__auto___8932 = arguments.length;
  var i__7264__auto___8933 = 0;
  while (true) {
    if (i__7264__auto___8933 < len__7263__auto___8932) {
      args8926.push(arguments[i__7264__auto___8933]);
      var G__8934 = i__7264__auto___8933 + 1;
      i__7264__auto___8933 = G__8934;
      continue;
    } else {
    }
    break;
  }
  var G__8931 = args8926.length;
  switch(G__8931) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8926.slice(2), 0, null);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__8936 = y;
        var G__8937 = cljs.core.first(more);
        var G__8938 = cljs.core.next(more);
        x = G__8936;
        y = G__8937;
        more = G__8938;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq8927) {
  var G__8928 = cljs.core.first(seq8927);
  var seq8927__$1 = cljs.core.next(seq8927);
  var G__8929 = cljs.core.first(seq8927__$1);
  var seq8927__$2 = cljs.core.next(seq8927__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__8928, G__8929, seq8927__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args8939 = [];
  var len__7263__auto___8945 = arguments.length;
  var i__7264__auto___8946 = 0;
  while (true) {
    if (i__7264__auto___8946 < len__7263__auto___8945) {
      args8939.push(arguments[i__7264__auto___8946]);
      var G__8947 = i__7264__auto___8946 + 1;
      i__7264__auto___8946 = G__8947;
      continue;
    } else {
    }
    break;
  }
  var G__8944 = args8939.length;
  switch(G__8944) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8939.slice(2), 0, null);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__8949 = y;
        var G__8950 = cljs.core.first(more);
        var G__8951 = cljs.core.next(more);
        x = G__8949;
        y = G__8950;
        more = G__8951;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq8940) {
  var G__8941 = cljs.core.first(seq8940);
  var seq8940__$1 = cljs.core.next(seq8940);
  var G__8942 = cljs.core.first(seq8940__$1);
  var seq8940__$2 = cljs.core.next(seq8940__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8941, G__8942, seq8940__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args8952 = [];
  var len__7263__auto___8958 = arguments.length;
  var i__7264__auto___8959 = 0;
  while (true) {
    if (i__7264__auto___8959 < len__7263__auto___8958) {
      args8952.push(arguments[i__7264__auto___8959]);
      var G__8960 = i__7264__auto___8959 + 1;
      i__7264__auto___8959 = G__8960;
      continue;
    } else {
    }
    break;
  }
  var G__8957 = args8952.length;
  switch(G__8957) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8952.slice(2), 0, null);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__6524__auto__ = x;
  var y__6525__auto__ = y;
  return x__6524__auto__ > y__6525__auto__ ? x__6524__auto__ : y__6525__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__6524__auto__ = x;
    var y__6525__auto__ = y;
    return x__6524__auto__ > y__6525__auto__ ? x__6524__auto__ : y__6525__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq8953) {
  var G__8954 = cljs.core.first(seq8953);
  var seq8953__$1 = cljs.core.next(seq8953);
  var G__8955 = cljs.core.first(seq8953__$1);
  var seq8953__$2 = cljs.core.next(seq8953__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__8954, G__8955, seq8953__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args8962 = [];
  var len__7263__auto___8968 = arguments.length;
  var i__7264__auto___8969 = 0;
  while (true) {
    if (i__7264__auto___8969 < len__7263__auto___8968) {
      args8962.push(arguments[i__7264__auto___8969]);
      var G__8970 = i__7264__auto___8969 + 1;
      i__7264__auto___8969 = G__8970;
      continue;
    } else {
    }
    break;
  }
  var G__8967 = args8962.length;
  switch(G__8967) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8962.slice(2), 0, null);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__6531__auto__ = x;
  var y__6532__auto__ = y;
  return x__6531__auto__ < y__6532__auto__ ? x__6531__auto__ : y__6532__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__6531__auto__ = x;
    var y__6532__auto__ = y;
    return x__6531__auto__ < y__6532__auto__ ? x__6531__auto__ : y__6532__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq8963) {
  var G__8964 = cljs.core.first(seq8963);
  var seq8963__$1 = cljs.core.next(seq8963);
  var G__8965 = cljs.core.first(seq8963__$1);
  var seq8963__$2 = cljs.core.next(seq8963__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__8964, G__8965, seq8963__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args8972 = [];
  var len__7263__auto___8978 = arguments.length;
  var i__7264__auto___8979 = 0;
  while (true) {
    if (i__7264__auto___8979 < len__7263__auto___8978) {
      args8972.push(arguments[i__7264__auto___8979]);
      var G__8980 = i__7264__auto___8979 + 1;
      i__7264__auto___8979 = G__8980;
      continue;
    } else {
    }
    break;
  }
  var G__8977 = args8972.length;
  switch(G__8977) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8972.slice(2), 0, null);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq8973) {
  var G__8974 = cljs.core.first(seq8973);
  var seq8973__$1 = cljs.core.next(seq8973);
  var G__8975 = cljs.core.first(seq8973__$1);
  var seq8973__$2 = cljs.core.next(seq8973__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__8974, G__8975, seq8973__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args8982 = [];
  var len__7263__auto___8988 = arguments.length;
  var i__7264__auto___8989 = 0;
  while (true) {
    if (i__7264__auto___8989 < len__7263__auto___8988) {
      args8982.push(arguments[i__7264__auto___8989]);
      var G__8990 = i__7264__auto___8989 + 1;
      i__7264__auto___8989 = G__8990;
      continue;
    } else {
    }
    break;
  }
  var G__8987 = args8982.length;
  switch(G__8987) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8982.slice(2), 0, null);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq8983) {
  var G__8984 = cljs.core.first(seq8983);
  var seq8983__$1 = cljs.core.next(seq8983);
  var G__8985 = cljs.core.first(seq8983__$1);
  var seq8983__$2 = cljs.core.next(seq8983__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__8984, G__8985, seq8983__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args8992 = [];
  var len__7263__auto___8998 = arguments.length;
  var i__7264__auto___8999 = 0;
  while (true) {
    if (i__7264__auto___8999 < len__7263__auto___8998) {
      args8992.push(arguments[i__7264__auto___8999]);
      var G__9000 = i__7264__auto___8999 + 1;
      i__7264__auto___8999 = G__9000;
      continue;
    } else {
    }
    break;
  }
  var G__8997 = args8992.length;
  switch(G__8997) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args8992.slice(2), 0, null);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq8993) {
  var G__8994 = cljs.core.first(seq8993);
  var seq8993__$1 = cljs.core.next(seq8993);
  var G__8995 = cljs.core.first(seq8993__$1);
  var seq8993__$2 = cljs.core.next(seq8993__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__8994, G__8995, seq8993__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args9002 = [];
  var len__7263__auto___9008 = arguments.length;
  var i__7264__auto___9009 = 0;
  while (true) {
    if (i__7264__auto___9009 < len__7263__auto___9008) {
      args9002.push(arguments[i__7264__auto___9009]);
      var G__9010 = i__7264__auto___9009 + 1;
      i__7264__auto___9009 = G__9010;
      continue;
    } else {
    }
    break;
  }
  var G__9007 = args9002.length;
  switch(G__9007) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9002.slice(2), 0, null);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq9003) {
  var G__9004 = cljs.core.first(seq9003);
  var seq9003__$1 = cljs.core.next(seq9003);
  var G__9005 = cljs.core.first(seq9003__$1);
  var seq9003__$2 = cljs.core.next(seq9003__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__9004, G__9005, seq9003__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args9012 = [];
  var len__7263__auto___9018 = arguments.length;
  var i__7264__auto___9019 = 0;
  while (true) {
    if (i__7264__auto___9019 < len__7263__auto___9018) {
      args9012.push(arguments[i__7264__auto___9019]);
      var G__9020 = i__7264__auto___9019 + 1;
      i__7264__auto___9019 = G__9020;
      continue;
    } else {
    }
    break;
  }
  var G__9017 = args9012.length;
  switch(G__9017) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9012.slice(2), 0, null);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq9013) {
  var G__9014 = cljs.core.first(seq9013);
  var seq9013__$1 = cljs.core.next(seq9013);
  var G__9015 = cljs.core.first(seq9013__$1);
  var seq9013__$2 = cljs.core.next(seq9013__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__9014, G__9015, seq9013__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args9022 = [];
  var len__7263__auto___9028 = arguments.length;
  var i__7264__auto___9029 = 0;
  while (true) {
    if (i__7264__auto___9029 < len__7263__auto___9028) {
      args9022.push(arguments[i__7264__auto___9029]);
      var G__9030 = i__7264__auto___9029 + 1;
      i__7264__auto___9029 = G__9030;
      continue;
    } else {
    }
    break;
  }
  var G__9027 = args9022.length;
  switch(G__9027) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9022.slice(2), 0, null);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq9023) {
  var G__9024 = cljs.core.first(seq9023);
  var seq9023__$1 = cljs.core.next(seq9023);
  var G__9025 = cljs.core.first(seq9023__$1);
  var seq9023__$2 = cljs.core.next(seq9023__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__9024, G__9025, seq9023__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args9032 = [];
  var len__7263__auto___9038 = arguments.length;
  var i__7264__auto___9039 = 0;
  while (true) {
    if (i__7264__auto___9039 < len__7263__auto___9038) {
      args9032.push(arguments[i__7264__auto___9039]);
      var G__9040 = i__7264__auto___9039 + 1;
      i__7264__auto___9039 = G__9040;
      continue;
    } else {
    }
    break;
  }
  var G__9037 = args9032.length;
  switch(G__9037) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9032.slice(2), 0, null);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq9033) {
  var G__9034 = cljs.core.first(seq9033);
  var seq9033__$1 = cljs.core.next(seq9033);
  var G__9035 = cljs.core.first(seq9033__$1);
  var seq9033__$2 = cljs.core.next(seq9033__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__9034, G__9035, seq9033__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args9042 = [];
  var len__7263__auto___9048 = arguments.length;
  var i__7264__auto___9049 = 0;
  while (true) {
    if (i__7264__auto___9049 < len__7263__auto___9048) {
      args9042.push(arguments[i__7264__auto___9049]);
      var G__9050 = i__7264__auto___9049 + 1;
      i__7264__auto___9049 = G__9050;
      continue;
    } else {
    }
    break;
  }
  var G__9047 = args9042.length;
  switch(G__9047) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9042.slice(2), 0, null);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq9043) {
  var G__9044 = cljs.core.first(seq9043);
  var seq9043__$1 = cljs.core.next(seq9043);
  var G__9045 = cljs.core.first(seq9043__$1);
  var seq9043__$2 = cljs.core.next(seq9043__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__9044, G__9045, seq9043__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args9052 = [];
  var len__7263__auto___9058 = arguments.length;
  var i__7264__auto___9059 = 0;
  while (true) {
    if (i__7264__auto___9059 < len__7263__auto___9058) {
      args9052.push(arguments[i__7264__auto___9059]);
      var G__9060 = i__7264__auto___9059 + 1;
      i__7264__auto___9059 = G__9060;
      continue;
    } else {
    }
    break;
  }
  var G__9057 = args9052.length;
  switch(G__9057) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9052.slice(2), 0, null);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq9053) {
  var G__9054 = cljs.core.first(seq9053);
  var seq9053__$1 = cljs.core.next(seq9053);
  var G__9055 = cljs.core.first(seq9053__$1);
  var seq9053__$2 = cljs.core.next(seq9053__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__9054, G__9055, seq9053__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args9062 = [];
  var len__7263__auto___9068 = arguments.length;
  var i__7264__auto___9069 = 0;
  while (true) {
    if (i__7264__auto___9069 < len__7263__auto___9068) {
      args9062.push(arguments[i__7264__auto___9069]);
      var G__9070 = i__7264__auto___9069 + 1;
      i__7264__auto___9069 = G__9070;
      continue;
    } else {
    }
    break;
  }
  var G__9067 = args9062.length;
  switch(G__9067) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9062.slice(2), 0, null);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq9063) {
  var G__9064 = cljs.core.first(seq9063);
  var seq9063__$1 = cljs.core.next(seq9063);
  var G__9065 = cljs.core.first(seq9063__$1);
  var seq9063__$2 = cljs.core.next(seq9063__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__9064, G__9065, seq9063__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args9072 = [];
  var len__7263__auto___9078 = arguments.length;
  var i__7264__auto___9079 = 0;
  while (true) {
    if (i__7264__auto___9079 < len__7263__auto___9078) {
      args9072.push(arguments[i__7264__auto___9079]);
      var G__9080 = i__7264__auto___9079 + 1;
      i__7264__auto___9079 = G__9080;
      continue;
    } else {
    }
    break;
  }
  var G__9077 = args9072.length;
  switch(G__9077) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9072.slice(2), 0, null);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq9073) {
  var G__9074 = cljs.core.first(seq9073);
  var seq9073__$1 = cljs.core.next(seq9073);
  var G__9075 = cljs.core.first(seq9073__$1);
  var seq9073__$2 = cljs.core.next(seq9073__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__9074, G__9075, seq9073__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args9082 = [];
  var len__7263__auto___9088 = arguments.length;
  var i__7264__auto___9089 = 0;
  while (true) {
    if (i__7264__auto___9089 < len__7263__auto___9088) {
      args9082.push(arguments[i__7264__auto___9089]);
      var G__9090 = i__7264__auto___9089 + 1;
      i__7264__auto___9089 = G__9090;
      continue;
    } else {
    }
    break;
  }
  var G__9087 = args9082.length;
  switch(G__9087) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9082.slice(2), 0, null);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__9092 = y;
        var G__9093 = cljs.core.first(more);
        var G__9094 = cljs.core.next(more);
        x = G__9092;
        y = G__9093;
        more = G__9094;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq9083) {
  var G__9084 = cljs.core.first(seq9083);
  var seq9083__$1 = cljs.core.next(seq9083);
  var G__9085 = cljs.core.first(seq9083__$1);
  var seq9083__$2 = cljs.core.next(seq9083__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__9084, G__9085, seq9083__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(x) {
  return x > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(x) {
  return x === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__9095 = n__$1 - 1;
      var G__9096 = cljs.core.next(xs);
      n__$1 = G__9095;
      xs = G__9096;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args9097 = [];
  var len__7263__auto___9102 = arguments.length;
  var i__7264__auto___9103 = 0;
  while (true) {
    if (i__7264__auto___9103 < len__7263__auto___9102) {
      args9097.push(arguments[i__7264__auto___9103]);
      var G__9104 = i__7264__auto___9103 + 1;
      i__7264__auto___9103 = G__9104;
      continue;
    } else {
    }
    break;
  }
  var G__9101 = args9097.length;
  switch(G__9101) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9097.slice(1), 0, null);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7282__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__9106 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__9107 = cljs.core.next(more);
      sb = G__9106;
      more = G__9107;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq9098) {
  var G__9099 = cljs.core.first(seq9098);
  var seq9098__$1 = cljs.core.next(seq9098);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__9099, seq9098__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args9108 = [];
  var len__7263__auto___9111 = arguments.length;
  var i__7264__auto___9112 = 0;
  while (true) {
    if (i__7264__auto___9112 < len__7263__auto___9111) {
      args9108.push(arguments[i__7264__auto___9112]);
      var G__9113 = i__7264__auto___9112 + 1;
      i__7264__auto___9112 = G__9113;
      continue;
    } else {
    }
    break;
  }
  var G__9110 = args9108.length;
  switch(G__9110) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9108.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__9115 = cljs.core.next(xs);
            var G__9116 = cljs.core.next(ys);
            xs = G__9115;
            ys = G__9116;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__9117 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__9118 = cljs.core.next(s);
        res = G__9117;
        s = G__9118;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__9119 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__9120 = cljs.core.next(s);
      h = G__9119;
      s = G__9120;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__9121 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__9122 = cljs.core.next(s__$1);
      h = G__9121;
      s__$1 = G__9122;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__9129_9135 = cljs.core.seq(fn_map);
  var chunk__9130_9136 = null;
  var count__9131_9137 = 0;
  var i__9132_9138 = 0;
  while (true) {
    if (i__9132_9138 < count__9131_9137) {
      var vec__9133_9139 = chunk__9130_9136.cljs$core$IIndexed$_nth$arity$2(null, i__9132_9138);
      var key_name_9140 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9133_9139, 0, null);
      var f_9141 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9133_9139, 1, null);
      var str_name_9142 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_9140) : cljs.core.name.call(null, key_name_9140);
      obj[str_name_9142] = f_9141;
      var G__9143 = seq__9129_9135;
      var G__9144 = chunk__9130_9136;
      var G__9145 = count__9131_9137;
      var G__9146 = i__9132_9138 + 1;
      seq__9129_9135 = G__9143;
      chunk__9130_9136 = G__9144;
      count__9131_9137 = G__9145;
      i__9132_9138 = G__9146;
      continue;
    } else {
      var temp__4425__auto___9147 = cljs.core.seq(seq__9129_9135);
      if (temp__4425__auto___9147) {
        var seq__9129_9148__$1 = temp__4425__auto___9147;
        if (cljs.core.chunked_seq_QMARK_(seq__9129_9148__$1)) {
          var c__7004__auto___9149 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__9129_9148__$1) : cljs.core.chunk_first.call(null, seq__9129_9148__$1);
          var G__9150 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__9129_9148__$1) : cljs.core.chunk_rest.call(null, seq__9129_9148__$1);
          var G__9151 = c__7004__auto___9149;
          var G__9152 = cljs.core.count(c__7004__auto___9149);
          var G__9153 = 0;
          seq__9129_9135 = G__9150;
          chunk__9130_9136 = G__9151;
          count__9131_9137 = G__9152;
          i__9132_9138 = G__9153;
          continue;
        } else {
          var vec__9134_9154 = cljs.core.first(seq__9129_9148__$1);
          var key_name_9155 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9134_9154, 0, null);
          var f_9156 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9134_9154, 1, null);
          var str_name_9157 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_9155) : cljs.core.name.call(null, key_name_9155);
          obj[str_name_9157] = f_9156;
          var G__9158 = cljs.core.next(seq__9129_9148__$1);
          var G__9159 = null;
          var G__9160 = 0;
          var G__9161 = 0;
          seq__9129_9135 = G__9158;
          chunk__9130_9136 = G__9159;
          count__9131_9137 = G__9160;
          i__9132_9138 = G__9161;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.indexOf = function() {
  var G__9162 = null;
  var G__9162__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9162__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9162 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9162__1.call(this, x);
      case 2:
        return G__9162__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9162.cljs$core$IFn$_invoke$arity$1 = G__9162__1;
  G__9162.cljs$core$IFn$_invoke$arity$2 = G__9162__2;
  return G__9162;
}();
cljs.core.List.prototype.lastIndexOf = function() {
  var G__9163 = null;
  var G__9163__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__9163__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9163 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9163__1.call(this, x);
      case 2:
        return G__9163__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9163.cljs$core$IFn$_invoke$arity$1 = G__9163__1;
  G__9163.cljs$core$IFn$_invoke$arity$2 = G__9163__2;
  return G__9163;
}();
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.indexOf = function() {
  var G__9166 = null;
  var G__9166__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9166__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9166 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9166__1.call(this, x);
      case 2:
        return G__9166__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9166.cljs$core$IFn$_invoke$arity$1 = G__9166__1;
  G__9166.cljs$core$IFn$_invoke$arity$2 = G__9166__2;
  return G__9166;
}();
cljs.core.EmptyList.prototype.lastIndexOf = function() {
  var G__9167 = null;
  var G__9167__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__9167__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9167 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9167__1.call(this, x);
      case 2:
        return G__9167__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9167.cljs$core$IFn$_invoke$arity$1 = G__9167__1;
  G__9167.cljs$core$IFn$_invoke$arity$2 = G__9167__2;
  return G__9167;
}();
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9171 = arguments.length;
  var i__7264__auto___9172 = 0;
  while (true) {
    if (i__7264__auto___9172 < len__7263__auto___9171) {
      args__7270__auto__.push(arguments[i__7264__auto___9172]);
      var G__9173 = i__7264__auto___9172 + 1;
      i__7264__auto___9172 = G__9173;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__9174 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__9174;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__9175 = i - 1;
      var G__9176 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__9175;
      r = G__9176;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq9170) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9170));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.indexOf = function() {
  var G__9177 = null;
  var G__9177__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9177__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9177 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9177__1.call(this, x);
      case 2:
        return G__9177__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9177.cljs$core$IFn$_invoke$arity$1 = G__9177__1;
  G__9177.cljs$core$IFn$_invoke$arity$2 = G__9177__2;
  return G__9177;
}();
cljs.core.Cons.prototype.lastIndexOf = function() {
  var G__9178 = null;
  var G__9178__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__9178__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9178 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9178__1.call(this, x);
      case 2:
        return G__9178__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9178.cljs$core$IFn$_invoke$arity$1 = G__9178__1;
  G__9178.cljs$core$IFn$_invoke$arity$2 = G__9178__2;
  return G__9178;
}();
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__6193__auto__ = coll == null;
    if (or__6193__auto__) {
      return or__6193__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = cljs.core.not(a.ns);
      if (and__6181__auto__) {
        return b.ns;
      } else {
        return and__6181__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__9189 = a.ns;
            var G__9190 = b.ns;
            return goog.array.defaultCompare(G__9189, G__9190);
          }();
          if (0 === nsc) {
            var G__9191 = a.name;
            var G__9192 = b.name;
            return goog.array.defaultCompare(G__9191, G__9192);
          } else {
            return nsc;
          }
        }
      } else {
        var G__9193 = a.name;
        var G__9194 = b.name;
        return goog.array.defaultCompare(G__9193, G__9194);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__9196 = null;
  var G__9196__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__9196__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__9196 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9196__2.call(this, self__, coll);
      case 3:
        return G__9196__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9196.cljs$core$IFn$_invoke$arity$2 = G__9196__2;
  G__9196.cljs$core$IFn$_invoke$arity$3 = G__9196__3;
  return G__9196;
}();
cljs.core.Keyword.prototype.apply = function(self__, args9195) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9195)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__6628__auto__ = self__._hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args9199 = [];
  var len__7263__auto___9202 = arguments.length;
  var i__7264__auto___9203 = 0;
  while (true) {
    if (i__7264__auto___9203 < len__7263__auto___9202) {
      args9199.push(arguments[i__7264__auto___9203]);
      var G__9204 = i__7264__auto___9203 + 1;
      i__7264__auto___9203 = G__9204;
      continue;
    } else {
    }
    break;
  }
  var G__9201 = args9199.length;
  switch(G__9201) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9199.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.indexOf = function() {
  var G__9206 = null;
  var G__9206__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9206__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9206 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9206__1.call(this, x);
      case 2:
        return G__9206__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9206.cljs$core$IFn$_invoke$arity$1 = G__9206__1;
  G__9206.cljs$core$IFn$_invoke$arity$2 = G__9206__2;
  return G__9206;
}();
cljs.core.LazySeq.prototype.lastIndexOf = function() {
  var G__9207 = null;
  var G__9207__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__9207__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9207 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9207__1.call(this, x);
      case 2:
        return G__9207__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9207.cljs$core$IFn$_invoke$arity$1 = G__9207__1;
  G__9207.cljs$core$IFn$_invoke$arity$2 = G__9207__2;
  return G__9207;
}();
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__9208 = ls.sval();
        ls = G__9208;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args9209 = [];
  var len__7263__auto___9212 = arguments.length;
  var i__7264__auto___9213 = 0;
  while (true) {
    if (i__7264__auto___9213 < len__7263__auto___9212) {
      args9209.push(arguments[i__7264__auto___9213]);
      var G__9214 = i__7264__auto___9213 + 1;
      i__7264__auto___9213 = G__9214;
      continue;
    } else {
    }
    break;
  }
  var G__9211 = args9209.length;
  switch(G__9211) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9209.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.indexOf = function() {
  var G__9216 = null;
  var G__9216__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9216__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9216 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9216__1.call(this, x);
      case 2:
        return G__9216__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9216.cljs$core$IFn$_invoke$arity$1 = G__9216__1;
  G__9216.cljs$core$IFn$_invoke$arity$2 = G__9216__2;
  return G__9216;
}();
cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
  var G__9217 = null;
  var G__9217__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__9217__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9217 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9217__1.call(this, x);
      case 2:
        return G__9217__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9217.cljs$core$IFn$_invoke$arity$1 = G__9217__1;
  G__9217.cljs$core$IFn$_invoke$arity$2 = G__9217__2;
  return G__9217;
}();
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__9220 = cljs.core.next(s__$1);
      s__$1 = G__9220;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_9221 = 0;
  var xs_9222 = cljs.core.seq(coll);
  while (true) {
    if (xs_9222) {
      ret[i_9221] = cljs.core.to_array(cljs.core.first(xs_9222));
      var G__9223 = i_9221 + 1;
      var G__9224 = cljs.core.next(xs_9222);
      i_9221 = G__9223;
      xs_9222 = G__9224;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args9225 = [];
  var len__7263__auto___9228 = arguments.length;
  var i__7264__auto___9229 = 0;
  while (true) {
    if (i__7264__auto___9229 < len__7263__auto___9228) {
      args9225.push(arguments[i__7264__auto___9229]);
      var G__9230 = i__7264__auto___9229 + 1;
      i__7264__auto___9229 = G__9230;
      continue;
    } else {
    }
    break;
  }
  var G__9227 = args9225.length;
  switch(G__9227) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9225.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9232 = i + 1;
        var G__9233 = cljs.core.next(s__$1);
        i = G__9232;
        s__$1 = G__9233;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7108__auto___9234 = size;
    var i_9235 = 0;
    while (true) {
      if (i_9235 < n__7108__auto___9234) {
        a[i_9235] = init_val_or_seq;
        var G__9236 = i_9235 + 1;
        i_9235 = G__9236;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args9237 = [];
  var len__7263__auto___9240 = arguments.length;
  var i__7264__auto___9241 = 0;
  while (true) {
    if (i__7264__auto___9241 < len__7263__auto___9240) {
      args9237.push(arguments[i__7264__auto___9241]);
      var G__9242 = i__7264__auto___9241 + 1;
      i__7264__auto___9241 = G__9242;
      continue;
    } else {
    }
    break;
  }
  var G__9239 = args9237.length;
  switch(G__9239) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9237.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9244 = i + 1;
        var G__9245 = cljs.core.next(s__$1);
        i = G__9244;
        s__$1 = G__9245;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7108__auto___9246 = size;
    var i_9247 = 0;
    while (true) {
      if (i_9247 < n__7108__auto___9246) {
        a[i_9247] = init_val_or_seq;
        var G__9248 = i_9247 + 1;
        i_9247 = G__9248;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args9249 = [];
  var len__7263__auto___9252 = arguments.length;
  var i__7264__auto___9253 = 0;
  while (true) {
    if (i__7264__auto___9253 < len__7263__auto___9252) {
      args9249.push(arguments[i__7264__auto___9253]);
      var G__9254 = i__7264__auto___9253 + 1;
      i__7264__auto___9253 = G__9254;
      continue;
    } else {
    }
    break;
  }
  var G__9251 = args9249.length;
  switch(G__9251) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9249.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9256 = i + 1;
        var G__9257 = cljs.core.next(s__$1);
        i = G__9256;
        s__$1 = G__9257;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7108__auto___9258 = size;
    var i_9259 = 0;
    while (true) {
      if (i_9259 < n__7108__auto___9258) {
        a[i_9259] = init_val_or_seq;
        var G__9260 = i_9259 + 1;
        i_9259 = G__9260;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args9261 = [];
  var len__7263__auto___9264 = arguments.length;
  var i__7264__auto___9265 = 0;
  while (true) {
    if (i__7264__auto___9265 < len__7263__auto___9264) {
      args9261.push(arguments[i__7264__auto___9265]);
      var G__9266 = i__7264__auto___9265 + 1;
      i__7264__auto___9265 = G__9266;
      continue;
    } else {
    }
    break;
  }
  var G__9263 = args9261.length;
  switch(G__9263) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9261.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9268 = i + 1;
        var G__9269 = cljs.core.next(s__$1);
        i = G__9268;
        s__$1 = G__9269;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7108__auto___9270 = size;
    var i_9271 = 0;
    while (true) {
      if (i_9271 < n__7108__auto___9270) {
        a[i_9271] = init_val_or_seq;
        var G__9272 = i_9271 + 1;
        i_9271 = G__9272;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__9273 = cljs.core.next(s__$1);
        var G__9274 = i - 1;
        var G__9275 = sum + 1;
        s__$1 = G__9273;
        i = G__9274;
        sum = G__9275;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args9277 = [];
  var len__7263__auto___9289 = arguments.length;
  var i__7264__auto___9290 = 0;
  while (true) {
    if (i__7264__auto___9290 < len__7263__auto___9289) {
      args9277.push(arguments[i__7264__auto___9290]);
      var G__9291 = i__7264__auto___9290 + 1;
      i__7264__auto___9290 = G__9291;
      continue;
    } else {
    }
    break;
  }
  var G__9282 = args9277.length;
  switch(G__9282) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9277.slice(2), 0, null);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq9278) {
  var G__9279 = cljs.core.first(seq9278);
  var seq9278__$1 = cljs.core.next(seq9278);
  var G__9280 = cljs.core.first(seq9278__$1);
  var seq9278__$2 = cljs.core.next(seq9278__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__9279, G__9280, seq9278__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args9293 = [];
  var len__7263__auto___9301 = arguments.length;
  var i__7264__auto___9302 = 0;
  while (true) {
    if (i__7264__auto___9302 < len__7263__auto___9301) {
      args9293.push(arguments[i__7264__auto___9302]);
      var G__9303 = i__7264__auto___9302 + 1;
      i__7264__auto___9302 = G__9303;
      continue;
    } else {
    }
    break;
  }
  var G__9300 = args9293.length;
  switch(G__9300) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9293.slice(4), 0, null);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7282__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq9294) {
  var G__9295 = cljs.core.first(seq9294);
  var seq9294__$1 = cljs.core.next(seq9294);
  var G__9296 = cljs.core.first(seq9294__$1);
  var seq9294__$2 = cljs.core.next(seq9294__$1);
  var G__9297 = cljs.core.first(seq9294__$2);
  var seq9294__$3 = cljs.core.next(seq9294__$2);
  var G__9298 = cljs.core.first(seq9294__$3);
  var seq9294__$4 = cljs.core.next(seq9294__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__9295, G__9296, G__9297, G__9298, seq9294__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args9305 = [];
  var len__7263__auto___9311 = arguments.length;
  var i__7264__auto___9312 = 0;
  while (true) {
    if (i__7264__auto___9312 < len__7263__auto___9311) {
      args9305.push(arguments[i__7264__auto___9312]);
      var G__9313 = i__7264__auto___9312 + 1;
      i__7264__auto___9312 = G__9313;
      continue;
    } else {
    }
    break;
  }
  var G__9310 = args9305.length;
  switch(G__9310) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9305.slice(2), 0, null);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(tcoll) {
  return tcoll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__9315 = ntcoll;
      var G__9316 = cljs.core.first(vals);
      var G__9317 = cljs.core.next(vals);
      tcoll = G__9315;
      val = G__9316;
      vals = G__9317;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq9306) {
  var G__9307 = cljs.core.first(seq9306);
  var seq9306__$1 = cljs.core.next(seq9306);
  var G__9308 = cljs.core.first(seq9306__$1);
  var seq9306__$2 = cljs.core.next(seq9306__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9307, G__9308, seq9306__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args9318 = [];
  var len__7263__auto___9325 = arguments.length;
  var i__7264__auto___9326 = 0;
  while (true) {
    if (i__7264__auto___9326 < len__7263__auto___9325) {
      args9318.push(arguments[i__7264__auto___9326]);
      var G__9327 = i__7264__auto___9326 + 1;
      i__7264__auto___9326 = G__9327;
      continue;
    } else {
    }
    break;
  }
  var G__9324 = args9318.length;
  switch(G__9324) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9318.slice(3), 0, null);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__9329 = ntcoll;
      var G__9330 = cljs.core.first(kvs);
      var G__9331 = cljs.core.second(kvs);
      var G__9332 = cljs.core.nnext(kvs);
      tcoll = G__9329;
      key = G__9330;
      val = G__9331;
      kvs = G__9332;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq9319) {
  var G__9320 = cljs.core.first(seq9319);
  var seq9319__$1 = cljs.core.next(seq9319);
  var G__9321 = cljs.core.first(seq9319__$1);
  var seq9319__$2 = cljs.core.next(seq9319__$1);
  var G__9322 = cljs.core.first(seq9319__$2);
  var seq9319__$3 = cljs.core.next(seq9319__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9320, G__9321, G__9322, seq9319__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args9333 = [];
  var len__7263__auto___9339 = arguments.length;
  var i__7264__auto___9340 = 0;
  while (true) {
    if (i__7264__auto___9340 < len__7263__auto___9339) {
      args9333.push(arguments[i__7264__auto___9340]);
      var G__9341 = i__7264__auto___9340 + 1;
      i__7264__auto___9340 = G__9341;
      continue;
    } else {
    }
    break;
  }
  var G__9338 = args9333.length;
  switch(G__9338) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9333.slice(2), 0, null);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__9343 = ntcoll;
      var G__9344 = cljs.core.first(ks);
      var G__9345 = cljs.core.next(ks);
      tcoll = G__9343;
      key = G__9344;
      ks = G__9345;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq9334) {
  var G__9335 = cljs.core.first(seq9334);
  var seq9334__$1 = cljs.core.next(seq9334);
  var G__9336 = cljs.core.first(seq9334__$1);
  var seq9334__$2 = cljs.core.next(seq9334__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9335, G__9336, seq9334__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args9346 = [];
  var len__7263__auto___9352 = arguments.length;
  var i__7264__auto___9353 = 0;
  while (true) {
    if (i__7264__auto___9353 < len__7263__auto___9352) {
      args9346.push(arguments[i__7264__auto___9353]);
      var G__9354 = i__7264__auto___9353 + 1;
      i__7264__auto___9353 = G__9354;
      continue;
    } else {
    }
    break;
  }
  var G__9351 = args9346.length;
  switch(G__9351) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9346.slice(2), 0, null);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__9356 = ntcoll;
      var G__9357 = cljs.core.first(vals);
      var G__9358 = cljs.core.next(vals);
      tcoll = G__9356;
      val = G__9357;
      vals = G__9358;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq9347) {
  var G__9348 = cljs.core.first(seq9347);
  var seq9347__$1 = cljs.core.next(seq9347);
  var G__9349 = cljs.core.first(seq9347__$1);
  var seq9347__$2 = cljs.core.next(seq9347__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9348, G__9349, seq9347__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a7152 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a7152);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a7152) : f.call(null, a7152);
      }
    } else {
      var b7153 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a7152, b7153);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a7152, b7153) : f.call(null, a7152, b7153);
        }
      } else {
        var c7154 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a7152, b7153, c7154);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a7152, b7153, c7154) : f.call(null, a7152, b7153, c7154);
          }
        } else {
          var d7155 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a7152, b7153, c7154, d7155);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a7152, b7153, c7154, d7155) : f.call(null, a7152, b7153, c7154, d7155);
            }
          } else {
            var e7156 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a7152, b7153, c7154, d7155, e7156);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a7152, b7153, c7154, d7155, e7156) : f.call(null, a7152, b7153, c7154, d7155, e7156);
              }
            } else {
              var f7157 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a7152, b7153, c7154, d7155, e7156, f7157);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a7152, b7153, c7154, d7155, e7156, f7157) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157);
                }
              } else {
                var g7158 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a7152, b7153, c7154, d7155, e7156, f7157, g7158);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a7152, b7153, c7154, d7155, e7156, f7157, g7158) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158);
                  }
                } else {
                  var h7159 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159);
                    }
                  } else {
                    var i7160 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160);
                      }
                    } else {
                      var j7161 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161);
                        }
                      } else {
                        var k7162 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162);
                          }
                        } else {
                          var l7163 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163);
                            }
                          } else {
                            var m7164 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164);
                              }
                            } else {
                              var n7165 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165);
                                }
                              } else {
                                var o7166 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166);
                                  }
                                } else {
                                  var p7167 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167);
                                    }
                                  } else {
                                    var q7168 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168);
                                      }
                                    } else {
                                      var r7169 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169);
                                        }
                                      } else {
                                        var s7170 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170);
                                          }
                                        } else {
                                          var t7171 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170, t7171);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170, t7171) : f.call(null, a7152, b7153, c7154, d7155, e7156, f7157, g7158, h7159, i7160, j7161, k7162, l7163, m7164, n7165, o7166, p7167, q7168, r7169, s7170, t7171);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args9359 = [];
  var len__7263__auto___9368 = arguments.length;
  var i__7264__auto___9369 = 0;
  while (true) {
    if (i__7264__auto___9369 < len__7263__auto___9368) {
      args9359.push(arguments[i__7264__auto___9369]);
      var G__9370 = i__7264__auto___9369 + 1;
      i__7264__auto___9369 = G__9370;
      continue;
    } else {
    }
    break;
  }
  var G__9367 = args9359.length;
  switch(G__9367) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9359.slice(5), 0, null);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__7282__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq9360) {
  var G__9361 = cljs.core.first(seq9360);
  var seq9360__$1 = cljs.core.next(seq9360);
  var G__9362 = cljs.core.first(seq9360__$1);
  var seq9360__$2 = cljs.core.next(seq9360__$1);
  var G__9363 = cljs.core.first(seq9360__$2);
  var seq9360__$3 = cljs.core.next(seq9360__$2);
  var G__9364 = cljs.core.first(seq9360__$3);
  var seq9360__$4 = cljs.core.next(seq9360__$3);
  var G__9365 = cljs.core.first(seq9360__$4);
  var seq9360__$5 = cljs.core.next(seq9360__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__9361, G__9362, G__9363, G__9364, G__9365, seq9360__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args9372 = [];
  var len__7263__auto___9397 = arguments.length;
  var i__7264__auto___9398 = 0;
  while (true) {
    if (i__7264__auto___9398 < len__7263__auto___9397) {
      args9372.push(arguments[i__7264__auto___9398]);
      var G__9399 = i__7264__auto___9398 + 1;
      i__7264__auto___9398 = G__9399;
      continue;
    } else {
    }
    break;
  }
  var G__9381 = args9372.length;
  switch(G__9381) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9372.slice(6), 0, null);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7282__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__9382 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9382) : f.call(null, G__9382);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__9383 = cljs.core.meta(obj);
    var G__9384 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9383, G__9384) : f.call(null, G__9383, G__9384);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__9385 = cljs.core.meta(obj);
    var G__9386 = a;
    var G__9387 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9385, G__9386, G__9387) : f.call(null, G__9385, G__9386, G__9387);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__9388 = cljs.core.meta(obj);
    var G__9389 = a;
    var G__9390 = b;
    var G__9391 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9388, G__9389, G__9390, G__9391) : f.call(null, G__9388, G__9389, G__9390, G__9391);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__9392 = cljs.core.meta(obj);
    var G__9393 = a;
    var G__9394 = b;
    var G__9395 = c;
    var G__9396 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__9392, G__9393, G__9394, G__9395, G__9396) : f.call(null, G__9392, G__9393, G__9394, G__9395, G__9396);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq9373) {
  var G__9374 = cljs.core.first(seq9373);
  var seq9373__$1 = cljs.core.next(seq9373);
  var G__9375 = cljs.core.first(seq9373__$1);
  var seq9373__$2 = cljs.core.next(seq9373__$1);
  var G__9376 = cljs.core.first(seq9373__$2);
  var seq9373__$3 = cljs.core.next(seq9373__$2);
  var G__9377 = cljs.core.first(seq9373__$3);
  var seq9373__$4 = cljs.core.next(seq9373__$3);
  var G__9378 = cljs.core.first(seq9373__$4);
  var seq9373__$5 = cljs.core.next(seq9373__$4);
  var G__9379 = cljs.core.first(seq9373__$5);
  var seq9373__$6 = cljs.core.next(seq9373__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__9374, G__9375, G__9376, G__9377, G__9378, G__9379, seq9373__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args9401 = [];
  var len__7263__auto___9407 = arguments.length;
  var i__7264__auto___9408 = 0;
  while (true) {
    if (i__7264__auto___9408 < len__7263__auto___9407) {
      args9401.push(arguments[i__7264__auto___9408]);
      var G__9409 = i__7264__auto___9408 + 1;
      i__7264__auto___9408 = G__9409;
      continue;
    } else {
    }
    break;
  }
  var G__9406 = args9401.length;
  switch(G__9406) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9401.slice(2), 0, null);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq9402) {
  var G__9403 = cljs.core.first(seq9402);
  var seq9402__$1 = cljs.core.next(seq9402);
  var G__9404 = cljs.core.first(seq9402__$1);
  var seq9402__$2 = cljs.core.next(seq9402__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__9403, G__9404, seq9402__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core9414 !== "undefined") {
  } else {
    cljs.core.t_cljs$core9414 = function(nil_iter, meta9415) {
      this.nil_iter = nil_iter;
      this.meta9415 = meta9415;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core9414.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9416, meta9415__$1) {
      var self__ = this;
      var _9416__$1 = this;
      return new cljs.core.t_cljs$core9414(self__.nil_iter, meta9415__$1);
    };
    cljs.core.t_cljs$core9414.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9416) {
      var self__ = this;
      var _9416__$1 = this;
      return self__.meta9415;
    };
    cljs.core.t_cljs$core9414.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core9414.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core9414.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core9414.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta9415", "meta9415", 369517651, null)], 
      null);
    };
    cljs.core.t_cljs$core9414.cljs$lang$type = true;
    cljs.core.t_cljs$core9414.cljs$lang$ctorStr = "cljs.core/t_cljs$core9414";
    cljs.core.t_cljs$core9414.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write(writer__6800__auto__, "cljs.core/t_cljs$core9414");
    };
    cljs.core.__GT_t_cljs$core9414 = function cljs$core$nil_iter_$___GT_t_cljs$core9414(nil_iter__$1, meta9415) {
      return new cljs.core.t_cljs$core9414(nil_iter__$1, meta9415);
    };
  }
  return new cljs.core.t_cljs$core9414(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = !(lt.stepper == null);
      if (and__6181__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__6181__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__9417 = lt;
        var G__9418 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__9417, G__9418) : self__.xform.call(null, G__9417, G__9418);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__9419 = cljs.core.next(iters__$1);
        iters__$1 = G__9419;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__7108__auto___9420 = self__.iters.length;
  var i_9421 = 0;
  while (true) {
    if (i_9421 < n__7108__auto___9420) {
      self__.nexts[i_9421] = self__.iters[i_9421].next();
      var G__9422 = i_9421 + 1;
      i_9421 = G__9422;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = !(lt.stepper == null);
      if (and__6181__auto__) {
        return this$.hasNext();
      } else {
        return and__6181__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args9423 = [];
  var len__7263__auto___9426 = arguments.length;
  var i__7264__auto___9427 = 0;
  while (true) {
    if (i__7264__auto___9427 < len__7263__auto___9426) {
      args9423.push(arguments[i__7264__auto___9427]);
      var G__9428 = i__7264__auto___9427 + 1;
      i__7264__auto___9427 = G__9428;
      continue;
    } else {
    }
    break;
  }
  var G__9425 = args9423.length;
  switch(G__9425) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9423.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31850700;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.indexOf = function() {
  var G__9430 = null;
  var G__9430__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9430__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9430 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9430__1.call(this, x);
      case 2:
        return G__9430__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9430.cljs$core$IFn$_invoke$arity$1 = G__9430__1;
  G__9430.cljs$core$IFn$_invoke$arity$2 = G__9430__2;
  return G__9430;
}();
cljs.core.LazyTransformer.prototype.lastIndexOf = function() {
  var G__9431 = null;
  var G__9431__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__9431__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9431 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9431__1.call(this, x);
      case 2:
        return G__9431__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9431.cljs$core$IFn$_invoke$arity$1 = G__9431__1;
  G__9431.cljs$core$IFn$_invoke$arity$2 = G__9431__2;
  return G__9431;
}();
cljs.core.LazyTransformer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__9432_9436 = cljs.core.seq(colls);
  var chunk__9433_9437 = null;
  var count__9434_9438 = 0;
  var i__9435_9439 = 0;
  while (true) {
    if (i__9435_9439 < count__9434_9438) {
      var coll_9440 = chunk__9433_9437.cljs$core$IIndexed$_nth$arity$2(null, i__9435_9439);
      iters.push(cljs.core.iter(coll_9440));
      var G__9441 = seq__9432_9436;
      var G__9442 = chunk__9433_9437;
      var G__9443 = count__9434_9438;
      var G__9444 = i__9435_9439 + 1;
      seq__9432_9436 = G__9441;
      chunk__9433_9437 = G__9442;
      count__9434_9438 = G__9443;
      i__9435_9439 = G__9444;
      continue;
    } else {
      var temp__4425__auto___9445 = cljs.core.seq(seq__9432_9436);
      if (temp__4425__auto___9445) {
        var seq__9432_9446__$1 = temp__4425__auto___9445;
        if (cljs.core.chunked_seq_QMARK_(seq__9432_9446__$1)) {
          var c__7004__auto___9447 = cljs.core.chunk_first(seq__9432_9446__$1);
          var G__9448 = cljs.core.chunk_rest(seq__9432_9446__$1);
          var G__9449 = c__7004__auto___9447;
          var G__9450 = cljs.core.count(c__7004__auto___9447);
          var G__9451 = 0;
          seq__9432_9436 = G__9448;
          chunk__9433_9437 = G__9449;
          count__9434_9438 = G__9450;
          i__9435_9439 = G__9451;
          continue;
        } else {
          var coll_9452 = cljs.core.first(seq__9432_9446__$1);
          iters.push(cljs.core.iter(coll_9452));
          var G__9453 = cljs.core.next(seq__9432_9446__$1);
          var G__9454 = null;
          var G__9455 = 0;
          var G__9456 = 0;
          seq__9432_9436 = G__9453;
          chunk__9433_9437 = G__9454;
          count__9434_9438 = G__9455;
          i__9435_9439 = G__9456;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args9457 = [];
  var len__7263__auto___9463 = arguments.length;
  var i__7264__auto___9464 = 0;
  while (true) {
    if (i__7264__auto___9464 < len__7263__auto___9463) {
      args9457.push(arguments[i__7264__auto___9464]);
      var G__9465 = i__7264__auto___9464 + 1;
      i__7264__auto___9464 = G__9465;
      continue;
    } else {
    }
    break;
  }
  var G__9462 = args9457.length;
  switch(G__9462) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9457.slice(2), 0, null);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__6193__auto__ = cljs.core.seq(coll);
    if (or__6193__auto__) {
      return or__6193__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq9458) {
  var G__9459 = cljs.core.first(seq9458);
  var seq9458__$1 = cljs.core.next(seq9458);
  var G__9460 = cljs.core.first(seq9458__$1);
  var seq9458__$2 = cljs.core.next(seq9458__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__9459, G__9460, seq9458__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__9468 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9468) : pred.call(null, G__9468);
      }())) {
        var G__9469 = pred;
        var G__9470 = cljs.core.next(coll);
        pred = G__9469;
        coll = G__9470;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__6193__auto__ = function() {
        var G__9474 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9474) : pred.call(null, G__9474);
      }();
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var G__9475 = pred;
        var G__9476 = cljs.core.next(coll);
        pred = G__9475;
        coll = G__9476;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__9477 = null;
    var G__9477__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__9477__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__9477__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__9477__3 = function() {
      var G__9478__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__9478 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__9479__i = 0, G__9479__a = new Array(arguments.length - 2);
          while (G__9479__i < G__9479__a.length) {
            G__9479__a[G__9479__i] = arguments[G__9479__i + 2];
            ++G__9479__i;
          }
          zs = new cljs.core.IndexedSeq(G__9479__a, 0);
        }
        return G__9478__delegate.call(this, x, y, zs);
      };
      G__9478.cljs$lang$maxFixedArity = 2;
      G__9478.cljs$lang$applyTo = function(arglist__9480) {
        var x = cljs.core.first(arglist__9480);
        arglist__9480 = cljs.core.next(arglist__9480);
        var y = cljs.core.first(arglist__9480);
        var zs = cljs.core.rest(arglist__9480);
        return G__9478__delegate(x, y, zs);
      };
      G__9478.cljs$core$IFn$_invoke$arity$variadic = G__9478__delegate;
      return G__9478;
    }();
    G__9477 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__9477__0.call(this);
        case 1:
          return G__9477__1.call(this, x);
        case 2:
          return G__9477__2.call(this, x, y);
        default:
          var G__9481 = null;
          if (arguments.length > 2) {
            var G__9482__i = 0, G__9482__a = new Array(arguments.length - 2);
            while (G__9482__i < G__9482__a.length) {
              G__9482__a[G__9482__i] = arguments[G__9482__i + 2];
              ++G__9482__i;
            }
            G__9481 = new cljs.core.IndexedSeq(G__9482__a, 0);
          }
          return G__9477__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__9481);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9477.cljs$lang$maxFixedArity = 2;
    G__9477.cljs$lang$applyTo = G__9477__3.cljs$lang$applyTo;
    G__9477.cljs$core$IFn$_invoke$arity$0 = G__9477__0;
    G__9477.cljs$core$IFn$_invoke$arity$1 = G__9477__1;
    G__9477.cljs$core$IFn$_invoke$arity$2 = G__9477__2;
    G__9477.cljs$core$IFn$_invoke$arity$variadic = G__9477__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__9477;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__9483__delegate = function(args) {
      return x;
    };
    var G__9483 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9484__i = 0, G__9484__a = new Array(arguments.length - 0);
        while (G__9484__i < G__9484__a.length) {
          G__9484__a[G__9484__i] = arguments[G__9484__i + 0];
          ++G__9484__i;
        }
        args = new cljs.core.IndexedSeq(G__9484__a, 0);
      }
      return G__9483__delegate.call(this, args);
    };
    G__9483.cljs$lang$maxFixedArity = 0;
    G__9483.cljs$lang$applyTo = function(arglist__9485) {
      var args = cljs.core.seq(arglist__9485);
      return G__9483__delegate(args);
    };
    G__9483.cljs$core$IFn$_invoke$arity$variadic = G__9483__delegate;
    return G__9483;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args9486 = [];
  var len__7263__auto___9513 = arguments.length;
  var i__7264__auto___9514 = 0;
  while (true) {
    if (i__7264__auto___9514 < len__7263__auto___9513) {
      args9486.push(arguments[i__7264__auto___9514]);
      var G__9515 = i__7264__auto___9514 + 1;
      i__7264__auto___9514 = G__9515;
      continue;
    } else {
    }
    break;
  }
  var G__9492 = args9486.length;
  switch(G__9492) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9486.slice(3), 0, null);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__9517 = null;
    var G__9517__0 = function() {
      var G__9493 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9493) : f.call(null, G__9493);
    };
    var G__9517__1 = function(x) {
      var G__9494 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9494) : f.call(null, G__9494);
    };
    var G__9517__2 = function(x, y) {
      var G__9495 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9495) : f.call(null, G__9495);
    };
    var G__9517__3 = function(x, y, z) {
      var G__9496 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9496) : f.call(null, G__9496);
    };
    var G__9517__4 = function() {
      var G__9518__delegate = function(x, y, z, args) {
        var G__9497 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9497) : f.call(null, G__9497);
      };
      var G__9518 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9519__i = 0, G__9519__a = new Array(arguments.length - 3);
          while (G__9519__i < G__9519__a.length) {
            G__9519__a[G__9519__i] = arguments[G__9519__i + 3];
            ++G__9519__i;
          }
          args = new cljs.core.IndexedSeq(G__9519__a, 0);
        }
        return G__9518__delegate.call(this, x, y, z, args);
      };
      G__9518.cljs$lang$maxFixedArity = 3;
      G__9518.cljs$lang$applyTo = function(arglist__9520) {
        var x = cljs.core.first(arglist__9520);
        arglist__9520 = cljs.core.next(arglist__9520);
        var y = cljs.core.first(arglist__9520);
        arglist__9520 = cljs.core.next(arglist__9520);
        var z = cljs.core.first(arglist__9520);
        var args = cljs.core.rest(arglist__9520);
        return G__9518__delegate(x, y, z, args);
      };
      G__9518.cljs$core$IFn$_invoke$arity$variadic = G__9518__delegate;
      return G__9518;
    }();
    G__9517 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9517__0.call(this);
        case 1:
          return G__9517__1.call(this, x);
        case 2:
          return G__9517__2.call(this, x, y);
        case 3:
          return G__9517__3.call(this, x, y, z);
        default:
          var G__9521 = null;
          if (arguments.length > 3) {
            var G__9522__i = 0, G__9522__a = new Array(arguments.length - 3);
            while (G__9522__i < G__9522__a.length) {
              G__9522__a[G__9522__i] = arguments[G__9522__i + 3];
              ++G__9522__i;
            }
            G__9521 = new cljs.core.IndexedSeq(G__9522__a, 0);
          }
          return G__9517__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9521);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9517.cljs$lang$maxFixedArity = 3;
    G__9517.cljs$lang$applyTo = G__9517__4.cljs$lang$applyTo;
    G__9517.cljs$core$IFn$_invoke$arity$0 = G__9517__0;
    G__9517.cljs$core$IFn$_invoke$arity$1 = G__9517__1;
    G__9517.cljs$core$IFn$_invoke$arity$2 = G__9517__2;
    G__9517.cljs$core$IFn$_invoke$arity$3 = G__9517__3;
    G__9517.cljs$core$IFn$_invoke$arity$variadic = G__9517__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9517;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__9523 = null;
    var G__9523__0 = function() {
      var G__9499 = function() {
        var G__9500 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9500) : g.call(null, G__9500);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9499) : f.call(null, G__9499);
    };
    var G__9523__1 = function(x) {
      var G__9502 = function() {
        var G__9503 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9503) : g.call(null, G__9503);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9502) : f.call(null, G__9502);
    };
    var G__9523__2 = function(x, y) {
      var G__9505 = function() {
        var G__9506 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9506) : g.call(null, G__9506);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9505) : f.call(null, G__9505);
    };
    var G__9523__3 = function(x, y, z) {
      var G__9508 = function() {
        var G__9509 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9509) : g.call(null, G__9509);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9508) : f.call(null, G__9508);
    };
    var G__9523__4 = function() {
      var G__9524__delegate = function(x, y, z, args) {
        var G__9511 = function() {
          var G__9512 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9512) : g.call(null, G__9512);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9511) : f.call(null, G__9511);
      };
      var G__9524 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9525__i = 0, G__9525__a = new Array(arguments.length - 3);
          while (G__9525__i < G__9525__a.length) {
            G__9525__a[G__9525__i] = arguments[G__9525__i + 3];
            ++G__9525__i;
          }
          args = new cljs.core.IndexedSeq(G__9525__a, 0);
        }
        return G__9524__delegate.call(this, x, y, z, args);
      };
      G__9524.cljs$lang$maxFixedArity = 3;
      G__9524.cljs$lang$applyTo = function(arglist__9526) {
        var x = cljs.core.first(arglist__9526);
        arglist__9526 = cljs.core.next(arglist__9526);
        var y = cljs.core.first(arglist__9526);
        arglist__9526 = cljs.core.next(arglist__9526);
        var z = cljs.core.first(arglist__9526);
        var args = cljs.core.rest(arglist__9526);
        return G__9524__delegate(x, y, z, args);
      };
      G__9524.cljs$core$IFn$_invoke$arity$variadic = G__9524__delegate;
      return G__9524;
    }();
    G__9523 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9523__0.call(this);
        case 1:
          return G__9523__1.call(this, x);
        case 2:
          return G__9523__2.call(this, x, y);
        case 3:
          return G__9523__3.call(this, x, y, z);
        default:
          var G__9527 = null;
          if (arguments.length > 3) {
            var G__9528__i = 0, G__9528__a = new Array(arguments.length - 3);
            while (G__9528__i < G__9528__a.length) {
              G__9528__a[G__9528__i] = arguments[G__9528__i + 3];
              ++G__9528__i;
            }
            G__9527 = new cljs.core.IndexedSeq(G__9528__a, 0);
          }
          return G__9523__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9527);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9523.cljs$lang$maxFixedArity = 3;
    G__9523.cljs$lang$applyTo = G__9523__4.cljs$lang$applyTo;
    G__9523.cljs$core$IFn$_invoke$arity$0 = G__9523__0;
    G__9523.cljs$core$IFn$_invoke$arity$1 = G__9523__1;
    G__9523.cljs$core$IFn$_invoke$arity$2 = G__9523__2;
    G__9523.cljs$core$IFn$_invoke$arity$3 = G__9523__3;
    G__9523.cljs$core$IFn$_invoke$arity$variadic = G__9523__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9523;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__9529__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__9530 = cljs.core.first(fs__$2).call(null, ret);
            var G__9531 = cljs.core.next(fs__$2);
            ret = G__9530;
            fs__$2 = G__9531;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__9529 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__9532__i = 0, G__9532__a = new Array(arguments.length - 0);
          while (G__9532__i < G__9532__a.length) {
            G__9532__a[G__9532__i] = arguments[G__9532__i + 0];
            ++G__9532__i;
          }
          args = new cljs.core.IndexedSeq(G__9532__a, 0);
        }
        return G__9529__delegate.call(this, args);
      };
      G__9529.cljs$lang$maxFixedArity = 0;
      G__9529.cljs$lang$applyTo = function(arglist__9533) {
        var args = cljs.core.seq(arglist__9533);
        return G__9529__delegate(args);
      };
      G__9529.cljs$core$IFn$_invoke$arity$variadic = G__9529__delegate;
      return G__9529;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq9487) {
  var G__9488 = cljs.core.first(seq9487);
  var seq9487__$1 = cljs.core.next(seq9487);
  var G__9489 = cljs.core.first(seq9487__$1);
  var seq9487__$2 = cljs.core.next(seq9487__$1);
  var G__9490 = cljs.core.first(seq9487__$2);
  var seq9487__$3 = cljs.core.next(seq9487__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__9488, G__9489, G__9490, seq9487__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args9534 = [];
  var len__7263__auto___9542 = arguments.length;
  var i__7264__auto___9543 = 0;
  while (true) {
    if (i__7264__auto___9543 < len__7263__auto___9542) {
      args9534.push(arguments[i__7264__auto___9543]);
      var G__9544 = i__7264__auto___9543 + 1;
      i__7264__auto___9543 = G__9544;
      continue;
    } else {
    }
    break;
  }
  var G__9541 = args9534.length;
  switch(G__9541) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9534.slice(4), 0, null);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7282__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__9546 = null;
    var G__9546__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__9546__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__9546__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__9546__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__9546__4 = function() {
      var G__9547__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__9547 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9548__i = 0, G__9548__a = new Array(arguments.length - 3);
          while (G__9548__i < G__9548__a.length) {
            G__9548__a[G__9548__i] = arguments[G__9548__i + 3];
            ++G__9548__i;
          }
          args = new cljs.core.IndexedSeq(G__9548__a, 0);
        }
        return G__9547__delegate.call(this, x, y, z, args);
      };
      G__9547.cljs$lang$maxFixedArity = 3;
      G__9547.cljs$lang$applyTo = function(arglist__9549) {
        var x = cljs.core.first(arglist__9549);
        arglist__9549 = cljs.core.next(arglist__9549);
        var y = cljs.core.first(arglist__9549);
        arglist__9549 = cljs.core.next(arglist__9549);
        var z = cljs.core.first(arglist__9549);
        var args = cljs.core.rest(arglist__9549);
        return G__9547__delegate(x, y, z, args);
      };
      G__9547.cljs$core$IFn$_invoke$arity$variadic = G__9547__delegate;
      return G__9547;
    }();
    G__9546 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9546__0.call(this);
        case 1:
          return G__9546__1.call(this, x);
        case 2:
          return G__9546__2.call(this, x, y);
        case 3:
          return G__9546__3.call(this, x, y, z);
        default:
          var G__9550 = null;
          if (arguments.length > 3) {
            var G__9551__i = 0, G__9551__a = new Array(arguments.length - 3);
            while (G__9551__i < G__9551__a.length) {
              G__9551__a[G__9551__i] = arguments[G__9551__i + 3];
              ++G__9551__i;
            }
            G__9550 = new cljs.core.IndexedSeq(G__9551__a, 0);
          }
          return G__9546__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9550);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9546.cljs$lang$maxFixedArity = 3;
    G__9546.cljs$lang$applyTo = G__9546__4.cljs$lang$applyTo;
    G__9546.cljs$core$IFn$_invoke$arity$0 = G__9546__0;
    G__9546.cljs$core$IFn$_invoke$arity$1 = G__9546__1;
    G__9546.cljs$core$IFn$_invoke$arity$2 = G__9546__2;
    G__9546.cljs$core$IFn$_invoke$arity$3 = G__9546__3;
    G__9546.cljs$core$IFn$_invoke$arity$variadic = G__9546__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9546;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__9552 = null;
    var G__9552__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__9552__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__9552__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__9552__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__9552__4 = function() {
      var G__9553__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__9553 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9554__i = 0, G__9554__a = new Array(arguments.length - 3);
          while (G__9554__i < G__9554__a.length) {
            G__9554__a[G__9554__i] = arguments[G__9554__i + 3];
            ++G__9554__i;
          }
          args = new cljs.core.IndexedSeq(G__9554__a, 0);
        }
        return G__9553__delegate.call(this, x, y, z, args);
      };
      G__9553.cljs$lang$maxFixedArity = 3;
      G__9553.cljs$lang$applyTo = function(arglist__9555) {
        var x = cljs.core.first(arglist__9555);
        arglist__9555 = cljs.core.next(arglist__9555);
        var y = cljs.core.first(arglist__9555);
        arglist__9555 = cljs.core.next(arglist__9555);
        var z = cljs.core.first(arglist__9555);
        var args = cljs.core.rest(arglist__9555);
        return G__9553__delegate(x, y, z, args);
      };
      G__9553.cljs$core$IFn$_invoke$arity$variadic = G__9553__delegate;
      return G__9553;
    }();
    G__9552 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9552__0.call(this);
        case 1:
          return G__9552__1.call(this, x);
        case 2:
          return G__9552__2.call(this, x, y);
        case 3:
          return G__9552__3.call(this, x, y, z);
        default:
          var G__9556 = null;
          if (arguments.length > 3) {
            var G__9557__i = 0, G__9557__a = new Array(arguments.length - 3);
            while (G__9557__i < G__9557__a.length) {
              G__9557__a[G__9557__i] = arguments[G__9557__i + 3];
              ++G__9557__i;
            }
            G__9556 = new cljs.core.IndexedSeq(G__9557__a, 0);
          }
          return G__9552__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9556);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9552.cljs$lang$maxFixedArity = 3;
    G__9552.cljs$lang$applyTo = G__9552__4.cljs$lang$applyTo;
    G__9552.cljs$core$IFn$_invoke$arity$0 = G__9552__0;
    G__9552.cljs$core$IFn$_invoke$arity$1 = G__9552__1;
    G__9552.cljs$core$IFn$_invoke$arity$2 = G__9552__2;
    G__9552.cljs$core$IFn$_invoke$arity$3 = G__9552__3;
    G__9552.cljs$core$IFn$_invoke$arity$variadic = G__9552__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9552;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__9558 = null;
    var G__9558__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__9558__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__9558__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__9558__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__9558__4 = function() {
      var G__9559__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__9559 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9560__i = 0, G__9560__a = new Array(arguments.length - 3);
          while (G__9560__i < G__9560__a.length) {
            G__9560__a[G__9560__i] = arguments[G__9560__i + 3];
            ++G__9560__i;
          }
          args = new cljs.core.IndexedSeq(G__9560__a, 0);
        }
        return G__9559__delegate.call(this, x, y, z, args);
      };
      G__9559.cljs$lang$maxFixedArity = 3;
      G__9559.cljs$lang$applyTo = function(arglist__9561) {
        var x = cljs.core.first(arglist__9561);
        arglist__9561 = cljs.core.next(arglist__9561);
        var y = cljs.core.first(arglist__9561);
        arglist__9561 = cljs.core.next(arglist__9561);
        var z = cljs.core.first(arglist__9561);
        var args = cljs.core.rest(arglist__9561);
        return G__9559__delegate(x, y, z, args);
      };
      G__9559.cljs$core$IFn$_invoke$arity$variadic = G__9559__delegate;
      return G__9559;
    }();
    G__9558 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9558__0.call(this);
        case 1:
          return G__9558__1.call(this, x);
        case 2:
          return G__9558__2.call(this, x, y);
        case 3:
          return G__9558__3.call(this, x, y, z);
        default:
          var G__9562 = null;
          if (arguments.length > 3) {
            var G__9563__i = 0, G__9563__a = new Array(arguments.length - 3);
            while (G__9563__i < G__9563__a.length) {
              G__9563__a[G__9563__i] = arguments[G__9563__i + 3];
              ++G__9563__i;
            }
            G__9562 = new cljs.core.IndexedSeq(G__9563__a, 0);
          }
          return G__9558__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9562);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9558.cljs$lang$maxFixedArity = 3;
    G__9558.cljs$lang$applyTo = G__9558__4.cljs$lang$applyTo;
    G__9558.cljs$core$IFn$_invoke$arity$0 = G__9558__0;
    G__9558.cljs$core$IFn$_invoke$arity$1 = G__9558__1;
    G__9558.cljs$core$IFn$_invoke$arity$2 = G__9558__2;
    G__9558.cljs$core$IFn$_invoke$arity$3 = G__9558__3;
    G__9558.cljs$core$IFn$_invoke$arity$variadic = G__9558__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9558;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__9564__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__9564 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9565__i = 0, G__9565__a = new Array(arguments.length - 0);
        while (G__9565__i < G__9565__a.length) {
          G__9565__a[G__9565__i] = arguments[G__9565__i + 0];
          ++G__9565__i;
        }
        args = new cljs.core.IndexedSeq(G__9565__a, 0);
      }
      return G__9564__delegate.call(this, args);
    };
    G__9564.cljs$lang$maxFixedArity = 0;
    G__9564.cljs$lang$applyTo = function(arglist__9566) {
      var args = cljs.core.seq(arglist__9566);
      return G__9564__delegate(args);
    };
    G__9564.cljs$core$IFn$_invoke$arity$variadic = G__9564__delegate;
    return G__9564;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq9535) {
  var G__9536 = cljs.core.first(seq9535);
  var seq9535__$1 = cljs.core.next(seq9535);
  var G__9537 = cljs.core.first(seq9535__$1);
  var seq9535__$2 = cljs.core.next(seq9535__$1);
  var G__9538 = cljs.core.first(seq9535__$2);
  var seq9535__$3 = cljs.core.next(seq9535__$2);
  var G__9539 = cljs.core.first(seq9535__$3);
  var seq9535__$4 = cljs.core.next(seq9535__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__9536, G__9537, G__9538, G__9539, seq9535__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args9567 = [];
  var len__7263__auto___9586 = arguments.length;
  var i__7264__auto___9587 = 0;
  while (true) {
    if (i__7264__auto___9587 < len__7263__auto___9586) {
      args9567.push(arguments[i__7264__auto___9587]);
      var G__9588 = i__7264__auto___9587 + 1;
      i__7264__auto___9587 = G__9588;
      continue;
    } else {
    }
    break;
  }
  var G__9569 = args9567.length;
  switch(G__9569) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9567.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__9590 = null;
    var G__9590__1 = function(a) {
      var G__9570 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9570) : f.call(null, G__9570);
    };
    var G__9590__2 = function(a, b) {
      var G__9571 = a == null ? x : a;
      var G__9572 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9571, G__9572) : f.call(null, G__9571, G__9572);
    };
    var G__9590__3 = function(a, b, c) {
      var G__9573 = a == null ? x : a;
      var G__9574 = b;
      var G__9575 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9573, G__9574, G__9575) : f.call(null, G__9573, G__9574, G__9575);
    };
    var G__9590__4 = function() {
      var G__9591__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__9591 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9592__i = 0, G__9592__a = new Array(arguments.length - 3);
          while (G__9592__i < G__9592__a.length) {
            G__9592__a[G__9592__i] = arguments[G__9592__i + 3];
            ++G__9592__i;
          }
          ds = new cljs.core.IndexedSeq(G__9592__a, 0);
        }
        return G__9591__delegate.call(this, a, b, c, ds);
      };
      G__9591.cljs$lang$maxFixedArity = 3;
      G__9591.cljs$lang$applyTo = function(arglist__9593) {
        var a = cljs.core.first(arglist__9593);
        arglist__9593 = cljs.core.next(arglist__9593);
        var b = cljs.core.first(arglist__9593);
        arglist__9593 = cljs.core.next(arglist__9593);
        var c = cljs.core.first(arglist__9593);
        var ds = cljs.core.rest(arglist__9593);
        return G__9591__delegate(a, b, c, ds);
      };
      G__9591.cljs$core$IFn$_invoke$arity$variadic = G__9591__delegate;
      return G__9591;
    }();
    G__9590 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__9590__1.call(this, a);
        case 2:
          return G__9590__2.call(this, a, b);
        case 3:
          return G__9590__3.call(this, a, b, c);
        default:
          var G__9594 = null;
          if (arguments.length > 3) {
            var G__9595__i = 0, G__9595__a = new Array(arguments.length - 3);
            while (G__9595__i < G__9595__a.length) {
              G__9595__a[G__9595__i] = arguments[G__9595__i + 3];
              ++G__9595__i;
            }
            G__9594 = new cljs.core.IndexedSeq(G__9595__a, 0);
          }
          return G__9590__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9594);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9590.cljs$lang$maxFixedArity = 3;
    G__9590.cljs$lang$applyTo = G__9590__4.cljs$lang$applyTo;
    G__9590.cljs$core$IFn$_invoke$arity$1 = G__9590__1;
    G__9590.cljs$core$IFn$_invoke$arity$2 = G__9590__2;
    G__9590.cljs$core$IFn$_invoke$arity$3 = G__9590__3;
    G__9590.cljs$core$IFn$_invoke$arity$variadic = G__9590__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9590;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__9596 = null;
    var G__9596__2 = function(a, b) {
      var G__9576 = a == null ? x : a;
      var G__9577 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9576, G__9577) : f.call(null, G__9576, G__9577);
    };
    var G__9596__3 = function(a, b, c) {
      var G__9578 = a == null ? x : a;
      var G__9579 = b == null ? y : b;
      var G__9580 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9578, G__9579, G__9580) : f.call(null, G__9578, G__9579, G__9580);
    };
    var G__9596__4 = function() {
      var G__9597__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__9597 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9598__i = 0, G__9598__a = new Array(arguments.length - 3);
          while (G__9598__i < G__9598__a.length) {
            G__9598__a[G__9598__i] = arguments[G__9598__i + 3];
            ++G__9598__i;
          }
          ds = new cljs.core.IndexedSeq(G__9598__a, 0);
        }
        return G__9597__delegate.call(this, a, b, c, ds);
      };
      G__9597.cljs$lang$maxFixedArity = 3;
      G__9597.cljs$lang$applyTo = function(arglist__9599) {
        var a = cljs.core.first(arglist__9599);
        arglist__9599 = cljs.core.next(arglist__9599);
        var b = cljs.core.first(arglist__9599);
        arglist__9599 = cljs.core.next(arglist__9599);
        var c = cljs.core.first(arglist__9599);
        var ds = cljs.core.rest(arglist__9599);
        return G__9597__delegate(a, b, c, ds);
      };
      G__9597.cljs$core$IFn$_invoke$arity$variadic = G__9597__delegate;
      return G__9597;
    }();
    G__9596 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9596__2.call(this, a, b);
        case 3:
          return G__9596__3.call(this, a, b, c);
        default:
          var G__9600 = null;
          if (arguments.length > 3) {
            var G__9601__i = 0, G__9601__a = new Array(arguments.length - 3);
            while (G__9601__i < G__9601__a.length) {
              G__9601__a[G__9601__i] = arguments[G__9601__i + 3];
              ++G__9601__i;
            }
            G__9600 = new cljs.core.IndexedSeq(G__9601__a, 0);
          }
          return G__9596__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9600);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9596.cljs$lang$maxFixedArity = 3;
    G__9596.cljs$lang$applyTo = G__9596__4.cljs$lang$applyTo;
    G__9596.cljs$core$IFn$_invoke$arity$2 = G__9596__2;
    G__9596.cljs$core$IFn$_invoke$arity$3 = G__9596__3;
    G__9596.cljs$core$IFn$_invoke$arity$variadic = G__9596__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9596;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__9602 = null;
    var G__9602__2 = function(a, b) {
      var G__9581 = a == null ? x : a;
      var G__9582 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9581, G__9582) : f.call(null, G__9581, G__9582);
    };
    var G__9602__3 = function(a, b, c) {
      var G__9583 = a == null ? x : a;
      var G__9584 = b == null ? y : b;
      var G__9585 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9583, G__9584, G__9585) : f.call(null, G__9583, G__9584, G__9585);
    };
    var G__9602__4 = function() {
      var G__9603__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__9603 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9604__i = 0, G__9604__a = new Array(arguments.length - 3);
          while (G__9604__i < G__9604__a.length) {
            G__9604__a[G__9604__i] = arguments[G__9604__i + 3];
            ++G__9604__i;
          }
          ds = new cljs.core.IndexedSeq(G__9604__a, 0);
        }
        return G__9603__delegate.call(this, a, b, c, ds);
      };
      G__9603.cljs$lang$maxFixedArity = 3;
      G__9603.cljs$lang$applyTo = function(arglist__9605) {
        var a = cljs.core.first(arglist__9605);
        arglist__9605 = cljs.core.next(arglist__9605);
        var b = cljs.core.first(arglist__9605);
        arglist__9605 = cljs.core.next(arglist__9605);
        var c = cljs.core.first(arglist__9605);
        var ds = cljs.core.rest(arglist__9605);
        return G__9603__delegate(a, b, c, ds);
      };
      G__9603.cljs$core$IFn$_invoke$arity$variadic = G__9603__delegate;
      return G__9603;
    }();
    G__9602 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9602__2.call(this, a, b);
        case 3:
          return G__9602__3.call(this, a, b, c);
        default:
          var G__9606 = null;
          if (arguments.length > 3) {
            var G__9607__i = 0, G__9607__a = new Array(arguments.length - 3);
            while (G__9607__i < G__9607__a.length) {
              G__9607__a[G__9607__i] = arguments[G__9607__i + 3];
              ++G__9607__i;
            }
            G__9606 = new cljs.core.IndexedSeq(G__9607__a, 0);
          }
          return G__9602__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9606);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9602.cljs$lang$maxFixedArity = 3;
    G__9602.cljs$lang$applyTo = G__9602__4.cljs$lang$applyTo;
    G__9602.cljs$core$IFn$_invoke$arity$2 = G__9602__2;
    G__9602.cljs$core$IFn$_invoke$arity$3 = G__9602__3;
    G__9602.cljs$core$IFn$_invoke$arity$variadic = G__9602__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9602;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args9608 = [];
  var len__7263__auto___9641 = arguments.length;
  var i__7264__auto___9642 = 0;
  while (true) {
    if (i__7264__auto___9642 < len__7263__auto___9641) {
      args9608.push(arguments[i__7264__auto___9642]);
      var G__9643 = i__7264__auto___9642 + 1;
      i__7264__auto___9642 = G__9643;
      continue;
    } else {
    }
    break;
  }
  var G__9610 = args9608.length;
  switch(G__9610) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9608.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__9645 = null;
        var G__9645__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9645__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9645__2 = function(result, input) {
          var G__9613 = result;
          var G__9614 = function() {
            var G__9615 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__9616 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9615, G__9616) : f.call(null, G__9615, G__9616);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9613, G__9614) : rf.call(null, G__9613, G__9614);
        };
        G__9645 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9645__0.call(this);
            case 1:
              return G__9645__1.call(this, result);
            case 2:
              return G__9645__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9645.cljs$core$IFn$_invoke$arity$0 = G__9645__0;
        G__9645.cljs$core$IFn$_invoke$arity$1 = G__9645__1;
        G__9645.cljs$core$IFn$_invoke$arity$2 = G__9645__2;
        return G__9645;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__7108__auto___9646 = size;
          var i_9647 = 0;
          while (true) {
            if (i_9647 < n__7108__auto___9646) {
              cljs.core.chunk_append(b, function() {
                var G__9637 = idx + i_9647;
                var G__9638 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9647);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9637, G__9638) : f.call(null, G__9637, G__9638);
              }());
              var G__9648 = i_9647 + 1;
              i_9647 = G__9648;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9639 = idx;
            var G__9640 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9639, G__9640) : f.call(null, G__9639, G__9640);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args9649 = [];
  var len__7263__auto___9654 = arguments.length;
  var i__7264__auto___9655 = 0;
  while (true) {
    if (i__7264__auto___9655 < len__7263__auto___9654) {
      args9649.push(arguments[i__7264__auto___9655]);
      var G__9656 = i__7264__auto___9655 + 1;
      i__7264__auto___9655 = G__9656;
      continue;
    } else {
    }
    break;
  }
  var G__9651 = args9649.length;
  switch(G__9651) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9649.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9658 = null;
      var G__9658__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9658__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9658__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__9658 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9658__0.call(this);
          case 1:
            return G__9658__1.call(this, result);
          case 2:
            return G__9658__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9658.cljs$core$IFn$_invoke$arity$0 = G__9658__0;
      G__9658.cljs$core$IFn$_invoke$arity$1 = G__9658__1;
      G__9658.cljs$core$IFn$_invoke$arity$2 = G__9658__2;
      return G__9658;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7108__auto___9659 = size;
        var i_9660 = 0;
        while (true) {
          if (i_9660 < n__7108__auto___9659) {
            var x_9661 = function() {
              var G__9652 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9660);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9652) : f.call(null, G__9652);
            }();
            if (x_9661 == null) {
            } else {
              cljs.core.chunk_append(b, x_9661);
            }
            var G__9662 = i_9660 + 1;
            i_9660 = G__9662;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__9653 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9653) : f.call(null, G__9653);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__9663 = cljs.core.seq(self__.watches);
  var chunk__9664 = null;
  var count__9665 = 0;
  var i__9666 = 0;
  while (true) {
    if (i__9666 < count__9665) {
      var vec__9667 = chunk__9664.cljs$core$IIndexed$_nth$arity$2(null, i__9666);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9667, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9667, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__9669 = seq__9663;
      var G__9670 = chunk__9664;
      var G__9671 = count__9665;
      var G__9672 = i__9666 + 1;
      seq__9663 = G__9669;
      chunk__9664 = G__9670;
      count__9665 = G__9671;
      i__9666 = G__9672;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9663);
      if (temp__4425__auto__) {
        var seq__9663__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9663__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__9663__$1);
          var G__9673 = cljs.core.chunk_rest(seq__9663__$1);
          var G__9674 = c__7004__auto__;
          var G__9675 = cljs.core.count(c__7004__auto__);
          var G__9676 = 0;
          seq__9663 = G__9673;
          chunk__9664 = G__9674;
          count__9665 = G__9675;
          i__9666 = G__9676;
          continue;
        } else {
          var vec__9668 = cljs.core.first(seq__9663__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9668, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9668, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__9677 = cljs.core.next(seq__9663__$1);
          var G__9678 = null;
          var G__9679 = 0;
          var G__9680 = 0;
          seq__9663 = G__9677;
          chunk__9664 = G__9678;
          count__9665 = G__9679;
          i__9666 = G__9680;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args9681 = [];
  var len__7263__auto___9689 = arguments.length;
  var i__7264__auto___9690 = 0;
  while (true) {
    if (i__7264__auto___9690 < len__7263__auto___9689) {
      args9681.push(arguments[i__7264__auto___9690]);
      var G__9691 = i__7264__auto___9690 + 1;
      i__7264__auto___9690 = G__9691;
      continue;
    } else {
    }
    break;
  }
  var G__9685 = args9681.length;
  switch(G__9685) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9681.slice(1), 0, null);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7282__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__9686) {
  var map__9687 = p__9686;
  var map__9687__$1 = (!(map__9687 == null) ? map__9687.cljs$lang$protocol_mask$partition0$ & 64 || map__9687.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__9687) : map__9687;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9687__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9687__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq9682) {
  var G__9683 = cljs.core.first(seq9682);
  var seq9682__$1 = cljs.core.next(seq9682);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__9683, seq9682__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str("(validate new-value)")].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args9693 = [];
  var len__7263__auto___9707 = arguments.length;
  var i__7264__auto___9708 = 0;
  while (true) {
    if (i__7264__auto___9708 < len__7263__auto___9707) {
      args9693.push(arguments[i__7264__auto___9708]);
      var G__9709 = i__7264__auto___9708 + 1;
      i__7264__auto___9708 = G__9709;
      continue;
    } else {
    }
    break;
  }
  var G__9700 = args9693.length;
  switch(G__9700) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9693.slice(4), 0, null);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7282__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9701 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9701) : f.call(null, G__9701);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9702 = a.state;
      var G__9703 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9702, G__9703) : f.call(null, G__9702, G__9703);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9704 = a.state;
      var G__9705 = x;
      var G__9706 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9704, G__9705, G__9706) : f.call(null, G__9704, G__9705, G__9706);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq9694) {
  var G__9695 = cljs.core.first(seq9694);
  var seq9694__$1 = cljs.core.next(seq9694);
  var G__9696 = cljs.core.first(seq9694__$1);
  var seq9694__$2 = cljs.core.next(seq9694__$1);
  var G__9697 = cljs.core.first(seq9694__$2);
  var seq9694__$3 = cljs.core.next(seq9694__$2);
  var G__9698 = cljs.core.first(seq9694__$3);
  var seq9694__$4 = cljs.core.next(seq9694__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9695, G__9696, G__9697, G__9698, seq9694__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args9711 = [];
  var len__7263__auto___9742 = arguments.length;
  var i__7264__auto___9743 = 0;
  while (true) {
    if (i__7264__auto___9743 < len__7263__auto___9742) {
      args9711.push(arguments[i__7264__auto___9743]);
      var G__9744 = i__7264__auto___9743 + 1;
      i__7264__auto___9743 = G__9744;
      continue;
    } else {
    }
    break;
  }
  var G__9713 = args9711.length;
  switch(G__9713) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9711.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__9746 = null;
        var G__9746__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9746__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9746__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__9746 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9746__0.call(this);
            case 1:
              return G__9746__1.call(this, result);
            case 2:
              return G__9746__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9746.cljs$core$IFn$_invoke$arity$0 = G__9746__0;
        G__9746.cljs$core$IFn$_invoke$arity$1 = G__9746__1;
        G__9746.cljs$core$IFn$_invoke$arity$2 = G__9746__2;
        return G__9746;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__7108__auto___9747 = size;
          var i_9748 = 0;
          while (true) {
            if (i_9748 < n__7108__auto___9747) {
              var x_9749 = function() {
                var G__9738 = idx + i_9748;
                var G__9739 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9748);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9738, G__9739) : f.call(null, G__9738, G__9739);
              }();
              if (x_9749 == null) {
              } else {
                cljs.core.chunk_append(b, x_9749);
              }
              var G__9750 = i_9748 + 1;
              i_9748 = G__9750;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__9740 = idx;
            var G__9741 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9740, G__9741) : f.call(null, G__9740, G__9741);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args9757 = [];
  var len__7263__auto___9764 = arguments.length;
  var i__7264__auto___9765 = 0;
  while (true) {
    if (i__7264__auto___9765 < len__7263__auto___9764) {
      args9757.push(arguments[i__7264__auto___9765]);
      var G__9766 = i__7264__auto___9765 + 1;
      i__7264__auto___9765 = G__9766;
      continue;
    } else {
    }
    break;
  }
  var G__9763 = args9757.length;
  switch(G__9763) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9757.slice(3), 0, null);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__9768__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6181__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6181__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__6181__auto__;
          }
        }());
      };
      var G__9768 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9769__i = 0, G__9769__a = new Array(arguments.length - 3);
          while (G__9769__i < G__9769__a.length) {
            G__9769__a[G__9769__i] = arguments[G__9769__i + 3];
            ++G__9769__i;
          }
          args = new cljs.core.IndexedSeq(G__9769__a, 0);
        }
        return G__9768__delegate.call(this, x, y, z, args);
      };
      G__9768.cljs$lang$maxFixedArity = 3;
      G__9768.cljs$lang$applyTo = function(arglist__9770) {
        var x = cljs.core.first(arglist__9770);
        arglist__9770 = cljs.core.next(arglist__9770);
        var y = cljs.core.first(arglist__9770);
        arglist__9770 = cljs.core.next(arglist__9770);
        var z = cljs.core.first(arglist__9770);
        var args = cljs.core.rest(arglist__9770);
        return G__9768__delegate(x, y, z, args);
      };
      G__9768.cljs$core$IFn$_invoke$arity$variadic = G__9768__delegate;
      return G__9768;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__9771 = null;
          if (arguments.length > 3) {
            var G__9772__i = 0, G__9772__a = new Array(arguments.length - 3);
            while (G__9772__i < G__9772__a.length) {
              G__9772__a[G__9772__i] = arguments[G__9772__i + 3];
              ++G__9772__i;
            }
            G__9771 = new cljs.core.IndexedSeq(G__9772__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9771);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            var and__6181__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__6181__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__6181__auto____$2;
            }
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            var and__6181__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__6181__auto____$2)) {
              var and__6181__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__6181__auto____$3)) {
                var and__6181__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6181__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__6181__auto____$4;
                }
              } else {
                return and__6181__auto____$3;
              }
            } else {
              return and__6181__auto____$2;
            }
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__9773__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6181__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6181__auto__)) {
            return cljs.core.every_QMARK_(function(and__6181__auto__) {
              return function(p1__9751_SHARP_) {
                var and__6181__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9751_SHARP_) : p1.call(null, p1__9751_SHARP_);
                if (cljs.core.truth_(and__6181__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9751_SHARP_) : p2.call(null, p1__9751_SHARP_);
                } else {
                  return and__6181__auto____$1;
                }
              };
            }(and__6181__auto__), args);
          } else {
            return and__6181__auto__;
          }
        }());
      };
      var G__9773 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9774__i = 0, G__9774__a = new Array(arguments.length - 3);
          while (G__9774__i < G__9774__a.length) {
            G__9774__a[G__9774__i] = arguments[G__9774__i + 3];
            ++G__9774__i;
          }
          args = new cljs.core.IndexedSeq(G__9774__a, 0);
        }
        return G__9773__delegate.call(this, x, y, z, args);
      };
      G__9773.cljs$lang$maxFixedArity = 3;
      G__9773.cljs$lang$applyTo = function(arglist__9775) {
        var x = cljs.core.first(arglist__9775);
        arglist__9775 = cljs.core.next(arglist__9775);
        var y = cljs.core.first(arglist__9775);
        arglist__9775 = cljs.core.next(arglist__9775);
        var z = cljs.core.first(arglist__9775);
        var args = cljs.core.rest(arglist__9775);
        return G__9773__delegate(x, y, z, args);
      };
      G__9773.cljs$core$IFn$_invoke$arity$variadic = G__9773__delegate;
      return G__9773;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__9776 = null;
          if (arguments.length > 3) {
            var G__9777__i = 0, G__9777__a = new Array(arguments.length - 3);
            while (G__9777__i < G__9777__a.length) {
              G__9777__a[G__9777__i] = arguments[G__9777__i + 3];
              ++G__9777__i;
            }
            G__9776 = new cljs.core.IndexedSeq(G__9777__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9776);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            var and__6181__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__6181__auto____$2)) {
              var and__6181__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__6181__auto____$3)) {
                var and__6181__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6181__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__6181__auto____$4;
                }
              } else {
                return and__6181__auto____$3;
              }
            } else {
              return and__6181__auto____$2;
            }
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6181__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6181__auto____$1)) {
            var and__6181__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__6181__auto____$2)) {
              var and__6181__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__6181__auto____$3)) {
                var and__6181__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6181__auto____$4)) {
                  var and__6181__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__6181__auto____$5)) {
                    var and__6181__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__6181__auto____$6)) {
                      var and__6181__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__6181__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__6181__auto____$7;
                      }
                    } else {
                      return and__6181__auto____$6;
                    }
                  } else {
                    return and__6181__auto____$5;
                  }
                } else {
                  return and__6181__auto____$4;
                }
              } else {
                return and__6181__auto____$3;
              }
            } else {
              return and__6181__auto____$2;
            }
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__9778__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6181__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6181__auto__)) {
            return cljs.core.every_QMARK_(function(and__6181__auto__) {
              return function(p1__9752_SHARP_) {
                var and__6181__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9752_SHARP_) : p1.call(null, p1__9752_SHARP_);
                if (cljs.core.truth_(and__6181__auto____$1)) {
                  var and__6181__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9752_SHARP_) : p2.call(null, p1__9752_SHARP_);
                  if (cljs.core.truth_(and__6181__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9752_SHARP_) : p3.call(null, p1__9752_SHARP_);
                  } else {
                    return and__6181__auto____$2;
                  }
                } else {
                  return and__6181__auto____$1;
                }
              };
            }(and__6181__auto__), args);
          } else {
            return and__6181__auto__;
          }
        }());
      };
      var G__9778 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9779__i = 0, G__9779__a = new Array(arguments.length - 3);
          while (G__9779__i < G__9779__a.length) {
            G__9779__a[G__9779__i] = arguments[G__9779__i + 3];
            ++G__9779__i;
          }
          args = new cljs.core.IndexedSeq(G__9779__a, 0);
        }
        return G__9778__delegate.call(this, x, y, z, args);
      };
      G__9778.cljs$lang$maxFixedArity = 3;
      G__9778.cljs$lang$applyTo = function(arglist__9780) {
        var x = cljs.core.first(arglist__9780);
        arglist__9780 = cljs.core.next(arglist__9780);
        var y = cljs.core.first(arglist__9780);
        arglist__9780 = cljs.core.next(arglist__9780);
        var z = cljs.core.first(arglist__9780);
        var args = cljs.core.rest(arglist__9780);
        return G__9778__delegate(x, y, z, args);
      };
      G__9778.cljs$core$IFn$_invoke$arity$variadic = G__9778__delegate;
      return G__9778;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__9781 = null;
          if (arguments.length > 3) {
            var G__9782__i = 0, G__9782__a = new Array(arguments.length - 3);
            while (G__9782__i < G__9782__a.length) {
              G__9782__a[G__9782__i] = arguments[G__9782__i + 3];
              ++G__9782__i;
            }
            G__9781 = new cljs.core.IndexedSeq(G__9782__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9781);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9753_SHARP_) {
            return p1__9753_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9753_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9753_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9754_SHARP_) {
            var and__6181__auto__ = p1__9754_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9754_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9754_SHARP_.call(null, x);
            if (cljs.core.truth_(and__6181__auto__)) {
              return p1__9754_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9754_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9754_SHARP_.call(null, y);
            } else {
              return and__6181__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9755_SHARP_) {
            var and__6181__auto__ = p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9755_SHARP_.call(null, x);
            if (cljs.core.truth_(and__6181__auto__)) {
              var and__6181__auto____$1 = p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9755_SHARP_.call(null, y);
              if (cljs.core.truth_(and__6181__auto____$1)) {
                return p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9755_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9755_SHARP_.call(null, z);
              } else {
                return and__6181__auto____$1;
              }
            } else {
              return and__6181__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__9783__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__6181__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__6181__auto__)) {
              return cljs.core.every_QMARK_(function(and__6181__auto__, ps__$1) {
                return function(p1__9756_SHARP_) {
                  return cljs.core.every_QMARK_(p1__9756_SHARP_, args);
                };
              }(and__6181__auto__, ps__$1), ps__$1);
            } else {
              return and__6181__auto__;
            }
          }());
        };
        var G__9783 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9784__i = 0, G__9784__a = new Array(arguments.length - 3);
            while (G__9784__i < G__9784__a.length) {
              G__9784__a[G__9784__i] = arguments[G__9784__i + 3];
              ++G__9784__i;
            }
            args = new cljs.core.IndexedSeq(G__9784__a, 0);
          }
          return G__9783__delegate.call(this, x, y, z, args);
        };
        G__9783.cljs$lang$maxFixedArity = 3;
        G__9783.cljs$lang$applyTo = function(arglist__9785) {
          var x = cljs.core.first(arglist__9785);
          arglist__9785 = cljs.core.next(arglist__9785);
          var y = cljs.core.first(arglist__9785);
          arglist__9785 = cljs.core.next(arglist__9785);
          var z = cljs.core.first(arglist__9785);
          var args = cljs.core.rest(arglist__9785);
          return G__9783__delegate(x, y, z, args);
        };
        G__9783.cljs$core$IFn$_invoke$arity$variadic = G__9783__delegate;
        return G__9783;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__9786 = null;
            if (arguments.length > 3) {
              var G__9787__i = 0, G__9787__a = new Array(arguments.length - 3);
              while (G__9787__i < G__9787__a.length) {
                G__9787__a[G__9787__i] = arguments[G__9787__i + 3];
                ++G__9787__i;
              }
              G__9786 = new cljs.core.IndexedSeq(G__9787__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9786);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq9758) {
  var G__9759 = cljs.core.first(seq9758);
  var seq9758__$1 = cljs.core.next(seq9758);
  var G__9760 = cljs.core.first(seq9758__$1);
  var seq9758__$2 = cljs.core.next(seq9758__$1);
  var G__9761 = cljs.core.first(seq9758__$2);
  var seq9758__$3 = cljs.core.next(seq9758__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__9759, G__9760, G__9761, seq9758__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args9794 = [];
  var len__7263__auto___9801 = arguments.length;
  var i__7264__auto___9802 = 0;
  while (true) {
    if (i__7264__auto___9802 < len__7263__auto___9801) {
      args9794.push(arguments[i__7264__auto___9802]);
      var G__9803 = i__7264__auto___9802 + 1;
      i__7264__auto___9802 = G__9803;
      continue;
    } else {
    }
    break;
  }
  var G__9800 = args9794.length;
  switch(G__9800) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9794.slice(3), 0, null);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__6193__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__6193__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__9805__delegate = function(x, y, z, args) {
        var or__6193__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__9805 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9806__i = 0, G__9806__a = new Array(arguments.length - 3);
          while (G__9806__i < G__9806__a.length) {
            G__9806__a[G__9806__i] = arguments[G__9806__i + 3];
            ++G__9806__i;
          }
          args = new cljs.core.IndexedSeq(G__9806__a, 0);
        }
        return G__9805__delegate.call(this, x, y, z, args);
      };
      G__9805.cljs$lang$maxFixedArity = 3;
      G__9805.cljs$lang$applyTo = function(arglist__9807) {
        var x = cljs.core.first(arglist__9807);
        arglist__9807 = cljs.core.next(arglist__9807);
        var y = cljs.core.first(arglist__9807);
        arglist__9807 = cljs.core.next(arglist__9807);
        var z = cljs.core.first(arglist__9807);
        var args = cljs.core.rest(arglist__9807);
        return G__9805__delegate(x, y, z, args);
      };
      G__9805.cljs$core$IFn$_invoke$arity$variadic = G__9805__delegate;
      return G__9805;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__9808 = null;
          if (arguments.length > 3) {
            var G__9809__i = 0, G__9809__a = new Array(arguments.length - 3);
            while (G__9809__i < G__9809__a.length) {
              G__9809__a[G__9809__i] = arguments[G__9809__i + 3];
              ++G__9809__i;
            }
            G__9808 = new cljs.core.IndexedSeq(G__9809__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9808);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          var or__6193__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__6193__auto____$2)) {
            return or__6193__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          var or__6193__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__6193__auto____$2)) {
            return or__6193__auto____$2;
          } else {
            var or__6193__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__6193__auto____$3)) {
              return or__6193__auto____$3;
            } else {
              var or__6193__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6193__auto____$4)) {
                return or__6193__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__9810__delegate = function(x, y, z, args) {
        var or__6193__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return cljs.core.some(function(or__6193__auto__) {
            return function(p1__9788_SHARP_) {
              var or__6193__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9788_SHARP_) : p1.call(null, p1__9788_SHARP_);
              if (cljs.core.truth_(or__6193__auto____$1)) {
                return or__6193__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9788_SHARP_) : p2.call(null, p1__9788_SHARP_);
              }
            };
          }(or__6193__auto__), args);
        }
      };
      var G__9810 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9811__i = 0, G__9811__a = new Array(arguments.length - 3);
          while (G__9811__i < G__9811__a.length) {
            G__9811__a[G__9811__i] = arguments[G__9811__i + 3];
            ++G__9811__i;
          }
          args = new cljs.core.IndexedSeq(G__9811__a, 0);
        }
        return G__9810__delegate.call(this, x, y, z, args);
      };
      G__9810.cljs$lang$maxFixedArity = 3;
      G__9810.cljs$lang$applyTo = function(arglist__9812) {
        var x = cljs.core.first(arglist__9812);
        arglist__9812 = cljs.core.next(arglist__9812);
        var y = cljs.core.first(arglist__9812);
        arglist__9812 = cljs.core.next(arglist__9812);
        var z = cljs.core.first(arglist__9812);
        var args = cljs.core.rest(arglist__9812);
        return G__9810__delegate(x, y, z, args);
      };
      G__9810.cljs$core$IFn$_invoke$arity$variadic = G__9810__delegate;
      return G__9810;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__9813 = null;
          if (arguments.length > 3) {
            var G__9814__i = 0, G__9814__a = new Array(arguments.length - 3);
            while (G__9814__i < G__9814__a.length) {
              G__9814__a[G__9814__i] = arguments[G__9814__i + 3];
              ++G__9814__i;
            }
            G__9813 = new cljs.core.IndexedSeq(G__9814__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9813);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          var or__6193__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__6193__auto____$2)) {
            return or__6193__auto____$2;
          } else {
            var or__6193__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__6193__auto____$3)) {
              return or__6193__auto____$3;
            } else {
              var or__6193__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6193__auto____$4)) {
                return or__6193__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__6193__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6193__auto____$1)) {
          return or__6193__auto____$1;
        } else {
          var or__6193__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__6193__auto____$2)) {
            return or__6193__auto____$2;
          } else {
            var or__6193__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__6193__auto____$3)) {
              return or__6193__auto____$3;
            } else {
              var or__6193__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6193__auto____$4)) {
                return or__6193__auto____$4;
              } else {
                var or__6193__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__6193__auto____$5)) {
                  return or__6193__auto____$5;
                } else {
                  var or__6193__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__6193__auto____$6)) {
                    return or__6193__auto____$6;
                  } else {
                    var or__6193__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__6193__auto____$7)) {
                      return or__6193__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__9815__delegate = function(x, y, z, args) {
        var or__6193__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return cljs.core.some(function(or__6193__auto__) {
            return function(p1__9789_SHARP_) {
              var or__6193__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9789_SHARP_) : p1.call(null, p1__9789_SHARP_);
              if (cljs.core.truth_(or__6193__auto____$1)) {
                return or__6193__auto____$1;
              } else {
                var or__6193__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9789_SHARP_) : p2.call(null, p1__9789_SHARP_);
                if (cljs.core.truth_(or__6193__auto____$2)) {
                  return or__6193__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9789_SHARP_) : p3.call(null, p1__9789_SHARP_);
                }
              }
            };
          }(or__6193__auto__), args);
        }
      };
      var G__9815 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9816__i = 0, G__9816__a = new Array(arguments.length - 3);
          while (G__9816__i < G__9816__a.length) {
            G__9816__a[G__9816__i] = arguments[G__9816__i + 3];
            ++G__9816__i;
          }
          args = new cljs.core.IndexedSeq(G__9816__a, 0);
        }
        return G__9815__delegate.call(this, x, y, z, args);
      };
      G__9815.cljs$lang$maxFixedArity = 3;
      G__9815.cljs$lang$applyTo = function(arglist__9817) {
        var x = cljs.core.first(arglist__9817);
        arglist__9817 = cljs.core.next(arglist__9817);
        var y = cljs.core.first(arglist__9817);
        arglist__9817 = cljs.core.next(arglist__9817);
        var z = cljs.core.first(arglist__9817);
        var args = cljs.core.rest(arglist__9817);
        return G__9815__delegate(x, y, z, args);
      };
      G__9815.cljs$core$IFn$_invoke$arity$variadic = G__9815__delegate;
      return G__9815;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__9818 = null;
          if (arguments.length > 3) {
            var G__9819__i = 0, G__9819__a = new Array(arguments.length - 3);
            while (G__9819__i < G__9819__a.length) {
              G__9819__a[G__9819__i] = arguments[G__9819__i + 3];
              ++G__9819__i;
            }
            G__9818 = new cljs.core.IndexedSeq(G__9819__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9818);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9790_SHARP_) {
            return p1__9790_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9790_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9790_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9791_SHARP_) {
            var or__6193__auto__ = p1__9791_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9791_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9791_SHARP_.call(null, x);
            if (cljs.core.truth_(or__6193__auto__)) {
              return or__6193__auto__;
            } else {
              return p1__9791_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9791_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9791_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9792_SHARP_) {
            var or__6193__auto__ = p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9792_SHARP_.call(null, x);
            if (cljs.core.truth_(or__6193__auto__)) {
              return or__6193__auto__;
            } else {
              var or__6193__auto____$1 = p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9792_SHARP_.call(null, y);
              if (cljs.core.truth_(or__6193__auto____$1)) {
                return or__6193__auto____$1;
              } else {
                return p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9792_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9792_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__9820__delegate = function(x, y, z, args) {
          var or__6193__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__6193__auto__)) {
            return or__6193__auto__;
          } else {
            return cljs.core.some(function(or__6193__auto__, ps__$1) {
              return function(p1__9793_SHARP_) {
                return cljs.core.some(p1__9793_SHARP_, args);
              };
            }(or__6193__auto__, ps__$1), ps__$1);
          }
        };
        var G__9820 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9821__i = 0, G__9821__a = new Array(arguments.length - 3);
            while (G__9821__i < G__9821__a.length) {
              G__9821__a[G__9821__i] = arguments[G__9821__i + 3];
              ++G__9821__i;
            }
            args = new cljs.core.IndexedSeq(G__9821__a, 0);
          }
          return G__9820__delegate.call(this, x, y, z, args);
        };
        G__9820.cljs$lang$maxFixedArity = 3;
        G__9820.cljs$lang$applyTo = function(arglist__9822) {
          var x = cljs.core.first(arglist__9822);
          arglist__9822 = cljs.core.next(arglist__9822);
          var y = cljs.core.first(arglist__9822);
          arglist__9822 = cljs.core.next(arglist__9822);
          var z = cljs.core.first(arglist__9822);
          var args = cljs.core.rest(arglist__9822);
          return G__9820__delegate(x, y, z, args);
        };
        G__9820.cljs$core$IFn$_invoke$arity$variadic = G__9820__delegate;
        return G__9820;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__9823 = null;
            if (arguments.length > 3) {
              var G__9824__i = 0, G__9824__a = new Array(arguments.length - 3);
              while (G__9824__i < G__9824__a.length) {
                G__9824__a[G__9824__i] = arguments[G__9824__i + 3];
                ++G__9824__i;
              }
              G__9823 = new cljs.core.IndexedSeq(G__9824__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9823);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq9795) {
  var G__9796 = cljs.core.first(seq9795);
  var seq9795__$1 = cljs.core.next(seq9795);
  var G__9797 = cljs.core.first(seq9795__$1);
  var seq9795__$2 = cljs.core.next(seq9795__$1);
  var G__9798 = cljs.core.first(seq9795__$2);
  var seq9795__$3 = cljs.core.next(seq9795__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__9796, G__9797, G__9798, seq9795__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args9826 = [];
  var len__7263__auto___9846 = arguments.length;
  var i__7264__auto___9847 = 0;
  while (true) {
    if (i__7264__auto___9847 < len__7263__auto___9846) {
      args9826.push(arguments[i__7264__auto___9847]);
      var G__9848 = i__7264__auto___9847 + 1;
      i__7264__auto___9847 = G__9848;
      continue;
    } else {
    }
    break;
  }
  var G__9833 = args9826.length;
  switch(G__9833) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9826.slice(4), 0, null);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7282__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9850 = null;
      var G__9850__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9850__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9850__2 = function(result, input) {
        var G__9834 = result;
        var G__9835 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9834, G__9835) : rf.call(null, G__9834, G__9835);
      };
      var G__9850__3 = function() {
        var G__9851__delegate = function(result, input, inputs) {
          var G__9836 = result;
          var G__9837 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9836, G__9837) : rf.call(null, G__9836, G__9837);
        };
        var G__9851 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__9852__i = 0, G__9852__a = new Array(arguments.length - 2);
            while (G__9852__i < G__9852__a.length) {
              G__9852__a[G__9852__i] = arguments[G__9852__i + 2];
              ++G__9852__i;
            }
            inputs = new cljs.core.IndexedSeq(G__9852__a, 0);
          }
          return G__9851__delegate.call(this, result, input, inputs);
        };
        G__9851.cljs$lang$maxFixedArity = 2;
        G__9851.cljs$lang$applyTo = function(arglist__9853) {
          var result = cljs.core.first(arglist__9853);
          arglist__9853 = cljs.core.next(arglist__9853);
          var input = cljs.core.first(arglist__9853);
          var inputs = cljs.core.rest(arglist__9853);
          return G__9851__delegate(result, input, inputs);
        };
        G__9851.cljs$core$IFn$_invoke$arity$variadic = G__9851__delegate;
        return G__9851;
      }();
      G__9850 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__9850__0.call(this);
          case 1:
            return G__9850__1.call(this, result);
          case 2:
            return G__9850__2.call(this, result, input);
          default:
            var G__9854 = null;
            if (arguments.length > 2) {
              var G__9855__i = 0, G__9855__a = new Array(arguments.length - 2);
              while (G__9855__i < G__9855__a.length) {
                G__9855__a[G__9855__i] = arguments[G__9855__i + 2];
                ++G__9855__i;
              }
              G__9854 = new cljs.core.IndexedSeq(G__9855__a, 0);
            }
            return G__9850__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9854);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9850.cljs$lang$maxFixedArity = 2;
      G__9850.cljs$lang$applyTo = G__9850__3.cljs$lang$applyTo;
      G__9850.cljs$core$IFn$_invoke$arity$0 = G__9850__0;
      G__9850.cljs$core$IFn$_invoke$arity$1 = G__9850__1;
      G__9850.cljs$core$IFn$_invoke$arity$2 = G__9850__2;
      G__9850.cljs$core$IFn$_invoke$arity$variadic = G__9850__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__9850;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7108__auto___9856 = size;
        var i_9857 = 0;
        while (true) {
          if (i_9857 < n__7108__auto___9856) {
            cljs.core.chunk_append(b, function() {
              var G__9838 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9857);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9838) : f.call(null, G__9838);
            }());
            var G__9858 = i_9857 + 1;
            i_9857 = G__9858;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__9839 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9839) : f.call(null, G__9839);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__9840 = cljs.core.first(s1);
        var G__9841 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9840, G__9841) : f.call(null, G__9840, G__9841);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__9842 = cljs.core.first(s1);
        var G__9843 = cljs.core.first(s2);
        var G__9844 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9842, G__9843, G__9844) : f.call(null, G__9842, G__9843, G__9844);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__9825_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9825_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq9827) {
  var G__9828 = cljs.core.first(seq9827);
  var seq9827__$1 = cljs.core.next(seq9827);
  var G__9829 = cljs.core.first(seq9827__$1);
  var seq9827__$2 = cljs.core.next(seq9827__$1);
  var G__9830 = cljs.core.first(seq9827__$2);
  var seq9827__$3 = cljs.core.next(seq9827__$2);
  var G__9831 = cljs.core.first(seq9827__$3);
  var seq9827__$4 = cljs.core.next(seq9827__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__9828, G__9829, G__9830, G__9831, seq9827__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args9859 = [];
  var len__7263__auto___9862 = arguments.length;
  var i__7264__auto___9863 = 0;
  while (true) {
    if (i__7264__auto___9863 < len__7263__auto___9862) {
      args9859.push(arguments[i__7264__auto___9863]);
      var G__9864 = i__7264__auto___9863 + 1;
      i__7264__auto___9863 = G__9864;
      continue;
    } else {
    }
    break;
  }
  var G__9861 = args9859.length;
  switch(G__9861) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9859.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9866 = null;
        var G__9866__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9866__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9866__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__9866 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9866__0.call(this);
            case 1:
              return G__9866__1.call(this, result);
            case 2:
              return G__9866__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9866.cljs$core$IFn$_invoke$arity$0 = G__9866__0;
        G__9866.cljs$core$IFn$_invoke$arity$1 = G__9866__1;
        G__9866.cljs$core$IFn$_invoke$arity$2 = G__9866__2;
        return G__9866;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args9867 = [];
  var len__7263__auto___9870 = arguments.length;
  var i__7264__auto___9871 = 0;
  while (true) {
    if (i__7264__auto___9871 < len__7263__auto___9870) {
      args9867.push(arguments[i__7264__auto___9871]);
      var G__9872 = i__7264__auto___9871 + 1;
      i__7264__auto___9871 = G__9872;
      continue;
    } else {
    }
    break;
  }
  var G__9869 = args9867.length;
  switch(G__9869) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9867.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9874 = null;
        var G__9874__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9874__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9874__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9874 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9874__0.call(this);
            case 1:
              return G__9874__1.call(this, result);
            case 2:
              return G__9874__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9874.cljs$core$IFn$_invoke$arity$0 = G__9874__0;
        G__9874.cljs$core$IFn$_invoke$arity$1 = G__9874__1;
        G__9874.cljs$core$IFn$_invoke$arity$2 = G__9874__2;
        return G__9874;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__9875 = n__$1 - 1;
        var G__9876 = cljs.core.rest(s);
        n__$1 = G__9875;
        coll__$1 = G__9876;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args9877 = [];
  var len__7263__auto___9880 = arguments.length;
  var i__7264__auto___9881 = 0;
  while (true) {
    if (i__7264__auto___9881 < len__7263__auto___9880) {
      args9877.push(arguments[i__7264__auto___9881]);
      var G__9882 = i__7264__auto___9881 + 1;
      i__7264__auto___9881 = G__9882;
      continue;
    } else {
    }
    break;
  }
  var G__9879 = args9877.length;
  switch(G__9879) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9877.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9884 = cljs.core.next(s);
      var G__9885 = cljs.core.next(lead);
      s = G__9884;
      lead = G__9885;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args9886 = [];
  var len__7263__auto___9891 = arguments.length;
  var i__7264__auto___9892 = 0;
  while (true) {
    if (i__7264__auto___9892 < len__7263__auto___9891) {
      args9886.push(arguments[i__7264__auto___9892]);
      var G__9893 = i__7264__auto___9892 + 1;
      i__7264__auto___9892 = G__9893;
      continue;
    } else {
    }
    break;
  }
  var G__9888 = args9886.length;
  switch(G__9888) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9886.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__9895 = null;
        var G__9895__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9895__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9895__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__6181__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__6181__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__6181__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9895 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9895__0.call(this);
            case 1:
              return G__9895__1.call(this, result);
            case 2:
              return G__9895__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9895.cljs$core$IFn$_invoke$arity$0 = G__9895__0;
        G__9895.cljs$core$IFn$_invoke$arity$1 = G__9895__1;
        G__9895.cljs$core$IFn$_invoke$arity$2 = G__9895__2;
        return G__9895;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__6181__auto__ = s;
        if (and__6181__auto__) {
          var G__9890 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9890) : pred__$1.call(null, G__9890);
        } else {
          return and__6181__auto__;
        }
      }())) {
        var G__9896 = pred__$1;
        var G__9897 = cljs.core.rest(s);
        pred__$1 = G__9896;
        coll__$1 = G__9897;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args9898 = [];
  var len__7263__auto___9901 = arguments.length;
  var i__7264__auto___9902 = 0;
  while (true) {
    if (i__7264__auto___9902 < len__7263__auto___9901) {
      args9898.push(arguments[i__7264__auto___9902]);
      var G__9903 = i__7264__auto___9902 + 1;
      i__7264__auto___9902 = G__9903;
      continue;
    } else {
    }
    break;
  }
  var G__9900 = args9898.length;
  switch(G__9900) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9898.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args9905 = [];
  var len__7263__auto___9908 = arguments.length;
  var i__7264__auto___9909 = 0;
  while (true) {
    if (i__7264__auto___9909 < len__7263__auto___9908) {
      args9905.push(arguments[i__7264__auto___9909]);
      var G__9910 = i__7264__auto___9909 + 1;
      i__7264__auto___9909 = G__9910;
      continue;
    } else {
    }
    break;
  }
  var G__9907 = args9905.length;
  switch(G__9907) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9905.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args9914 = [];
  var len__7263__auto___9920 = arguments.length;
  var i__7264__auto___9921 = 0;
  while (true) {
    if (i__7264__auto___9921 < len__7263__auto___9920) {
      args9914.push(arguments[i__7264__auto___9921]);
      var G__9922 = i__7264__auto___9921 + 1;
      i__7264__auto___9921 = G__9922;
      continue;
    } else {
    }
    break;
  }
  var G__9919 = args9914.length;
  switch(G__9919) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9914.slice(2), 0, null);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7282__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq9915) {
  var G__9916 = cljs.core.first(seq9915);
  var seq9915__$1 = cljs.core.next(seq9915);
  var G__9917 = cljs.core.first(seq9915__$1);
  var seq9915__$2 = cljs.core.next(seq9915__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__9916, G__9917, seq9915__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args9924 = [];
  var len__7263__auto___9927 = arguments.length;
  var i__7264__auto___9928 = 0;
  while (true) {
    if (i__7264__auto___9928 < len__7263__auto___9927) {
      args9924.push(arguments[i__7264__auto___9928]);
      var G__9929 = i__7264__auto___9928 + 1;
      i__7264__auto___9928 = G__9929;
      continue;
    } else {
    }
    break;
  }
  var G__9926 = args9924.length;
  switch(G__9926) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9924.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__9931 = null;
        var G__9931__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9931__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9931__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9931 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9931__0.call(this);
            case 1:
              return G__9931__1.call(this, result);
            case 2:
              return G__9931__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9931.cljs$core$IFn$_invoke$arity$0 = G__9931__0;
        G__9931.cljs$core$IFn$_invoke$arity$1 = G__9931__1;
        G__9931.cljs$core$IFn$_invoke$arity$2 = G__9931__2;
        return G__9931;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args9940 = [];
  var len__7263__auto___9945 = arguments.length;
  var i__7264__auto___9946 = 0;
  while (true) {
    if (i__7264__auto___9946 < len__7263__auto___9945) {
      args9940.push(arguments[i__7264__auto___9946]);
      var G__9947 = i__7264__auto___9946 + 1;
      i__7264__auto___9946 = G__9947;
      continue;
    } else {
    }
    break;
  }
  var G__9944 = args9940.length;
  switch(G__9944) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9940.slice(1), 0, null);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7282__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq9941) {
  var G__9942 = cljs.core.first(seq9941);
  var seq9941__$1 = cljs.core.next(seq9941);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__9942, seq9941__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args9949 = [];
  var len__7263__auto___9953 = arguments.length;
  var i__7264__auto___9954 = 0;
  while (true) {
    if (i__7264__auto___9954 < len__7263__auto___9953) {
      args9949.push(arguments[i__7264__auto___9954]);
      var G__9955 = i__7264__auto___9954 + 1;
      i__7264__auto___9954 = G__9955;
      continue;
    } else {
    }
    break;
  }
  var G__9951 = args9949.length;
  switch(G__9951) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9949.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9957 = null;
      var G__9957__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9957__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9957__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__9957 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9957__0.call(this);
          case 1:
            return G__9957__1.call(this, result);
          case 2:
            return G__9957__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9957.cljs$core$IFn$_invoke$arity$0 = G__9957__0;
      G__9957.cljs$core$IFn$_invoke$arity$1 = G__9957__1;
      G__9957.cljs$core$IFn$_invoke$arity$2 = G__9957__2;
      return G__9957;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7108__auto___9958 = size;
        var i_9959 = 0;
        while (true) {
          if (i_9959 < n__7108__auto___9958) {
            if (cljs.core.truth_(function() {
              var G__9952 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9959);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9952) : pred.call(null, G__9952);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9959));
            } else {
            }
            var G__9960 = i_9959 + 1;
            i_9959 = G__9960;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args9961 = [];
  var len__7263__auto___9964 = arguments.length;
  var i__7264__auto___9965 = 0;
  while (true) {
    if (i__7264__auto___9965 < len__7263__auto___9964) {
      args9961.push(arguments[i__7264__auto___9965]);
      var G__9966 = i__7264__auto___9965 + 1;
      i__7264__auto___9965 = G__9966;
      continue;
    } else {
    }
    break;
  }
  var G__9963 = args9961.length;
  switch(G__9963) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9961.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9968_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__9968_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args9969 = [];
  var len__7263__auto___9974 = arguments.length;
  var i__7264__auto___9975 = 0;
  while (true) {
    if (i__7264__auto___9975 < len__7263__auto___9974) {
      args9969.push(arguments[i__7264__auto___9975]);
      var G__9976 = i__7264__auto___9975 + 1;
      i__7264__auto___9975 = G__9976;
      continue;
    } else {
    }
    break;
  }
  var G__9971 = args9969.length;
  switch(G__9971) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9969.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args9978 = [];
  var len__7263__auto___9986 = arguments.length;
  var i__7264__auto___9987 = 0;
  while (true) {
    if (i__7264__auto___9987 < len__7263__auto___9986) {
      args9978.push(arguments[i__7264__auto___9987]);
      var G__9988 = i__7264__auto___9987 + 1;
      i__7264__auto___9987 = G__9988;
      continue;
    } else {
    }
    break;
  }
  var G__9985 = args9978.length;
  switch(G__9985) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args9978.slice(4), 0, null);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7282__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq9979) {
  var G__9980 = cljs.core.first(seq9979);
  var seq9979__$1 = cljs.core.next(seq9979);
  var G__9981 = cljs.core.first(seq9979__$1);
  var seq9979__$2 = cljs.core.next(seq9979__$1);
  var G__9982 = cljs.core.first(seq9979__$2);
  var seq9979__$3 = cljs.core.next(seq9979__$2);
  var G__9983 = cljs.core.first(seq9979__$3);
  var seq9979__$4 = cljs.core.next(seq9979__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__9980, G__9981, G__9982, G__9983, seq9979__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args9990 = [];
  var len__7263__auto___9993 = arguments.length;
  var i__7264__auto___9994 = 0;
  while (true) {
    if (i__7264__auto___9994 < len__7263__auto___9993) {
      args9990.push(arguments[i__7264__auto___9994]);
      var G__9995 = i__7264__auto___9994 + 1;
      i__7264__auto___9994 = G__9995;
      continue;
    } else {
    }
    break;
  }
  var G__9992 = args9990.length;
  switch(G__9992) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9990.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        var x__7027__auto__ = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad));
        return cljs.core._conj(cljs.core.List.EMPTY, x__7027__auto__);
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args9997 = [];
  var len__7263__auto___10001 = arguments.length;
  var i__7264__auto___10002 = 0;
  while (true) {
    if (i__7264__auto___10002 < len__7263__auto___10001) {
      args9997.push(arguments[i__7264__auto___10002]);
      var G__10003 = i__7264__auto___10002 + 1;
      i__7264__auto___10002 = G__10003;
      continue;
    } else {
    }
    break;
  }
  var G__9999 = args9997.length;
  switch(G__9999) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9997.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__10005 = sentinel;
          var G__10006 = m__$2;
          var G__10007 = cljs.core.next(ks__$1);
          sentinel = G__10005;
          m__$1 = G__10006;
          ks__$1 = G__10007;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__10008, v) {
  var vec__10013 = p__10008;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10013, 0, null);
  var ks = cljs.core.nthnext(vec__10013, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args10014 = [];
  var len__7263__auto___10044 = arguments.length;
  var i__7264__auto___10045 = 0;
  while (true) {
    if (i__7264__auto___10045 < len__7263__auto___10044) {
      args10014.push(arguments[i__7264__auto___10045]);
      var G__10046 = i__7264__auto___10045 + 1;
      i__7264__auto___10045 = G__10046;
      continue;
    } else {
    }
    break;
  }
  var G__10023 = args10014.length;
  switch(G__10023) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10014.slice(6), 0, null);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7282__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__10024, f) {
  var vec__10025 = p__10024;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10025, 0, null);
  var ks = cljs.core.nthnext(vec__10025, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__10026 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10026) : f.call(null, G__10026);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__10027, f, a) {
  var vec__10028 = p__10027;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10028, 0, null);
  var ks = cljs.core.nthnext(vec__10028, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__10029 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__10030 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10029, G__10030) : f.call(null, G__10029, G__10030);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__10031, f, a, b) {
  var vec__10032 = p__10031;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10032, 0, null);
  var ks = cljs.core.nthnext(vec__10032, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__10033 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__10034 = a;
      var G__10035 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10033, G__10034, G__10035) : f.call(null, G__10033, G__10034, G__10035);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__10036, f, a, b, c) {
  var vec__10037 = p__10036;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10037, 0, null);
  var ks = cljs.core.nthnext(vec__10037, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__10038 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__10039 = a;
      var G__10040 = b;
      var G__10041 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__10038, G__10039, G__10040, G__10041) : f.call(null, G__10038, G__10039, G__10040, G__10041);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__10042, f, a, b, c, args) {
  var vec__10043 = p__10042;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10043, 0, null);
  var ks = cljs.core.nthnext(vec__10043, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq10015) {
  var G__10016 = cljs.core.first(seq10015);
  var seq10015__$1 = cljs.core.next(seq10015);
  var G__10017 = cljs.core.first(seq10015__$1);
  var seq10015__$2 = cljs.core.next(seq10015__$1);
  var G__10018 = cljs.core.first(seq10015__$2);
  var seq10015__$3 = cljs.core.next(seq10015__$2);
  var G__10019 = cljs.core.first(seq10015__$3);
  var seq10015__$4 = cljs.core.next(seq10015__$3);
  var G__10020 = cljs.core.first(seq10015__$4);
  var seq10015__$5 = cljs.core.next(seq10015__$4);
  var G__10021 = cljs.core.first(seq10015__$5);
  var seq10015__$6 = cljs.core.next(seq10015__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__10016, G__10017, G__10018, G__10019, G__10020, G__10021, seq10015__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args10048 = [];
  var len__7263__auto___10068 = arguments.length;
  var i__7264__auto___10069 = 0;
  while (true) {
    if (i__7264__auto___10069 < len__7263__auto___10068) {
      args10048.push(arguments[i__7264__auto___10069]);
      var G__10070 = i__7264__auto___10069 + 1;
      i__7264__auto___10069 = G__10070;
      continue;
    } else {
    }
    break;
  }
  var G__10057 = args10048.length;
  switch(G__10057) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10048.slice(6), 0, null);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7282__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__10058 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10058) : f.call(null, G__10058);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__10059 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__10060 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10059, G__10060) : f.call(null, G__10059, G__10060);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__10061 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__10062 = x;
    var G__10063 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10061, G__10062, G__10063) : f.call(null, G__10061, G__10062, G__10063);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__10064 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__10065 = x;
    var G__10066 = y;
    var G__10067 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__10064, G__10065, G__10066, G__10067) : f.call(null, G__10064, G__10065, G__10066, G__10067);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq10049) {
  var G__10050 = cljs.core.first(seq10049);
  var seq10049__$1 = cljs.core.next(seq10049);
  var G__10051 = cljs.core.first(seq10049__$1);
  var seq10049__$2 = cljs.core.next(seq10049__$1);
  var G__10052 = cljs.core.first(seq10049__$2);
  var seq10049__$3 = cljs.core.next(seq10049__$2);
  var G__10053 = cljs.core.first(seq10049__$3);
  var seq10049__$4 = cljs.core.next(seq10049__$3);
  var G__10054 = cljs.core.first(seq10049__$4);
  var seq10049__$5 = cljs.core.next(seq10049__$4);
  var G__10055 = cljs.core.first(seq10049__$5);
  var seq10049__$6 = cljs.core.next(seq10049__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__10050, G__10051, G__10052, G__10053, G__10054, G__10055, seq10049__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__10072 = ll - 5;
      var G__10073 = r;
      ll = G__10072;
      ret = G__10073;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__10078 = cljs.core.pv_aget(node, 0);
      var G__10079 = level - 5;
      node = G__10078;
      level = G__10079;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__10080 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__10081 = level - 5;
        node = G__10080;
        level = G__10081;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.indexOf = function() {
  var G__10100 = null;
  var G__10100__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10100__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10100 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10100__1.call(this, x);
      case 2:
        return G__10100__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10100.cljs$core$IFn$_invoke$arity$1 = G__10100__1;
  G__10100.cljs$core$IFn$_invoke$arity$2 = G__10100__2;
  return G__10100;
}();
cljs.core.PersistentVector.prototype.lastIndexOf = function() {
  var G__10101 = null;
  var G__10101__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10101__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10101 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10101__1.call(this, x);
      case 2:
        return G__10101__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10101.cljs$core$IFn$_invoke$arity$1 = G__10101__1;
  G__10101.cljs$core$IFn$_invoke$arity$2 = G__10101__2;
  return G__10101;
}();
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__10091 = init__$2;
              var G__10092 = j + i;
              var G__10093 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10091, G__10092, G__10093) : f.call(null, G__10091, G__10092, G__10093);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__10102 = j + 1;
              var G__10103 = init__$3;
              j = G__10102;
              init__$2 = G__10103;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10104 = i + len;
        var G__10105 = init__$2;
        i = G__10104;
        init__$1 = G__10105;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__10094 = init__$2;
              var G__10095 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10094, G__10095) : f.call(null, G__10094, G__10095);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__10106 = j + 1;
              var G__10107 = init__$3;
              j = G__10106;
              init__$2 = G__10107;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10108 = i + len;
        var G__10109 = init__$2;
        i = G__10108;
        init__$1 = G__10109;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0, null);
    } else {
      var G__10096 = coll__$1;
      var G__10097 = cljs.core.first_array_for_longvec(coll__$1);
      var G__10098 = 0;
      var G__10099 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10096, G__10097, G__10098, G__10099) : cljs.core.chunked_seq.call(null, G__10096, G__10097, G__10098, G__10099);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__7108__auto___10110 = len;
    var i_10111 = 0;
    while (true) {
      if (i_10111 < n__7108__auto___10110) {
        new_tail[i_10111] = self__.tail[i_10111];
        var G__10112 = i_10111 + 1;
        i_10111 = G__10112;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__10113 = null;
  var G__10113__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10113__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10113 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10113__2.call(this, self__, k);
      case 3:
        return G__10113__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10113.cljs$core$IFn$_invoke$arity$2 = G__10113__2;
  G__10113.cljs$core$IFn$_invoke$arity$3 = G__10113__3;
  return G__10113;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args10090) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10090)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__10114 = i + 1;
        var G__10115 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__10114;
        out = G__10115;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10117 = arguments.length;
  var i__7264__auto___10118 = 0;
  while (true) {
    if (i__7264__auto___10118 < len__7263__auto___10117) {
      args__7270__auto__.push(arguments[i__7264__auto___10118]);
      var G__10119 = i__7264__auto___10118 + 1;
      i__7264__auto___10118 = G__10119;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq10116) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10116));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.indexOf = function() {
  var G__10142 = null;
  var G__10142__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10142__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10142 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10142__1.call(this, x);
      case 2:
        return G__10142__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10142.cljs$core$IFn$_invoke$arity$1 = G__10142__1;
  G__10142.cljs$core$IFn$_invoke$arity$2 = G__10142__2;
  return G__10142;
}();
cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
  var G__10143 = null;
  var G__10143__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10143__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10143 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10143__1.call(this, x);
      case 2:
        return G__10143__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10143.cljs$core$IFn$_invoke$arity$1 = G__10143__1;
  G__10143.cljs$core$IFn$_invoke$arity$2 = G__10143__2;
  return G__10143;
}();
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10120 = self__.vec;
      var G__10121 = self__.node;
      var G__10122 = self__.i;
      var G__10123 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10120, G__10121, G__10122, G__10123) : cljs.core.chunked_seq.call(null, G__10120, G__10121, G__10122, G__10123);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10124 = self__.vec;
    var G__10125 = self__.i + self__.off;
    var G__10126 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10124, G__10125, G__10126) : cljs.core.subvec.call(null, G__10124, G__10125, G__10126);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10127 = self__.vec;
    var G__10128 = self__.i + self__.off;
    var G__10129 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10127, G__10128, G__10129) : cljs.core.subvec.call(null, G__10127, G__10128, G__10129);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10130 = self__.vec;
      var G__10131 = self__.node;
      var G__10132 = self__.i;
      var G__10133 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10130, G__10131, G__10132, G__10133) : cljs.core.chunked_seq.call(null, G__10130, G__10131, G__10132, G__10133);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10134 = self__.vec;
    var G__10135 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10136 = end;
    var G__10137 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10134, G__10135, G__10136, G__10137) : cljs.core.chunked_seq.call(null, G__10134, G__10135, G__10136, G__10137);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10138 = self__.vec;
    var G__10139 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10140 = end;
    var G__10141 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10138, G__10139, G__10140, G__10141) : cljs.core.chunked_seq.call(null, G__10138, G__10139, G__10140, G__10141);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args10144 = [];
  var len__7263__auto___10147 = arguments.length;
  var i__7264__auto___10148 = 0;
  while (true) {
    if (i__7264__auto___10148 < len__7263__auto___10147) {
      args10144.push(arguments[i__7264__auto___10148]);
      var G__10149 = i__7264__auto___10148 + 1;
      i__7264__auto___10148 = G__10149;
      continue;
    } else {
    }
    break;
  }
  var G__10146 = args10144.length;
  switch(G__10146) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10144.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.indexOf = function() {
  var G__10171 = null;
  var G__10171__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10171__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__10171 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__10171__1.call(this, x);
      case 2:
        return G__10171__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10171.cljs$core$IFn$_invoke$arity$1 = G__10171__1;
  G__10171.cljs$core$IFn$_invoke$arity$2 = G__10171__2;
  return G__10171;
}();
cljs.core.Subvec.prototype.lastIndexOf = function() {
  var G__10172 = null;
  var G__10172__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10172__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__10172 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__10172__1.call(this, x);
      case 2:
        return G__10172__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10172.cljs$core$IFn$_invoke$arity$1 = G__10172__1;
  G__10172.cljs$core$IFn$_invoke$arity$2 = G__10172__2;
  return G__10172;
}();
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__10152 = init__$1;
        var G__10153 = j;
        var G__10154 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10152, G__10153, G__10154) : f.call(null, G__10152, G__10153, G__10154);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10173 = i + 1;
        var G__10174 = j + 1;
        var G__10175 = init__$2;
        i = G__10173;
        j = G__10174;
        init__$1 = G__10175;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__10155 = self__.meta;
  var G__10156 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__10157 = self__.start;
  var G__10158 = function() {
    var x__6524__auto__ = self__.end;
    var y__6525__auto__ = v_pos + 1;
    return x__6524__auto__ > y__6525__auto__ ? x__6524__auto__ : y__6525__auto__;
  }();
  var G__10159 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10155, G__10156, G__10157, G__10158, G__10159) : cljs.core.build_subvec.call(null, G__10155, G__10156, G__10157, G__10158, G__10159);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__10160 = self__.meta;
    var G__10161 = self__.v;
    var G__10162 = self__.start;
    var G__10163 = self__.end - 1;
    var G__10164 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10160, G__10161, G__10162, G__10163, G__10164) : cljs.core.build_subvec.call(null, G__10160, G__10161, G__10162, G__10163, G__10164);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__10166 = self__.meta;
  var G__10167 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__10168 = self__.start;
  var G__10169 = self__.end + 1;
  var G__10170 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10166, G__10167, G__10168, G__10169, G__10170) : cljs.core.build_subvec.call(null, G__10166, G__10167, G__10168, G__10169, G__10170);
};
cljs.core.Subvec.prototype.call = function() {
  var G__10176 = null;
  var G__10176__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10176__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10176 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10176__2.call(this, self__, k);
      case 3:
        return G__10176__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10176.cljs$core$IFn$_invoke$arity$2 = G__10176__2;
  G__10176.cljs$core$IFn$_invoke$arity$3 = G__10176__3;
  return G__10176;
}();
cljs.core.Subvec.prototype.apply = function(self__, args10151) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10151)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__10177 = meta;
      var G__10178 = v.v;
      var G__10179 = v.start + start;
      var G__10180 = v.start + end;
      var G__10181 = __hash;
      meta = G__10177;
      v = G__10178;
      start = G__10179;
      end = G__10180;
      __hash = G__10181;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args10182 = [];
  var len__7263__auto___10185 = arguments.length;
  var i__7264__auto___10186 = 0;
  while (true) {
    if (i__7264__auto___10186 < len__7263__auto___10185) {
      args10182.push(arguments[i__7264__auto___10186]);
      var G__10187 = i__7264__auto___10186 + 1;
      i__7264__auto___10186 = G__10187;
      continue;
    } else {
    }
    break;
  }
  var G__10184 = args10182.length;
  switch(G__10184) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10182.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__10200 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__10201 = level - 5;
        node = G__10200;
        level = G__10201;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__10205 = null;
  var G__10205__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10205__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10205 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10205__2.call(this, self__, k);
      case 3:
        return G__10205__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10205.cljs$core$IFn$_invoke$arity$2 = G__10205__2;
  G__10205.cljs$core$IFn$_invoke$arity$3 = G__10205__3;
  return G__10205;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args10202) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10202)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__6193__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    var and__6181__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__6181__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__6181__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
  var G__10206 = null;
  var G__10206__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10206__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10206 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10206__1.call(this, x);
      case 2:
        return G__10206__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10206.cljs$core$IFn$_invoke$arity$1 = G__10206__1;
  G__10206.cljs$core$IFn$_invoke$arity$2 = G__10206__2;
  return G__10206;
}();
cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
  var G__10207 = null;
  var G__10207__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10207__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10207 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10207__1.call(this, x);
      case 2:
        return G__10207__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10207.cljs$core$IFn$_invoke$arity$1 = G__10207__1;
  G__10207.cljs$core$IFn$_invoke$arity$2 = G__10207__2;
  return G__10207;
}();
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.indexOf = function() {
  var G__10208 = null;
  var G__10208__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10208__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10208 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10208__1.call(this, x);
      case 2:
        return G__10208__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10208.cljs$core$IFn$_invoke$arity$1 = G__10208__1;
  G__10208.cljs$core$IFn$_invoke$arity$2 = G__10208__2;
  return G__10208;
}();
cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
  var G__10209 = null;
  var G__10209__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null, coll));
  };
  var G__10209__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10209 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10209__1.call(this, x);
      case 2:
        return G__10209__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10209.cljs$core$IFn$_invoke$arity$1 = G__10209__1;
  G__10209.cljs$core$IFn$_invoke$arity$2 = G__10209__2;
  return G__10209;
}();
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__6193__auto__ = self__.front;
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__6193__auto__ = self__.rear;
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__10210 = i + incr;
        i = G__10210;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__10211 = i + 1;
      var G__10212 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__10211;
      out = G__10212;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_10217 = 0;
  while (true) {
    if (i_10217 < l) {
      var k_10218 = ks[i_10217];
      new_obj[k_10218] = obj[k_10218];
      var G__10219 = i_10217 + 1;
      i_10217 = G__10219;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__10222 = init__$1;
        var G__10223 = k;
        var G__10224 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10222, G__10223, G__10224) : f.call(null, G__10222, G__10223, G__10224);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10225 = cljs.core.rest(keys__$1);
        var G__10226 = init__$2;
        keys__$1 = G__10225;
        init__$1 = G__10226;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__10220_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10220_SHARP_, self__.strobj[p1__10220_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__10227 = null;
  var G__10227__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10227__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10227 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10227__2.call(this, self__, k);
      case 3:
        return G__10227__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10227.cljs$core$IFn$_invoke$arity$2 = G__10227__2;
  G__10227.cljs$core$IFn$_invoke$arity$3 = G__10227__3;
  return G__10227;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args10221) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10221)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__6193__auto__ = self__.i < self__.base_count;
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__10230 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10230, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10230, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__10231 = i + 2;
        i = G__10231;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__10232 = i + 2;
        i = G__10232;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__10233 = i + 2;
        i = G__10233;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__10234 = i + 2;
        i = G__10234;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__10235 = i + 2;
        i = G__10235;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_10236 = 0;
  while (true) {
    if (i_10236 < l) {
      narr[i_10236] = arr[i_10236];
      var G__10237 = i_10236 + 1;
      i_10236 = G__10237;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
  var G__10238 = null;
  var G__10238__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10238__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10238 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10238__1.call(this, x);
      case 2:
        return G__10238__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10238.cljs$core$IFn$_invoke$arity$1 = G__10238__1;
  G__10238.cljs$core$IFn$_invoke$arity$2 = G__10238__2;
  return G__10238;
}();
cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
  var G__10239 = null;
  var G__10239__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10239__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10239 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10239__1.call(this, x);
      case 2:
        return G__10239__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10239.cljs$core$IFn$_invoke$arity$1 = G__10239__1;
  G__10239.cljs$core$IFn$_invoke$arity$2 = G__10239__2;
  return G__10239;
}();
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10241 = cljs.core.seq(coll);
  var chunk__10242 = null;
  var count__10243 = 0;
  var i__10244 = 0;
  while (true) {
    if (i__10244 < count__10243) {
      var vec__10245 = chunk__10242.cljs$core$IIndexed$_nth$arity$2(null, i__10244);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10245, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10245, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10254 = seq__10241;
      var G__10255 = chunk__10242;
      var G__10256 = count__10243;
      var G__10257 = i__10244 + 1;
      seq__10241 = G__10254;
      chunk__10242 = G__10255;
      count__10243 = G__10256;
      i__10244 = G__10257;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10241);
      if (temp__4425__auto__) {
        var seq__10241__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10241__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10241__$1);
          var G__10258 = cljs.core.chunk_rest(seq__10241__$1);
          var G__10259 = c__7004__auto__;
          var G__10260 = cljs.core.count(c__7004__auto__);
          var G__10261 = 0;
          seq__10241 = G__10258;
          chunk__10242 = G__10259;
          count__10243 = G__10260;
          i__10244 = G__10261;
          continue;
        } else {
          var vec__10246 = cljs.core.first(seq__10241__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10246, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10246, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10262 = cljs.core.next(seq__10241__$1);
          var G__10263 = null;
          var G__10264 = 0;
          var G__10265 = 0;
          seq__10241 = G__10262;
          chunk__10242 = G__10263;
          count__10243 = G__10264;
          i__10244 = G__10265;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__10247 = init__$1;
        var G__10248 = self__.arr[i];
        var G__10249 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10247, G__10248, G__10249) : f.call(null, G__10247, G__10248, G__10249);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10266 = i + 2;
        var G__10267 = init__$2;
        i = G__10266;
        init__$1 = G__10267;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__10268 = i + 2;
              i = G__10268;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__10269 = s + 2;
            var G__10270 = d;
            s = G__10269;
            d = G__10270;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__10271 = s + 2;
            var G__10272 = d + 2;
            s = G__10271;
            d = G__10272;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__10253 = cljs.core.aclone(self__.arr);
        G__10253[idx + 1] = v;
        return G__10253;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10273 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10274 = cljs.core.next(es);
          ret = G__10273;
          es = G__10274;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__10275 = null;
  var G__10275__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10275__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10275 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10275__2.call(this, self__, k);
      case 3:
        return G__10275__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10275.cljs$core$IFn$_invoke$arity$2 = G__10275__2;
  G__10275.cljs$core$IFn$_invoke$arity$3 = G__10275__3;
  return G__10275;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args10240) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10240)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_10276 = 0;
    while (true) {
      if (i_10276 < arr__$1.length) {
        var k_10277 = arr__$1[i_10276];
        var v_10278 = arr__$1[i_10276 + 1];
        var idx_10279 = cljs.core.array_index_of(ret, k_10277);
        if (idx_10279 === -1) {
          ret.push(k_10277);
          ret.push(v_10278);
        } else {
        }
        var G__10280 = i_10276 + 2;
        i_10276 = G__10280;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__10283 = cljs.core.next(es);
          var G__10284 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__10283;
          tcoll__$2 = G__10284;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__10282_10285 = self__.arr;
      G__10282_10285.pop();
      G__10282_10285.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__10286 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__10287 = i + 2;
      out = G__10286;
      i = G__10287;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args10288 = [];
  var len__7263__auto___10293 = arguments.length;
  var i__7264__auto___10294 = 0;
  while (true) {
    if (i__7264__auto___10294 < len__7263__auto___10293) {
      args10288.push(arguments[i__7264__auto___10294]);
      var G__10295 = i__7264__auto___10294 + 1;
      i__7264__auto___10294 = G__10295;
      continue;
    } else {
    }
    break;
  }
  var G__10290 = args10288.length;
  switch(G__10290) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10288.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__10291 = cljs.core.aclone(arr);
  G__10291[i] = a;
  return G__10291;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__10292 = cljs.core.aclone(arr);
  G__10292[i] = a;
  G__10292[j] = b;
  return G__10292;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args10297 = [];
  var len__7263__auto___10300 = arguments.length;
  var i__7264__auto___10301 = 0;
  while (true) {
    if (i__7264__auto___10301 < len__7263__auto___10300) {
      args10297.push(arguments[i__7264__auto___10301]);
      var G__10302 = i__7264__auto___10301 + 1;
      i__7264__auto___10301 = G__10302;
      continue;
    } else {
    }
    break;
  }
  var G__10299 = args10297.length;
  switch(G__10299) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10297.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__10307 = init__$1;
          var G__10308 = k;
          var G__10309 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10307, G__10308, G__10309) : f.call(null, G__10307, G__10308, G__10309);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10310 = i + 2;
        var G__10311 = init__$2;
        i = G__10310;
        init__$1 = G__10311;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__6193__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    var or__6193__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__6193__auto____$1) {
      return or__6193__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_10325 = 0;
        var j_10326 = 0;
        while (true) {
          if (i_10325 < 32) {
            if ((self__.bitmap >>> i_10325 & 1) === 0) {
              var G__10327 = i_10325 + 1;
              var G__10328 = j_10326;
              i_10325 = G__10327;
              j_10326 = G__10328;
              continue;
            } else {
              nodes[i_10325] = !(self__.arr[j_10326] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_10326]), self__.arr[j_10326], self__.arr[j_10326 + 1], added_leaf_QMARK_) : self__.arr[j_10326 + 1];
              var G__10329 = i_10325 + 1;
              var G__10330 = j_10326 + 2;
              i_10325 = G__10329;
              j_10326 = G__10330;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__10312 = edit__$1;
          var G__10313 = shift + 5;
          var G__10314 = key_or_nil;
          var G__10315 = val_or_node;
          var G__10316 = hash;
          var G__10317 = key;
          var G__10318 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__10312, G__10313, G__10314, G__10315, G__10316, G__10317, G__10318) : cljs.core.create_node.call(null, G__10312, G__10313, G__10314, G__10315, G__10316, G__10317, G__10318);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_10331 = 0;
      var j_10332 = 0;
      while (true) {
        if (i_10331 < 32) {
          if ((self__.bitmap >>> i_10331 & 1) === 0) {
            var G__10333 = i_10331 + 1;
            var G__10334 = j_10332;
            i_10331 = G__10333;
            j_10332 = G__10334;
            continue;
          } else {
            nodes[i_10331] = !(self__.arr[j_10332] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_10332]), self__.arr[j_10332], self__.arr[j_10332 + 1], added_leaf_QMARK_) : self__.arr[j_10332 + 1];
            var G__10335 = i_10331 + 1;
            var G__10336 = j_10332 + 2;
            i_10331 = G__10335;
            j_10332 = G__10336;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__10319 = shift + 5;
          var G__10320 = key_or_nil;
          var G__10321 = val_or_node;
          var G__10322 = hash;
          var G__10323 = key;
          var G__10324 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__10319, G__10320, G__10321, G__10322, G__10323, G__10324) : cljs.core.create_node.call(null, G__10319, G__10320, G__10321, G__10322, G__10323, G__10324);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__10337 = i + 1;
        var G__10338 = j + 2;
        var G__10339 = bitmap | 1 << i;
        i = G__10337;
        j = G__10338;
        bitmap = G__10339;
        continue;
      } else {
        var G__10340 = i + 1;
        var G__10341 = j;
        var G__10342 = bitmap;
        i = G__10340;
        j = G__10341;
        bitmap = G__10342;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__10343 = i + 1;
          var G__10344 = init__$2;
          i = G__10343;
          init__$1 = G__10344;
          continue;
        }
      } else {
        var G__10345 = i + 1;
        var G__10346 = init__$1;
        i = G__10345;
        init__$1 = G__10346;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__10347 = i + 2;
        i = G__10347;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args10348 = [];
  var len__7263__auto___10351 = arguments.length;
  var i__7264__auto___10352 = 0;
  while (true) {
    if (i__7264__auto___10352 < len__7263__auto___10351) {
      args10348.push(arguments[i__7264__auto___10352]);
      var G__10353 = i__7264__auto___10352 + 1;
      i__7264__auto___10352 = G__10353;
      continue;
    } else {
    }
    break;
  }
  var G__10350 = args10348.length;
  switch(G__10350) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10348.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.indexOf = function() {
  var G__10361 = null;
  var G__10361__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10361__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10361 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10361__1.call(this, x);
      case 2:
        return G__10361__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10361.cljs$core$IFn$_invoke$arity$1 = G__10361__1;
  G__10361.cljs$core$IFn$_invoke$arity$2 = G__10361__2;
  return G__10361;
}();
cljs.core.NodeSeq.prototype.lastIndexOf = function() {
  var G__10362 = null;
  var G__10362__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10362__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10362 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10362__1.call(this, x);
      case 2:
        return G__10362__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10362.cljs$core$IFn$_invoke$arity$1 = G__10362__1;
  G__10362.cljs$core$IFn$_invoke$arity$2 = G__10362__2;
  return G__10362;
}();
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__10355 = self__.nodes;
    var G__10356 = self__.i + 2;
    var G__10357 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10355, G__10356, G__10357) : cljs.core.create_inode_seq.call(null, G__10355, G__10356, G__10357);
  } else {
    var G__10358 = self__.nodes;
    var G__10359 = self__.i;
    var G__10360 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10358, G__10359, G__10360) : cljs.core.create_inode_seq.call(null, G__10358, G__10359, G__10360);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args10363 = [];
  var len__7263__auto___10366 = arguments.length;
  var i__7264__auto___10367 = 0;
  while (true) {
    if (i__7264__auto___10367 < len__7263__auto___10366) {
      args10363.push(arguments[i__7264__auto___10367]);
      var G__10368 = i__7264__auto___10367 + 1;
      i__7264__auto___10367 = G__10368;
      continue;
    } else {
    }
    break;
  }
  var G__10365 = args10363.length;
  switch(G__10365) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10363.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__10370 = j + 2;
              j = G__10370;
              continue;
            }
          } else {
            var G__10371 = j + 2;
            j = G__10371;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
  var G__10376 = null;
  var G__10376__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10376__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10376 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10376__1.call(this, x);
      case 2:
        return G__10376__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10376.cljs$core$IFn$_invoke$arity$1 = G__10376__1;
  G__10376.cljs$core$IFn$_invoke$arity$2 = G__10376__2;
  return G__10376;
}();
cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
  var G__10377 = null;
  var G__10377__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10377__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10377 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10377__1.call(this, x);
      case 2:
        return G__10377__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10377.cljs$core$IFn$_invoke$arity$1 = G__10377__1;
  G__10377.cljs$core$IFn$_invoke$arity$2 = G__10377__2;
  return G__10377;
}();
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__10372 = null;
  var G__10373 = self__.nodes;
  var G__10374 = self__.i;
  var G__10375 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__10372, G__10373, G__10374, G__10375) : cljs.core.create_array_node_seq.call(null, G__10372, G__10373, G__10374, G__10375);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args10378 = [];
  var len__7263__auto___10381 = arguments.length;
  var i__7264__auto___10382 = 0;
  while (true) {
    if (i__7264__auto___10382 < len__7263__auto___10381) {
      args10378.push(arguments[i__7264__auto___10382]);
      var G__10383 = i__7264__auto___10382 + 1;
      i__7264__auto___10382 = G__10383;
      continue;
    } else {
    }
    break;
  }
  var G__10380 = args10378.length;
  switch(G__10380) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10378.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__10385 = j + 1;
            j = G__10385;
            continue;
          }
        } else {
          var G__10386 = j + 1;
          j = G__10386;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10388 = cljs.core.seq(coll);
  var chunk__10389 = null;
  var count__10390 = 0;
  var i__10391 = 0;
  while (true) {
    if (i__10391 < count__10390) {
      var vec__10392 = chunk__10389.cljs$core$IIndexed$_nth$arity$2(null, i__10391);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10392, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10392, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10396 = seq__10388;
      var G__10397 = chunk__10389;
      var G__10398 = count__10390;
      var G__10399 = i__10391 + 1;
      seq__10388 = G__10396;
      chunk__10389 = G__10397;
      count__10390 = G__10398;
      i__10391 = G__10399;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10388);
      if (temp__4425__auto__) {
        var seq__10388__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10388__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10388__$1);
          var G__10400 = cljs.core.chunk_rest(seq__10388__$1);
          var G__10401 = c__7004__auto__;
          var G__10402 = cljs.core.count(c__7004__auto__);
          var G__10403 = 0;
          seq__10388 = G__10400;
          chunk__10389 = G__10401;
          count__10390 = G__10402;
          i__10391 = G__10403;
          continue;
        } else {
          var vec__10393 = cljs.core.first(seq__10388__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10393, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10393, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10404 = cljs.core.next(seq__10388__$1);
          var G__10405 = null;
          var G__10406 = 0;
          var G__10407 = 0;
          seq__10388 = G__10404;
          chunk__10389 = G__10405;
          count__10390 = G__10406;
          i__10391 = G__10407;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10408 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10409 = cljs.core.next(es);
          ret = G__10408;
          es = G__10409;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__10410 = null;
  var G__10410__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10410__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10410 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10410__2.call(this, self__, k);
      case 3:
        return G__10410__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10410.cljs$core$IFn$_invoke$arity$2 = G__10410__2;
  G__10410.cljs$core$IFn$_invoke$arity$3 = G__10410__3;
  return G__10410;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args10387) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10387)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10411 = i + 2;
      var G__10412 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__10411;
      ret = G__10412;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10413 = i + 1;
      var G__10414 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__10413;
      out = G__10414;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__10416 = cljs.core.next(es);
          var G__10417 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__10416;
          tcoll__$1 = G__10417;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__10418 = ascending_QMARK_ ? t.left : t.right;
      var G__10419 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__10418;
      stack__$1 = G__10419;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
  var G__10420 = null;
  var G__10420__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10420__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10420 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10420__1.call(this, x);
      case 2:
        return G__10420__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10420.cljs$core$IFn$_invoke$arity$1 = G__10420__1;
  G__10420.cljs$core$IFn$_invoke$arity$2 = G__10420__2;
  return G__10420;
}();
cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
  var G__10421 = null;
  var G__10421__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10421__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10421 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10421__1.call(this, x);
      case 2:
        return G__10421__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10421.cljs$core$IFn$_invoke$arity$1 = G__10421__1;
  G__10421.cljs$core$IFn$_invoke$arity$2 = G__10421__2;
  return G__10421;
}();
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__10431 = init__$1;
      var G__10432 = node.key;
      var G__10433 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10431, G__10432, G__10433) : f.call(null, G__10431, G__10432, G__10433);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.lastIndexOf = function() {
  var G__10435 = null;
  var G__10435__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10435__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10435 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10435__1.call(this, x);
      case 2:
        return G__10435__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10435.cljs$core$IFn$_invoke$arity$1 = G__10435__1;
  G__10435.cljs$core$IFn$_invoke$arity$2 = G__10435__2;
  return G__10435;
}();
cljs.core.BlackNode.prototype.indexOf = function() {
  var G__10436 = null;
  var G__10436__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10436__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10436 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10436__1.call(this, x);
      case 2:
        return G__10436__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10436.cljs$core$IFn$_invoke$arity$1 = G__10436__1;
  G__10436.cljs$core$IFn$_invoke$arity$2 = G__10436__2;
  return G__10436;
}();
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__7027__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__7027__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__7027__auto____$1);
  }(), x__7027__auto__);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__10437 = null;
  var G__10437__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10437__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10437 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10437__2.call(this, self__, k);
      case 3:
        return G__10437__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10437.cljs$core$IFn$_invoke$arity$2 = G__10437__2;
  G__10437.cljs$core$IFn$_invoke$arity$3 = G__10437__3;
  return G__10437;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args10434) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10434)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.lastIndexOf = function() {
  var G__10439 = null;
  var G__10439__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10439__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10439 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10439__1.call(this, x);
      case 2:
        return G__10439__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10439.cljs$core$IFn$_invoke$arity$1 = G__10439__1;
  G__10439.cljs$core$IFn$_invoke$arity$2 = G__10439__2;
  return G__10439;
}();
cljs.core.RedNode.prototype.indexOf = function() {
  var G__10440 = null;
  var G__10440__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10440__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10440 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10440__1.call(this, x);
      case 2:
        return G__10440__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10440.cljs$core$IFn$_invoke$arity$1 = G__10440__1;
  G__10440.cljs$core$IFn$_invoke$arity$2 = G__10440__2;
  return G__10440;
}();
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__7027__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__7027__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__7027__auto____$1);
  }(), x__7027__auto__);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__10441 = null;
  var G__10441__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10441__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10441 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10441__2.call(this, self__, k);
      case 3:
        return G__10441__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10441.cljs$core$IFn$_invoke$arity$2 = G__10441__2;
  G__10441.cljs$core$IFn$_invoke$arity$3 = G__10441__3;
  return G__10441;
}();
cljs.core.RedNode.prototype.apply = function(self__, args10438) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10438)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__10454 = k;
      var G__10455 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10454, G__10455) : comp.call(null, G__10454, G__10455);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__10474 = k;
      var G__10475 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10474, G__10475) : comp.call(null, G__10474, G__10475);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10485 = cljs.core.seq(coll);
  var chunk__10486 = null;
  var count__10487 = 0;
  var i__10488 = 0;
  while (true) {
    if (i__10488 < count__10487) {
      var vec__10489 = chunk__10486.cljs$core$IIndexed$_nth$arity$2(null, i__10488);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10489, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10489, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10495 = seq__10485;
      var G__10496 = chunk__10486;
      var G__10497 = count__10487;
      var G__10498 = i__10488 + 1;
      seq__10485 = G__10495;
      chunk__10486 = G__10496;
      count__10487 = G__10497;
      i__10488 = G__10498;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10485);
      if (temp__4425__auto__) {
        var seq__10485__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10485__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10485__$1);
          var G__10499 = cljs.core.chunk_rest(seq__10485__$1);
          var G__10500 = c__7004__auto__;
          var G__10501 = cljs.core.count(c__7004__auto__);
          var G__10502 = 0;
          seq__10485 = G__10499;
          chunk__10486 = G__10500;
          count__10487 = G__10501;
          i__10488 = G__10502;
          continue;
        } else {
          var vec__10490 = cljs.core.first(seq__10485__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10490, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10490, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10503 = cljs.core.next(seq__10485__$1);
          var G__10504 = null;
          var G__10505 = 0;
          var G__10506 = 0;
          seq__10485 = G__10503;
          chunk__10486 = G__10504;
          count__10487 = G__10505;
          i__10488 = G__10506;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__10491 = k;
        var G__10492 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10491, G__10492) : self__.comp.call(null, G__10491, G__10492);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__10507 = t.left;
          t = G__10507;
          continue;
        } else {
          var G__10508 = t.right;
          t = G__10508;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10509 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10510 = cljs.core.next(es);
          ret = G__10509;
          es = G__10510;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__10511 = null;
  var G__10511__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10511__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10511 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10511__2.call(this, self__, k);
      case 3:
        return G__10511__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10511.cljs$core$IFn$_invoke$arity$2 = G__10511__2;
  G__10511.cljs$core$IFn$_invoke$arity$3 = G__10511__3;
  return G__10511;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args10484) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10484)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__10493 = k;
          var G__10494 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10493, G__10494) : self__.comp.call(null, G__10493, G__10494);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__10512 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10513 = t.left;
              stack = G__10512;
              t = G__10513;
              continue;
            } else {
              var G__10514 = stack;
              var G__10515 = t.right;
              stack = G__10514;
              t = G__10515;
              continue;
            }
          } else {
            if (c > 0) {
              var G__10516 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10517 = t.right;
              stack = G__10516;
              t = G__10517;
              continue;
            } else {
              var G__10518 = stack;
              var G__10519 = t.left;
              stack = G__10518;
              t = G__10519;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10521 = arguments.length;
  var i__7264__auto___10522 = 0;
  while (true) {
    if (i__7264__auto___10522 < len__7263__auto___10521) {
      args__7270__auto__.push(arguments[i__7264__auto___10522]);
      var G__10523 = i__7264__auto___10522 + 1;
      i__7264__auto___10522 = G__10523;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__10524 = cljs.core.nnext(in$);
      var G__10525 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10524;
      out = G__10525;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq10520) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10520));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10527 = arguments.length;
  var i__7264__auto___10528 = 0;
  while (true) {
    if (i__7264__auto___10528 < len__7263__auto___10527) {
      args__7270__auto__.push(arguments[i__7264__auto___10528]);
      var G__10529 = i__7264__auto___10528 + 1;
      i__7264__auto___10528 = G__10529;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq10526) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10526));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10533 = arguments.length;
  var i__7264__auto___10534 = 0;
  while (true) {
    if (i__7264__auto___10534 < len__7263__auto___10533) {
      args__7270__auto__.push(arguments[i__7264__auto___10534]);
      var G__10535 = i__7264__auto___10534 + 1;
      i__7264__auto___10534 = G__10535;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__10536 = cljs.core.nnext(kvs);
      kvs = G__10536;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq10530) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10530));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10538 = arguments.length;
  var i__7264__auto___10539 = 0;
  while (true) {
    if (i__7264__auto___10539 < len__7263__auto___10538) {
      args__7270__auto__.push(arguments[i__7264__auto___10539]);
      var G__10540 = i__7264__auto___10539 + 1;
      i__7264__auto___10539 = G__10540;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__10541 = cljs.core.nnext(in$);
      var G__10542 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10541;
      out = G__10542;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq10537) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10537));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10545 = arguments.length;
  var i__7264__auto___10546 = 0;
  while (true) {
    if (i__7264__auto___10546 < len__7263__auto___10545) {
      args__7270__auto__.push(arguments[i__7264__auto___10546]);
      var G__10547 = i__7264__auto___10546 + 1;
      i__7264__auto___10546 = G__10547;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__10548 = cljs.core.nnext(in$);
      var G__10549 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10548;
      out = G__10549;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq10543) {
  var G__10544 = cljs.core.first(seq10543);
  var seq10543__$1 = cljs.core.next(seq10543);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__10544, seq10543__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.indexOf = function() {
  var G__10552 = null;
  var G__10552__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10552__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10552 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10552__1.call(this, x);
      case 2:
        return G__10552__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10552.cljs$core$IFn$_invoke$arity$1 = G__10552__1;
  G__10552.cljs$core$IFn$_invoke$arity$2 = G__10552__2;
  return G__10552;
}();
cljs.core.KeySeq.prototype.lastIndexOf = function() {
  var G__10553 = null;
  var G__10553__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10553__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10553 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10553__1.call(this, x);
      case 2:
        return G__10553__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10553.cljs$core$IFn$_invoke$arity$1 = G__10553__1;
  G__10553.cljs$core$IFn$_invoke$arity$2 = G__10553__2;
  return G__10553;
}();
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.indexOf = function() {
  var G__10556 = null;
  var G__10556__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10556__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10556 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10556__1.call(this, x);
      case 2:
        return G__10556__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10556.cljs$core$IFn$_invoke$arity$1 = G__10556__1;
  G__10556.cljs$core$IFn$_invoke$arity$2 = G__10556__2;
  return G__10556;
}();
cljs.core.ValSeq.prototype.lastIndexOf = function() {
  var G__10557 = null;
  var G__10557__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10557__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10557 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10557__1.call(this, x);
      case 2:
        return G__10557__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10557.cljs$core$IFn$_invoke$arity$1 = G__10557__1;
  G__10557.cljs$core$IFn$_invoke$arity$2 = G__10557__2;
  return G__10557;
}();
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10561 = arguments.length;
  var i__7264__auto___10562 = 0;
  while (true) {
    if (i__7264__auto___10562 < len__7263__auto___10561) {
      args__7270__auto__.push(arguments[i__7264__auto___10562]);
      var G__10563 = i__7264__auto___10562 + 1;
      i__7264__auto___10562 = G__10563;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__10558_SHARP_, p2__10559_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__6193__auto__ = p1__10558_SHARP_;
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__10559_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq10560) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10560));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10568 = arguments.length;
  var i__7264__auto___10569 = 0;
  while (true) {
    if (i__7264__auto___10569 < len__7263__auto___10568) {
      args__7270__auto__.push(arguments[i__7264__auto___10569]);
      var G__10570 = i__7264__auto___10569 + 1;
      i__7264__auto___10569 = G__10570;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__10566 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__10567 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10566, G__10567) : f.call(null, G__10566, G__10567);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__6193__auto__ = m1;
          if (cljs.core.truth_(or__6193__auto__)) {
            return or__6193__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq10564) {
  var G__10565 = cljs.core.first(seq10564);
  var seq10564__$1 = cljs.core.next(seq10564);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__10565, seq10564__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__10571 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__10572 = cljs.core.next(keys);
      ret = G__10571;
      keys = G__10572;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10575 = cljs.core.seq(coll);
  var chunk__10576 = null;
  var count__10577 = 0;
  var i__10578 = 0;
  while (true) {
    if (i__10578 < count__10577) {
      var vec__10579 = chunk__10576.cljs$core$IIndexed$_nth$arity$2(null, i__10578);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10579, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10579, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10581 = seq__10575;
      var G__10582 = chunk__10576;
      var G__10583 = count__10577;
      var G__10584 = i__10578 + 1;
      seq__10575 = G__10581;
      chunk__10576 = G__10582;
      count__10577 = G__10583;
      i__10578 = G__10584;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10575);
      if (temp__4425__auto__) {
        var seq__10575__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10575__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10575__$1);
          var G__10585 = cljs.core.chunk_rest(seq__10575__$1);
          var G__10586 = c__7004__auto__;
          var G__10587 = cljs.core.count(c__7004__auto__);
          var G__10588 = 0;
          seq__10575 = G__10585;
          chunk__10576 = G__10586;
          count__10577 = G__10587;
          i__10578 = G__10588;
          continue;
        } else {
          var vec__10580 = cljs.core.first(seq__10575__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10580, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10580, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10589 = cljs.core.next(seq__10575__$1);
          var G__10590 = null;
          var G__10591 = 0;
          var G__10592 = 0;
          seq__10575 = G__10589;
          chunk__10576 = G__10590;
          count__10577 = G__10591;
          i__10578 = G__10592;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10573_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10573_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__10593 = null;
  var G__10593__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10593__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10593 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10593__2.call(this, self__, k);
      case 3:
        return G__10593__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10593.cljs$core$IFn$_invoke$arity$2 = G__10593__2;
  G__10593.cljs$core$IFn$_invoke$arity$3 = G__10593__3;
  return G__10593;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args10574) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10574)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10594 = i + 1;
        var G__10595 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__10594;
        out = G__10595;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10596 = i + 1;
        var G__10597 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10596;
        out = G__10597;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10599 = null;
  var G__10599__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10599__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10599 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10599__2.call(this, self__, k);
      case 3:
        return G__10599__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10599.cljs$core$IFn$_invoke$arity$2 = G__10599__2;
  G__10599.cljs$core$IFn$_invoke$arity$3 = G__10599__3;
  return G__10599;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10598) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10598)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10602 = cljs.core.seq(coll);
  var chunk__10603 = null;
  var count__10604 = 0;
  var i__10605 = 0;
  while (true) {
    if (i__10605 < count__10604) {
      var vec__10606 = chunk__10603.cljs$core$IIndexed$_nth$arity$2(null, i__10605);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10606, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10606, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10608 = seq__10602;
      var G__10609 = chunk__10603;
      var G__10610 = count__10604;
      var G__10611 = i__10605 + 1;
      seq__10602 = G__10608;
      chunk__10603 = G__10609;
      count__10604 = G__10610;
      i__10605 = G__10611;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10602);
      if (temp__4425__auto__) {
        var seq__10602__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10602__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10602__$1);
          var G__10612 = cljs.core.chunk_rest(seq__10602__$1);
          var G__10613 = c__7004__auto__;
          var G__10614 = cljs.core.count(c__7004__auto__);
          var G__10615 = 0;
          seq__10602 = G__10612;
          chunk__10603 = G__10613;
          count__10604 = G__10614;
          i__10605 = G__10615;
          continue;
        } else {
          var vec__10607 = cljs.core.first(seq__10602__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10607, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10607, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10616 = cljs.core.next(seq__10602__$1);
          var G__10617 = null;
          var G__10618 = 0;
          var G__10619 = 0;
          seq__10602 = G__10616;
          chunk__10603 = G__10617;
          count__10604 = G__10618;
          i__10605 = G__10619;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10600_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10600_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10620 = null;
  var G__10620__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10620__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10620 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10620__2.call(this, self__, k);
      case 3:
        return G__10620__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10620.cljs$core$IFn$_invoke$arity$2 = G__10620__2;
  G__10620.cljs$core$IFn$_invoke$arity$3 = G__10620__3;
  return G__10620;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10601) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10601)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__7102__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__7102__auto__.length) {
        var G__10621 = i + 1;
        var G__10622 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10621;
        res = G__10622;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10623 = cljs.core.next(in$__$1);
          var G__10624 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10623;
          out = G__10624;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args10625 = [];
  var len__7263__auto___10629 = arguments.length;
  var i__7264__auto___10630 = 0;
  while (true) {
    if (i__7264__auto___10630 < len__7263__auto___10629) {
      args10625.push(arguments[i__7264__auto___10630]);
      var G__10631 = i__7264__auto___10630 + 1;
      i__7264__auto___10630 = G__10631;
      continue;
    } else {
    }
    break;
  }
  var G__10628 = args10625.length;
  switch(G__10628) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10625.slice(0), 0, null);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__7282__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq10626) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10626));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10634 = arguments.length;
  var i__7264__auto___10635 = 0;
  while (true) {
    if (i__7264__auto___10635 < len__7263__auto___10634) {
      args__7270__auto__.push(arguments[i__7264__auto___10635]);
      var G__10636 = i__7264__auto___10635 + 1;
      i__7264__auto___10635 = G__10636;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq10633) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10633));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10639 = arguments.length;
  var i__7264__auto___10640 = 0;
  while (true) {
    if (i__7264__auto___10640 < len__7263__auto___10639) {
      args__7270__auto__.push(arguments[i__7264__auto___10640]);
      var G__10641 = i__7264__auto___10640 + 1;
      i__7264__auto___10640 = G__10641;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq10637) {
  var G__10638 = cljs.core.first(seq10637);
  var seq10637__$1 = cljs.core.next(seq10637);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__10638, seq10637__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args10644 = [];
  var len__7263__auto___10647 = arguments.length;
  var i__7264__auto___10648 = 0;
  while (true) {
    if (i__7264__auto___10648 < len__7263__auto___10647) {
      args10644.push(arguments[i__7264__auto___10648]);
      var G__10649 = i__7264__auto___10648 + 1;
      i__7264__auto___10648 = G__10649;
      continue;
    } else {
    }
    break;
  }
  var G__10646 = args10644.length;
  switch(G__10646) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10644.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10642_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__10642_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__10642_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10643_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__10643_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__10643_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args10651 = [];
  var len__7263__auto___10660 = arguments.length;
  var i__7264__auto___10661 = 0;
  while (true) {
    if (i__7264__auto___10661 < len__7263__auto___10660) {
      args10651.push(arguments[i__7264__auto___10661]);
      var G__10662 = i__7264__auto___10661 + 1;
      i__7264__auto___10661 = G__10662;
      continue;
    } else {
    }
    break;
  }
  var G__10653 = args10651.length;
  switch(G__10653) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10651.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__10664 = null;
        var G__10664__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10664__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10664__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__10664 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10664__0.call(this);
            case 1:
              return G__10664__1.call(this, result);
            case 2:
              return G__10664__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10664.cljs$core$IFn$_invoke$arity$0 = G__10664__0;
        G__10664.cljs$core$IFn$_invoke$arity$1 = G__10664__1;
        G__10664.cljs$core$IFn$_invoke$arity$2 = G__10664__2;
        return G__10664;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__10658, seen__$1) {
        while (true) {
          var vec__10659 = p__10658;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10659, 0, null);
          var xs__$1 = vec__10659;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__10665 = cljs.core.rest(s);
              var G__10666 = seen__$1;
              p__10658 = G__10665;
              seen__$1 = G__10666;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10667 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10668 = cljs.core.next(s__$1);
      ret = G__10667;
      s__$1 = G__10668;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10671 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10672 = cljs.core.next(ks);
      var G__10673 = cljs.core.next(vs);
      map = G__10671;
      ks = G__10672;
      vs = G__10673;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args10676 = [];
  var len__7263__auto___10683 = arguments.length;
  var i__7264__auto___10684 = 0;
  while (true) {
    if (i__7264__auto___10684 < len__7263__auto___10683) {
      args10676.push(arguments[i__7264__auto___10684]);
      var G__10685 = i__7264__auto___10684 + 1;
      i__7264__auto___10684 = G__10685;
      continue;
    } else {
    }
    break;
  }
  var G__10682 = args10676.length;
  switch(G__10682) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10676.slice(3), 0, null);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10674_SHARP_, p2__10675_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10674_SHARP_, p2__10675_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq10677) {
  var G__10678 = cljs.core.first(seq10677);
  var seq10677__$1 = cljs.core.next(seq10677);
  var G__10679 = cljs.core.first(seq10677__$1);
  var seq10677__$2 = cljs.core.next(seq10677__$1);
  var G__10680 = cljs.core.first(seq10677__$2);
  var seq10677__$3 = cljs.core.next(seq10677__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__10678, G__10679, G__10680, seq10677__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args10689 = [];
  var len__7263__auto___10696 = arguments.length;
  var i__7264__auto___10697 = 0;
  while (true) {
    if (i__7264__auto___10697 < len__7263__auto___10696) {
      args10689.push(arguments[i__7264__auto___10697]);
      var G__10698 = i__7264__auto___10697 + 1;
      i__7264__auto___10697 = G__10698;
      continue;
    } else {
    }
    break;
  }
  var G__10695 = args10689.length;
  switch(G__10695) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10689.slice(3), 0, null);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10687_SHARP_, p2__10688_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10687_SHARP_, p2__10688_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq10690) {
  var G__10691 = cljs.core.first(seq10690);
  var seq10690__$1 = cljs.core.next(seq10690);
  var G__10692 = cljs.core.first(seq10690__$1);
  var seq10690__$2 = cljs.core.next(seq10690__$1);
  var G__10693 = cljs.core.first(seq10690__$2);
  var seq10690__$3 = cljs.core.next(seq10690__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__10691, G__10692, G__10693, seq10690__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args10700 = [];
  var len__7263__auto___10703 = arguments.length;
  var i__7264__auto___10704 = 0;
  while (true) {
    if (i__7264__auto___10704 < len__7263__auto___10703) {
      args10700.push(arguments[i__7264__auto___10704]);
      var G__10705 = i__7264__auto___10704 + 1;
      i__7264__auto___10704 = G__10705;
      continue;
    } else {
    }
    break;
  }
  var G__10702 = args10700.length;
  switch(G__10702) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10700.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__10707 = null;
        var G__10707__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10707__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10707__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__10707 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10707__0.call(this);
            case 1:
              return G__10707__1.call(this, result);
            case 2:
              return G__10707__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10707.cljs$core$IFn$_invoke$arity$0 = G__10707__0;
        G__10707.cljs$core$IFn$_invoke$arity$1 = G__10707__1;
        G__10707.cljs$core$IFn$_invoke$arity$2 = G__10707__2;
        return G__10707;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args10708 = [];
  var len__7263__auto___10712 = arguments.length;
  var i__7264__auto___10713 = 0;
  while (true) {
    if (i__7264__auto___10713 < len__7263__auto___10712) {
      args10708.push(arguments[i__7264__auto___10713]);
      var G__10714 = i__7264__auto___10713 + 1;
      i__7264__auto___10713 = G__10714;
      continue;
    } else {
    }
    break;
  }
  var G__10710 = args10708.length;
  switch(G__10710) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10708.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__10716 = null;
      var G__10716__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10716__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10716__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__10716 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10716__0.call(this);
          case 1:
            return G__10716__1.call(this, result);
          case 2:
            return G__10716__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10716.cljs$core$IFn$_invoke$arity$0 = G__10716__0;
      G__10716.cljs$core$IFn$_invoke$arity$1 = G__10716__1;
      G__10716.cljs$core$IFn$_invoke$arity$2 = G__10716__2;
      return G__10716;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__10711 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10711) : pred.call(null, G__10711);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10725 = function() {
      var G__10727 = cljs.core._entry_key(sc, e);
      var G__10728 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10727, G__10728) : comp.call(null, G__10727, G__10728);
    }();
    var G__10726 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10725, G__10726) : test.call(null, G__10725, G__10726);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args10729 = [];
  var len__7263__auto___10734 = arguments.length;
  var i__7264__auto___10735 = 0;
  while (true) {
    if (i__7264__auto___10735 < len__7263__auto___10734) {
      args10729.push(arguments[i__7264__auto___10735]);
      var G__10736 = i__7264__auto___10735 + 1;
      i__7264__auto___10735 = G__10736;
      continue;
    } else {
    }
    break;
  }
  var G__10731 = args10729.length;
  switch(G__10731) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10729.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__10732 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10732, 0, null);
      var s = vec__10732;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__10733 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10733, 0, null);
    var s = vec__10733;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args10738 = [];
  var len__7263__auto___10743 = arguments.length;
  var i__7264__auto___10744 = 0;
  while (true) {
    if (i__7264__auto___10744 < len__7263__auto___10743) {
      args10738.push(arguments[i__7264__auto___10744]);
      var G__10745 = i__7264__auto___10744 + 1;
      i__7264__auto___10744 = G__10745;
      continue;
    } else {
    }
    break;
  }
  var G__10740 = args10738.length;
  switch(G__10740) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10738.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__10741 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10741, 0, null);
      var s = vec__10741;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__10742 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10742, 0, null);
    var s = vec__10742;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.indexOf = function() {
  var G__10748 = null;
  var G__10748__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10748__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__10748 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__10748__1.call(this, x);
      case 2:
        return G__10748__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10748.cljs$core$IFn$_invoke$arity$1 = G__10748__1;
  G__10748.cljs$core$IFn$_invoke$arity$2 = G__10748__2;
  return G__10748;
}();
cljs.core.Range.prototype.lastIndexOf = function() {
  var G__10749 = null;
  var G__10749__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10749__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__10749 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__10749__1.call(this, x);
      case 2:
        return G__10749__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10749.cljs$core$IFn$_invoke$arity$1 = G__10749__1;
  G__10749.cljs$core$IFn$_invoke$arity$2 = G__10749__2;
  return G__10749;
}();
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10747 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__10747);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__10750 = i + self__.step;
        var G__10751 = ret__$1;
        i = G__10750;
        ret = G__10751;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args10752 = [];
  var len__7263__auto___10755 = arguments.length;
  var i__7264__auto___10756 = 0;
  while (true) {
    if (i__7264__auto___10756 < len__7263__auto___10755) {
      args10752.push(arguments[i__7264__auto___10756]);
      var G__10757 = i__7264__auto___10756 + 1;
      i__7264__auto___10756 = G__10757;
      continue;
    } else {
    }
    break;
  }
  var G__10754 = args10752.length;
  switch(G__10754) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10752.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args10759 = [];
  var len__7263__auto___10762 = arguments.length;
  var i__7264__auto___10763 = 0;
  while (true) {
    if (i__7264__auto___10763 < len__7263__auto___10762) {
      args10759.push(arguments[i__7264__auto___10763]);
      var G__10764 = i__7264__auto___10763 + 1;
      i__7264__auto___10763 = G__10764;
      continue;
    } else {
    }
    break;
  }
  var G__10761 = args10759.length;
  switch(G__10761) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10759.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__10766 = null;
        var G__10766__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10766__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10766__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__10766 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10766__0.call(this);
            case 1:
              return G__10766__1.call(this, result);
            case 2:
              return G__10766__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10766.cljs$core$IFn$_invoke$arity$0 = G__10766__0;
        G__10766.cljs$core$IFn$_invoke$arity$1 = G__10766__1;
        G__10766.cljs$core$IFn$_invoke$arity$2 = G__10766__2;
        return G__10766;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args10768 = [];
  var len__7263__auto___10771 = arguments.length;
  var i__7264__auto___10772 = 0;
  while (true) {
    if (i__7264__auto___10772 < len__7263__auto___10771) {
      args10768.push(arguments[i__7264__auto___10772]);
      var G__10773 = i__7264__auto___10772 + 1;
      i__7264__auto___10772 = G__10773;
      continue;
    } else {
    }
    break;
  }
  var G__10770 = args10768.length;
  switch(G__10770) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10768.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__10775 = null;
        var G__10775__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10775__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10775__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__10775 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10775__0.call(this);
            case 1:
              return G__10775__1.call(this, result);
            case 2:
              return G__10775__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10775.cljs$core$IFn$_invoke$arity$0 = G__10775__0;
        G__10775.cljs$core$IFn$_invoke$arity$1 = G__10775__1;
        G__10775.cljs$core$IFn$_invoke$arity$2 = G__10775__2;
        return G__10775;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__10767_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__10767_SHARP_) : f.call(null, p1__10767_SHARP_));
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args10776 = [];
  var len__7263__auto___10781 = arguments.length;
  var i__7264__auto___10782 = 0;
  while (true) {
    if (i__7264__auto___10782 < len__7263__auto___10781) {
      args10776.push(arguments[i__7264__auto___10782]);
      var G__10783 = i__7264__auto___10782 + 1;
      i__7264__auto___10782 = G__10783;
      continue;
    } else {
    }
    break;
  }
  var G__10778 = args10776.length;
  switch(G__10778) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10776.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      var x__7027__auto__ = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      return cljs.core._conj(cljs.core.List.EMPTY, x__7027__auto__);
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__10779 = init;
        var G__10780 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10779, G__10780) : f.call(null, G__10779, G__10780);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args10795 = [];
  var len__7263__auto___10802 = arguments.length;
  var i__7264__auto___10803 = 0;
  while (true) {
    if (i__7264__auto___10803 < len__7263__auto___10802) {
      args10795.push(arguments[i__7264__auto___10803]);
      var G__10804 = i__7264__auto___10803 + 1;
      i__7264__auto___10803 = G__10804;
      continue;
    } else {
    }
    break;
  }
  var G__10801 = args10795.length;
  switch(G__10801) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args10795.slice(3), 0, null);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7282__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__10806 = null;
    var G__10806__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__10806__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__10806__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__10806__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__10806__4 = function() {
      var G__10807__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__10807 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10808__i = 0, G__10808__a = new Array(arguments.length - 3);
          while (G__10808__i < G__10808__a.length) {
            G__10808__a[G__10808__i] = arguments[G__10808__i + 3];
            ++G__10808__i;
          }
          args = new cljs.core.IndexedSeq(G__10808__a, 0);
        }
        return G__10807__delegate.call(this, x, y, z, args);
      };
      G__10807.cljs$lang$maxFixedArity = 3;
      G__10807.cljs$lang$applyTo = function(arglist__10809) {
        var x = cljs.core.first(arglist__10809);
        arglist__10809 = cljs.core.next(arglist__10809);
        var y = cljs.core.first(arglist__10809);
        arglist__10809 = cljs.core.next(arglist__10809);
        var z = cljs.core.first(arglist__10809);
        var args = cljs.core.rest(arglist__10809);
        return G__10807__delegate(x, y, z, args);
      };
      G__10807.cljs$core$IFn$_invoke$arity$variadic = G__10807__delegate;
      return G__10807;
    }();
    G__10806 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10806__0.call(this);
        case 1:
          return G__10806__1.call(this, x);
        case 2:
          return G__10806__2.call(this, x, y);
        case 3:
          return G__10806__3.call(this, x, y, z);
        default:
          var G__10810 = null;
          if (arguments.length > 3) {
            var G__10811__i = 0, G__10811__a = new Array(arguments.length - 3);
            while (G__10811__i < G__10811__a.length) {
              G__10811__a[G__10811__i] = arguments[G__10811__i + 3];
              ++G__10811__i;
            }
            G__10810 = new cljs.core.IndexedSeq(G__10811__a, 0);
          }
          return G__10806__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10810);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10806.cljs$lang$maxFixedArity = 3;
    G__10806.cljs$lang$applyTo = G__10806__4.cljs$lang$applyTo;
    G__10806.cljs$core$IFn$_invoke$arity$0 = G__10806__0;
    G__10806.cljs$core$IFn$_invoke$arity$1 = G__10806__1;
    G__10806.cljs$core$IFn$_invoke$arity$2 = G__10806__2;
    G__10806.cljs$core$IFn$_invoke$arity$3 = G__10806__3;
    G__10806.cljs$core$IFn$_invoke$arity$variadic = G__10806__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10806;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10812 = null;
    var G__10812__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__10812__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__10812__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__10812__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__10812__4 = function() {
      var G__10813__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__10813 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10814__i = 0, G__10814__a = new Array(arguments.length - 3);
          while (G__10814__i < G__10814__a.length) {
            G__10814__a[G__10814__i] = arguments[G__10814__i + 3];
            ++G__10814__i;
          }
          args = new cljs.core.IndexedSeq(G__10814__a, 0);
        }
        return G__10813__delegate.call(this, x, y, z, args);
      };
      G__10813.cljs$lang$maxFixedArity = 3;
      G__10813.cljs$lang$applyTo = function(arglist__10815) {
        var x = cljs.core.first(arglist__10815);
        arglist__10815 = cljs.core.next(arglist__10815);
        var y = cljs.core.first(arglist__10815);
        arglist__10815 = cljs.core.next(arglist__10815);
        var z = cljs.core.first(arglist__10815);
        var args = cljs.core.rest(arglist__10815);
        return G__10813__delegate(x, y, z, args);
      };
      G__10813.cljs$core$IFn$_invoke$arity$variadic = G__10813__delegate;
      return G__10813;
    }();
    G__10812 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10812__0.call(this);
        case 1:
          return G__10812__1.call(this, x);
        case 2:
          return G__10812__2.call(this, x, y);
        case 3:
          return G__10812__3.call(this, x, y, z);
        default:
          var G__10816 = null;
          if (arguments.length > 3) {
            var G__10817__i = 0, G__10817__a = new Array(arguments.length - 3);
            while (G__10817__i < G__10817__a.length) {
              G__10817__a[G__10817__i] = arguments[G__10817__i + 3];
              ++G__10817__i;
            }
            G__10816 = new cljs.core.IndexedSeq(G__10817__a, 0);
          }
          return G__10812__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10816);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10812.cljs$lang$maxFixedArity = 3;
    G__10812.cljs$lang$applyTo = G__10812__4.cljs$lang$applyTo;
    G__10812.cljs$core$IFn$_invoke$arity$0 = G__10812__0;
    G__10812.cljs$core$IFn$_invoke$arity$1 = G__10812__1;
    G__10812.cljs$core$IFn$_invoke$arity$2 = G__10812__2;
    G__10812.cljs$core$IFn$_invoke$arity$3 = G__10812__3;
    G__10812.cljs$core$IFn$_invoke$arity$variadic = G__10812__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10812;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10818 = null;
    var G__10818__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__10818__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__10818__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__10818__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__10818__4 = function() {
      var G__10819__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__10819 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10820__i = 0, G__10820__a = new Array(arguments.length - 3);
          while (G__10820__i < G__10820__a.length) {
            G__10820__a[G__10820__i] = arguments[G__10820__i + 3];
            ++G__10820__i;
          }
          args = new cljs.core.IndexedSeq(G__10820__a, 0);
        }
        return G__10819__delegate.call(this, x, y, z, args);
      };
      G__10819.cljs$lang$maxFixedArity = 3;
      G__10819.cljs$lang$applyTo = function(arglist__10821) {
        var x = cljs.core.first(arglist__10821);
        arglist__10821 = cljs.core.next(arglist__10821);
        var y = cljs.core.first(arglist__10821);
        arglist__10821 = cljs.core.next(arglist__10821);
        var z = cljs.core.first(arglist__10821);
        var args = cljs.core.rest(arglist__10821);
        return G__10819__delegate(x, y, z, args);
      };
      G__10819.cljs$core$IFn$_invoke$arity$variadic = G__10819__delegate;
      return G__10819;
    }();
    G__10818 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10818__0.call(this);
        case 1:
          return G__10818__1.call(this, x);
        case 2:
          return G__10818__2.call(this, x, y);
        case 3:
          return G__10818__3.call(this, x, y, z);
        default:
          var G__10822 = null;
          if (arguments.length > 3) {
            var G__10823__i = 0, G__10823__a = new Array(arguments.length - 3);
            while (G__10823__i < G__10823__a.length) {
              G__10823__a[G__10823__i] = arguments[G__10823__i + 3];
              ++G__10823__i;
            }
            G__10822 = new cljs.core.IndexedSeq(G__10823__a, 0);
          }
          return G__10818__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10822);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10818.cljs$lang$maxFixedArity = 3;
    G__10818.cljs$lang$applyTo = G__10818__4.cljs$lang$applyTo;
    G__10818.cljs$core$IFn$_invoke$arity$0 = G__10818__0;
    G__10818.cljs$core$IFn$_invoke$arity$1 = G__10818__1;
    G__10818.cljs$core$IFn$_invoke$arity$2 = G__10818__2;
    G__10818.cljs$core$IFn$_invoke$arity$3 = G__10818__3;
    G__10818.cljs$core$IFn$_invoke$arity$variadic = G__10818__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10818;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__10824 = null;
      var G__10824__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10785_SHARP_, p2__10786_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10785_SHARP_, p2__10786_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10786_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10786_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10824__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10787_SHARP_, p2__10788_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10787_SHARP_, p2__10788_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10788_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__10788_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10824__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10789_SHARP_, p2__10790_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10789_SHARP_, p2__10790_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10790_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__10790_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10824__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10791_SHARP_, p2__10792_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10791_SHARP_, p2__10792_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10792_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__10792_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10824__4 = function() {
        var G__10825__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__10793_SHARP_, p2__10794_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10793_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10794_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__10825 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10826__i = 0, G__10826__a = new Array(arguments.length - 3);
            while (G__10826__i < G__10826__a.length) {
              G__10826__a[G__10826__i] = arguments[G__10826__i + 3];
              ++G__10826__i;
            }
            args = new cljs.core.IndexedSeq(G__10826__a, 0);
          }
          return G__10825__delegate.call(this, x, y, z, args);
        };
        G__10825.cljs$lang$maxFixedArity = 3;
        G__10825.cljs$lang$applyTo = function(arglist__10827) {
          var x = cljs.core.first(arglist__10827);
          arglist__10827 = cljs.core.next(arglist__10827);
          var y = cljs.core.first(arglist__10827);
          arglist__10827 = cljs.core.next(arglist__10827);
          var z = cljs.core.first(arglist__10827);
          var args = cljs.core.rest(arglist__10827);
          return G__10825__delegate(x, y, z, args);
        };
        G__10825.cljs$core$IFn$_invoke$arity$variadic = G__10825__delegate;
        return G__10825;
      }();
      G__10824 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10824__0.call(this);
          case 1:
            return G__10824__1.call(this, x);
          case 2:
            return G__10824__2.call(this, x, y);
          case 3:
            return G__10824__3.call(this, x, y, z);
          default:
            var G__10828 = null;
            if (arguments.length > 3) {
              var G__10829__i = 0, G__10829__a = new Array(arguments.length - 3);
              while (G__10829__i < G__10829__a.length) {
                G__10829__a[G__10829__i] = arguments[G__10829__i + 3];
                ++G__10829__i;
              }
              G__10828 = new cljs.core.IndexedSeq(G__10829__a, 0);
            }
            return G__10824__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10828);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10824.cljs$lang$maxFixedArity = 3;
      G__10824.cljs$lang$applyTo = G__10824__4.cljs$lang$applyTo;
      G__10824.cljs$core$IFn$_invoke$arity$0 = G__10824__0;
      G__10824.cljs$core$IFn$_invoke$arity$1 = G__10824__1;
      G__10824.cljs$core$IFn$_invoke$arity$2 = G__10824__2;
      G__10824.cljs$core$IFn$_invoke$arity$3 = G__10824__3;
      G__10824.cljs$core$IFn$_invoke$arity$variadic = G__10824__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10824;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq10796) {
  var G__10797 = cljs.core.first(seq10796);
  var seq10796__$1 = cljs.core.next(seq10796);
  var G__10798 = cljs.core.first(seq10796__$1);
  var seq10796__$2 = cljs.core.next(seq10796__$1);
  var G__10799 = cljs.core.first(seq10796__$2);
  var seq10796__$3 = cljs.core.next(seq10796__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__10797, G__10798, G__10799, seq10796__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args10830 = [];
  var len__7263__auto___10833 = arguments.length;
  var i__7264__auto___10834 = 0;
  while (true) {
    if (i__7264__auto___10834 < len__7263__auto___10833) {
      args10830.push(arguments[i__7264__auto___10834]);
      var G__10835 = i__7264__auto___10834 + 1;
      i__7264__auto___10834 = G__10835;
      continue;
    } else {
    }
    break;
  }
  var G__10832 = args10830.length;
  switch(G__10832) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10830.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__10837 = cljs.core.next(coll);
      coll = G__10837;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__10838 = n - 1;
      var G__10839 = cljs.core.next(coll);
      n = G__10838;
      coll = G__10839;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args10840 = [];
  var len__7263__auto___10843 = arguments.length;
  var i__7264__auto___10844 = 0;
  while (true) {
    if (i__7264__auto___10844 < len__7263__auto___10843) {
      args10840.push(arguments[i__7264__auto___10844]);
      var G__10845 = i__7264__auto___10844 + 1;
      i__7264__auto___10844 = G__10845;
      continue;
    } else {
    }
    break;
  }
  var G__10842 = args10840.length;
  switch(G__10842) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10840.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10848 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10848, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10848, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__6193__auto__ = flags;
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10856 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__6193__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__6193__auto__)) {
              return or__6193__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10857_10863 = cljs.core.first(coll);
          var G__10858_10864 = writer;
          var G__10859_10865 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10857_10863, G__10858_10864, G__10859_10865) : print_one.call(null, G__10857_10863, G__10858_10864, G__10859_10865);
        } else {
        }
        var coll_10866__$1 = cljs.core.next(coll);
        var n_10867 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10866__$1 && (n_10867 == null || !(n_10867 === 0))) {
            cljs.core._write(writer, sep);
            var G__10860_10868 = cljs.core.first(coll_10866__$1);
            var G__10861_10869 = writer;
            var G__10862_10870 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10860_10868, G__10861_10869, G__10862_10870) : print_one.call(null, G__10860_10868, G__10861_10869, G__10862_10870);
            var G__10871 = cljs.core.next(coll_10866__$1);
            var G__10872 = n_10867 - 1;
            coll_10866__$1 = G__10871;
            n_10867 = G__10872;
            continue;
          } else {
            if (cljs.core.seq(coll_10866__$1) && n_10867 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__6193__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__6193__auto__)) {
                  return or__6193__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10856;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10879 = arguments.length;
  var i__7264__auto___10880 = 0;
  while (true) {
    if (i__7264__auto___10880 < len__7263__auto___10879) {
      args__7270__auto__.push(arguments[i__7264__auto___10880]);
      var G__10881 = i__7264__auto___10880 + 1;
      i__7264__auto___10880 = G__10881;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__10875 = cljs.core.seq(ss);
  var chunk__10876 = null;
  var count__10877 = 0;
  var i__10878 = 0;
  while (true) {
    if (i__10878 < count__10877) {
      var s = chunk__10876.cljs$core$IIndexed$_nth$arity$2(null, i__10878);
      cljs.core._write(writer, s);
      var G__10882 = seq__10875;
      var G__10883 = chunk__10876;
      var G__10884 = count__10877;
      var G__10885 = i__10878 + 1;
      seq__10875 = G__10882;
      chunk__10876 = G__10883;
      count__10877 = G__10884;
      i__10878 = G__10885;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10875);
      if (temp__4425__auto__) {
        var seq__10875__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10875__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10875__$1);
          var G__10886 = cljs.core.chunk_rest(seq__10875__$1);
          var G__10887 = c__7004__auto__;
          var G__10888 = cljs.core.count(c__7004__auto__);
          var G__10889 = 0;
          seq__10875 = G__10886;
          chunk__10876 = G__10887;
          count__10877 = G__10888;
          i__10878 = G__10889;
          continue;
        } else {
          var s = cljs.core.first(seq__10875__$1);
          cljs.core._write(writer, s);
          var G__10890 = cljs.core.next(seq__10875__$1);
          var G__10891 = null;
          var G__10892 = 0;
          var G__10893 = 0;
          seq__10875 = G__10890;
          chunk__10876 = G__10891;
          count__10877 = G__10892;
          i__10878 = G__10893;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq10873) {
  var G__10874 = cljs.core.first(seq10873);
  var seq10873__$1 = cljs.core.next(seq10873);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__10874, seq10873__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10895 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10895;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__6181__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__6181__auto__) {
    var and__6181__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__6181__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__6181__auto____$1;
    }
  } else {
    return and__6181__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__10910_10918 = cljs.core.meta(obj);
      var G__10911_10919 = writer;
      var G__10912_10920 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10910_10918, G__10911_10919, G__10912_10920) : cljs.core.pr_writer.call(null, G__10910_10918, G__10911_10919, G__10912_10920);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__10914 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__10915 = cljs.core.pr_writer;
            var G__10916 = writer;
            var G__10917 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10914, G__10915, G__10916, G__10917) : cljs.core.print_map.call(null, G__10914, G__10915, G__10916, G__10917);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__6193__auto__ = name == null;
                    if (or__6193__auto__) {
                      return or__6193__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__10921 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__10921;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                      } else {
                        var name = obj.constructor.name;
                        var name__$1 = cljs.core.truth_(function() {
                          var or__6193__auto__ = name == null;
                          if (or__6193__auto__) {
                            return or__6193__auto__;
                          } else {
                            return goog.string.isEmpty(name);
                          }
                        }()) ? "Object" : name;
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__10925 = obj;
    var G__10926 = writer;
    var G__10927 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10925, G__10926, G__10927) : alt_impl.call(null, G__10925, G__10926, G__10927);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10932 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10933 = null;
  var count__10934 = 0;
  var i__10935 = 0;
  while (true) {
    if (i__10935 < count__10934) {
      var obj = chunk__10933.cljs$core$IIndexed$_nth$arity$2(null, i__10935);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10936 = seq__10932;
      var G__10937 = chunk__10933;
      var G__10938 = count__10934;
      var G__10939 = i__10935 + 1;
      seq__10932 = G__10936;
      chunk__10933 = G__10937;
      count__10934 = G__10938;
      i__10935 = G__10939;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10932);
      if (temp__4425__auto__) {
        var seq__10932__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10932__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first(seq__10932__$1);
          var G__10940 = cljs.core.chunk_rest(seq__10932__$1);
          var G__10941 = c__7004__auto__;
          var G__10942 = cljs.core.count(c__7004__auto__);
          var G__10943 = 0;
          seq__10932 = G__10940;
          chunk__10933 = G__10941;
          count__10934 = G__10942;
          i__10935 = G__10943;
          continue;
        } else {
          var obj = cljs.core.first(seq__10932__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10944 = cljs.core.next(seq__10932__$1);
          var G__10945 = null;
          var G__10946 = 0;
          var G__10947 = 0;
          seq__10932 = G__10944;
          chunk__10933 = G__10945;
          count__10934 = G__10946;
          i__10935 = G__10947;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args10948 = [];
  var len__7263__auto___10951 = arguments.length;
  var i__7264__auto___10952 = 0;
  while (true) {
    if (i__7264__auto___10952 < len__7263__auto___10951) {
      args10948.push(arguments[i__7264__auto___10952]);
      var G__10953 = i__7264__auto___10952 + 1;
      i__7264__auto___10952 = G__10953;
      continue;
    } else {
    }
    break;
  }
  var G__10950 = args10948.length;
  switch(G__10950) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10948.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10956 = arguments.length;
  var i__7264__auto___10957 = 0;
  while (true) {
    if (i__7264__auto___10957 < len__7263__auto___10956) {
      args__7270__auto__.push(arguments[i__7264__auto___10957]);
      var G__10958 = i__7264__auto___10957 + 1;
      i__7264__auto___10957 = G__10958;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq10955) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10955));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10960 = arguments.length;
  var i__7264__auto___10961 = 0;
  while (true) {
    if (i__7264__auto___10961 < len__7263__auto___10960) {
      args__7270__auto__.push(arguments[i__7264__auto___10961]);
      var G__10962 = i__7264__auto___10961 + 1;
      i__7264__auto___10961 = G__10962;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq10959) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10959));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10964 = arguments.length;
  var i__7264__auto___10965 = 0;
  while (true) {
    if (i__7264__auto___10965 < len__7263__auto___10964) {
      args__7270__auto__.push(arguments[i__7264__auto___10965]);
      var G__10966 = i__7264__auto___10965 + 1;
      i__7264__auto___10965 = G__10966;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq10963) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10963));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10967__i = 0, G__10967__a = new Array(arguments.length - 0);
      while (G__10967__i < G__10967__a.length) {
        G__10967__a[G__10967__i] = arguments[G__10967__i + 0];
        ++G__10967__i;
      }
      objs = new cljs.core.IndexedSeq(G__10967__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10968) {
    var objs = cljs.core.seq(arglist__10968);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10970 = arguments.length;
  var i__7264__auto___10971 = 0;
  while (true) {
    if (i__7264__auto___10971 < len__7263__auto___10970) {
      args__7270__auto__.push(arguments[i__7264__auto___10971]);
      var G__10972 = i__7264__auto___10971 + 1;
      i__7264__auto___10971 = G__10972;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq10969) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10969));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10974 = arguments.length;
  var i__7264__auto___10975 = 0;
  while (true) {
    if (i__7264__auto___10975 < len__7263__auto___10974) {
      args__7270__auto__.push(arguments[i__7264__auto___10975]);
      var G__10976 = i__7264__auto___10975 + 1;
      i__7264__auto___10975 = G__10976;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq10973) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10973));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10978 = arguments.length;
  var i__7264__auto___10979 = 0;
  while (true) {
    if (i__7264__auto___10979 < len__7263__auto___10978) {
      args__7270__auto__.push(arguments[i__7264__auto___10979]);
      var G__10980 = i__7264__auto___10979 + 1;
      i__7264__auto___10979 = G__10980;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq10977) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10977));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10982 = arguments.length;
  var i__7264__auto___10983 = 0;
  while (true) {
    if (i__7264__auto___10983 < len__7263__auto___10982) {
      args__7270__auto__.push(arguments[i__7264__auto___10983]);
      var G__10984 = i__7264__auto___10983 + 1;
      i__7264__auto___10983 = G__10984;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq10981) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10981));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10991_10997 = cljs.core.key(e);
    var G__10992_10998 = w;
    var G__10993_10999 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10991_10997, G__10992_10998, G__10993_10999) : print_one.call(null, G__10991_10997, G__10992_10998, G__10993_10999);
    cljs.core._write(w, " ");
    var G__10994 = cljs.core.val(e);
    var G__10995 = w;
    var G__10996 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10994, G__10995, G__10996) : print_one.call(null, G__10994, G__10995, G__10996);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___11003 = arguments.length;
  var i__7264__auto___11004 = 0;
  while (true) {
    if (i__7264__auto___11004 < len__7263__auto___11003) {
      args__7270__auto__.push(arguments[i__7264__auto___11004]);
      var G__11005 = i__7264__auto___11004 + 1;
      i__7264__auto___11004 = G__11005;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 2 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(2), 0, null) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7271__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq11000) {
  var G__11001 = cljs.core.first(seq11000);
  var seq11000__$1 = cljs.core.next(seq11000);
  var G__11002 = cljs.core.first(seq11000__$1);
  var seq11000__$2 = cljs.core.next(seq11000__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11001, G__11002, seq11000__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args11006 = [];
  var len__7263__auto___11009 = arguments.length;
  var i__7264__auto___11010 = 0;
  while (true) {
    if (i__7264__auto___11010 < len__7263__auto___11009) {
      args11006.push(arguments[i__7264__auto___11010]);
      var G__11011 = i__7264__auto___11010 + 1;
      i__7264__auto___11010 = G__11011;
      continue;
    } else {
    }
    break;
  }
  var G__11008 = args11006.length;
  switch(G__11008) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11006.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__11013_SHARP_, p2__11014_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__11013_SHARP_, p2__11014_SHARP_) : rf.call(null, p1__11013_SHARP_, p2__11014_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__11015 = null;
      var G__11015__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11015__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11015__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__11015 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__11015__0.call(this);
          case 1:
            return G__11015__1.call(this, result);
          case 2:
            return G__11015__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__11015.cljs$core$IFn$_invoke$arity$0 = G__11015__0;
      G__11015.cljs$core$IFn$_invoke$arity$1 = G__11015__1;
      G__11015.cljs$core$IFn$_invoke$arity$2 = G__11015__2;
      return G__11015;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args11016 = [];
  var len__7263__auto___11019 = arguments.length;
  var i__7264__auto___11020 = 0;
  while (true) {
    if (i__7264__auto___11020 < len__7263__auto___11019) {
      args11016.push(arguments[i__7264__auto___11020]);
      var G__11021 = i__7264__auto___11020 + 1;
      i__7264__auto___11020 = G__11021;
      continue;
    } else {
    }
    break;
  }
  var G__11018 = args11016.length;
  switch(G__11018) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11016.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__11023 = null;
        var G__11023__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11023__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11023__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11023 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11023__0.call(this);
            case 1:
              return G__11023__1.call(this, result);
            case 2:
              return G__11023__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__11023.cljs$core$IFn$_invoke$arity$0 = G__11023__0;
        G__11023.cljs$core$IFn$_invoke$arity$1 = G__11023__1;
        G__11023.cljs$core$IFn$_invoke$arity$2 = G__11023__2;
        return G__11023;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args11024 = [];
  var len__7263__auto___11027 = arguments.length;
  var i__7264__auto___11028 = 0;
  while (true) {
    if (i__7264__auto___11028 < len__7263__auto___11027) {
      args11024.push(arguments[i__7264__auto___11028]);
      var G__11029 = i__7264__auto___11028 + 1;
      i__7264__auto___11028 = G__11029;
      continue;
    } else {
    }
    break;
  }
  var G__11026 = args11024.length;
  switch(G__11026) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11024.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.indexOf = function() {
  var G__11031 = null;
  var G__11031__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, 0);
  };
  var G__11031__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__11031 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11031__1.call(this, x);
      case 2:
        return G__11031__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11031.cljs$core$IFn$_invoke$arity$1 = G__11031__1;
  G__11031.cljs$core$IFn$_invoke$arity$2 = G__11031__2;
  return G__11031;
}();
cljs.core.Eduction.prototype.lastIndexOf = function() {
  var G__11032 = null;
  var G__11032__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, cljs.core.count(coll__$1));
  };
  var G__11032__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__11032 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11032__1.call(this, x);
      case 2:
        return G__11032__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11032.cljs$core$IFn$_invoke$arity$1 = G__11032__1;
  G__11032.cljs$core$IFn$_invoke$arity$2 = G__11032__2;
  return G__11032;
}();
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7199__auto__ = this;
  return cljs.core.es6_iterator(this__7199__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___11034 = arguments.length;
  var i__7264__auto___11035 = 0;
  while (true) {
    if (i__7264__auto___11035 < len__7263__auto___11034) {
      args__7270__auto__.push(arguments[i__7264__auto___11035]);
      var G__11036 = i__7264__auto___11035 + 1;
      i__7264__auto___11035 = G__11036;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq11033) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11033));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__11038_SHARP_, p2__11037_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__11037_SHARP_) : proc.call(null, p2__11037_SHARP_);
  }, null, coll);
  return null;
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto__.call(null, x);
    } else {
      var m__6857__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._key__GT_js[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto__.call(null, x);
    } else {
      var m__6857__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6857__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__11057_11067 = cljs.core.seq(x);
            var chunk__11058_11068 = null;
            var count__11059_11069 = 0;
            var i__11060_11070 = 0;
            while (true) {
              if (i__11060_11070 < count__11059_11069) {
                var vec__11061_11071 = chunk__11058_11068.cljs$core$IIndexed$_nth$arity$2(null, i__11060_11070);
                var k_11072 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11061_11071, 0, null);
                var v_11073 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11061_11071, 1, null);
                m[cljs.core.key__GT_js(k_11072)] = cljs$core$clj__GT_js(v_11073);
                var G__11074 = seq__11057_11067;
                var G__11075 = chunk__11058_11068;
                var G__11076 = count__11059_11069;
                var G__11077 = i__11060_11070 + 1;
                seq__11057_11067 = G__11074;
                chunk__11058_11068 = G__11075;
                count__11059_11069 = G__11076;
                i__11060_11070 = G__11077;
                continue;
              } else {
                var temp__4425__auto___11078 = cljs.core.seq(seq__11057_11067);
                if (temp__4425__auto___11078) {
                  var seq__11057_11079__$1 = temp__4425__auto___11078;
                  if (cljs.core.chunked_seq_QMARK_(seq__11057_11079__$1)) {
                    var c__7004__auto___11080 = cljs.core.chunk_first(seq__11057_11079__$1);
                    var G__11081 = cljs.core.chunk_rest(seq__11057_11079__$1);
                    var G__11082 = c__7004__auto___11080;
                    var G__11083 = cljs.core.count(c__7004__auto___11080);
                    var G__11084 = 0;
                    seq__11057_11067 = G__11081;
                    chunk__11058_11068 = G__11082;
                    count__11059_11069 = G__11083;
                    i__11060_11070 = G__11084;
                    continue;
                  } else {
                    var vec__11062_11085 = cljs.core.first(seq__11057_11079__$1);
                    var k_11086 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11062_11085, 0, null);
                    var v_11087 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11062_11085, 1, null);
                    m[cljs.core.key__GT_js(k_11086)] = cljs$core$clj__GT_js(v_11087);
                    var G__11088 = cljs.core.next(seq__11057_11079__$1);
                    var G__11089 = null;
                    var G__11090 = 0;
                    var G__11091 = 0;
                    seq__11057_11067 = G__11088;
                    chunk__11058_11068 = G__11089;
                    count__11059_11069 = G__11090;
                    i__11060_11070 = G__11091;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__11063_11092 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__11064_11093 = null;
              var count__11065_11094 = 0;
              var i__11066_11095 = 0;
              while (true) {
                if (i__11066_11095 < count__11065_11094) {
                  var x_11096__$1 = chunk__11064_11093.cljs$core$IIndexed$_nth$arity$2(null, i__11066_11095);
                  arr.push(x_11096__$1);
                  var G__11097 = seq__11063_11092;
                  var G__11098 = chunk__11064_11093;
                  var G__11099 = count__11065_11094;
                  var G__11100 = i__11066_11095 + 1;
                  seq__11063_11092 = G__11097;
                  chunk__11064_11093 = G__11098;
                  count__11065_11094 = G__11099;
                  i__11066_11095 = G__11100;
                  continue;
                } else {
                  var temp__4425__auto___11101 = cljs.core.seq(seq__11063_11092);
                  if (temp__4425__auto___11101) {
                    var seq__11063_11102__$1 = temp__4425__auto___11101;
                    if (cljs.core.chunked_seq_QMARK_(seq__11063_11102__$1)) {
                      var c__7004__auto___11103 = cljs.core.chunk_first(seq__11063_11102__$1);
                      var G__11104 = cljs.core.chunk_rest(seq__11063_11102__$1);
                      var G__11105 = c__7004__auto___11103;
                      var G__11106 = cljs.core.count(c__7004__auto___11103);
                      var G__11107 = 0;
                      seq__11063_11092 = G__11104;
                      chunk__11064_11093 = G__11105;
                      count__11065_11094 = G__11106;
                      i__11066_11095 = G__11107;
                      continue;
                    } else {
                      var x_11108__$1 = cljs.core.first(seq__11063_11102__$1);
                      arr.push(x_11108__$1);
                      var G__11109 = cljs.core.next(seq__11063_11102__$1);
                      var G__11110 = null;
                      var G__11111 = 0;
                      var G__11112 = 0;
                      seq__11063_11092 = G__11109;
                      chunk__11064_11093 = G__11110;
                      count__11065_11094 = G__11111;
                      i__11066_11095 = G__11112;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__6856__auto__ = x == null ? null : x;
    var m__6857__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__6857__auto__.call(null, x, options);
    } else {
      var m__6857__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__6857__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args11113 = [];
  var len__7263__auto___11138 = arguments.length;
  var i__7264__auto___11139 = 0;
  while (true) {
    if (i__7264__auto___11139 < len__7263__auto___11138) {
      args11113.push(arguments[i__7264__auto___11139]);
      var G__11140 = i__7264__auto___11139 + 1;
      i__7264__auto___11139 = G__11140;
      continue;
    } else {
    }
    break;
  }
  var G__11117 = args11113.length;
  switch(G__11117) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args11113.slice(1), 0, null);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7282__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__11118 = opts;
  var map__11118__$1 = (!(map__11118 == null) ? map__11118.cljs$lang$protocol_mask$partition0$ & 64 || map__11118.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__11118) : map__11118;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11118__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__11118, map__11118__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__6973__auto__ = function(map__11118, map__11118__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__11132(s__11133) {
                      return new cljs.core.LazySeq(null, function(map__11118, map__11118__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__11133__$1 = s__11133;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__11133__$1);
                            if (temp__4425__auto__) {
                              var s__11133__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__11133__$2)) {
                                var c__6971__auto__ = cljs.core.chunk_first(s__11133__$2);
                                var size__6972__auto__ = cljs.core.count(c__6971__auto__);
                                var b__11135 = cljs.core.chunk_buffer(size__6972__auto__);
                                if (function() {
                                  var i__11134 = 0;
                                  while (true) {
                                    if (i__11134 < size__6972__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__6971__auto__, i__11134);
                                      cljs.core.chunk_append(b__11135, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__11142 = i__11134 + 1;
                                      i__11134 = G__11142;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__11135), cljs$core$thisfn_$_iter__11132(cljs.core.chunk_rest(s__11133__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__11135), null);
                                }
                              } else {
                                var k = cljs.core.first(s__11133__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__11132(cljs.core.rest(s__11133__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__11118, map__11118__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__11118, map__11118__$1, keywordize_keys, keyfn);
                  return iter__6973__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__11118, map__11118__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq11114) {
  var G__11115 = cljs.core.first(seq11114);
  var seq11114__$1 = cljs.core.next(seq11114);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__11115, seq11114__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__11144 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11144) : cljs.core.atom.call(null, G__11144);
  }();
  return function(mem) {
    return function() {
      var G__11145__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__11145 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__11146__i = 0, G__11146__a = new Array(arguments.length - 0);
          while (G__11146__i < G__11146__a.length) {
            G__11146__a[G__11146__i] = arguments[G__11146__i + 0];
            ++G__11146__i;
          }
          args = new cljs.core.IndexedSeq(G__11146__a, 0);
        }
        return G__11145__delegate.call(this, args);
      };
      G__11145.cljs$lang$maxFixedArity = 0;
      G__11145.cljs$lang$applyTo = function(arglist__11147) {
        var args = cljs.core.seq(arglist__11147);
        return G__11145__delegate(args);
      };
      G__11145.cljs$core$IFn$_invoke$arity$variadic = G__11145__delegate;
      return G__11145;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args11148 = [];
  var len__7263__auto___11153 = arguments.length;
  var i__7264__auto___11154 = 0;
  while (true) {
    if (i__7264__auto___11154 < len__7263__auto___11153) {
      args11148.push(arguments[i__7264__auto___11154]);
      var G__11155 = i__7264__auto___11154 + 1;
      i__7264__auto___11154 = G__11155;
      continue;
    } else {
    }
    break;
  }
  var G__11152 = args11148.length;
  switch(G__11152) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7282__auto__ = new cljs.core.IndexedSeq(args11148.slice(1), 0, null);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7282__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__11157 = ret;
      f = G__11157;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq11149) {
  var G__11150 = cljs.core.first(seq11149);
  var seq11149__$1 = cljs.core.next(seq11149);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__11150, seq11149__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args11158 = [];
  var len__7263__auto___11161 = arguments.length;
  var i__7264__auto___11162 = 0;
  while (true) {
    if (i__7264__auto___11162 < len__7263__auto___11161) {
      args11158.push(arguments[i__7264__auto___11162]);
      var G__11163 = i__7264__auto___11162 + 1;
      i__7264__auto___11162 = G__11163;
      continue;
    } else {
    }
    break;
  }
  var G__11160 = args11158.length;
  switch(G__11160) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11158.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__11166 = Math.random() * n;
  return Math.floor(G__11166);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__11168 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11168) : cljs.core.atom.call(null, G__11168);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___11171 = arguments.length;
  var i__7264__auto___11172 = 0;
  while (true) {
    if (i__7264__auto___11172 < len__7263__auto___11171) {
      args__7270__auto__.push(arguments[i__7264__auto___11172]);
      var G__11173 = i__7264__auto___11172 + 1;
      i__7264__auto___11172 = G__11173;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq11169) {
  var G__11170 = cljs.core.first(seq11169);
  var seq11169__$1 = cljs.core.next(seq11169);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11170, seq11169__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args11174 = [];
  var len__7263__auto___11178 = arguments.length;
  var i__7264__auto___11179 = 0;
  while (true) {
    if (i__7264__auto___11179 < len__7263__auto___11178) {
      args11174.push(arguments[i__7264__auto___11179]);
      var G__11180 = i__7264__auto___11179 + 1;
      i__7264__auto___11179 = G__11180;
      continue;
    } else {
    }
    break;
  }
  var G__11176 = args11174.length;
  switch(G__11176) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11174.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__11177 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11177) : cljs.core.deref.call(null, G__11177);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__6193__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__6193__auto__) {
    return or__6193__auto__;
  } else {
    var or__6193__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__6193__auto____$1) {
      return or__6193__auto____$1;
    } else {
      var and__6181__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__6181__auto__) {
        var and__6181__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__6181__auto____$1) {
          var and__6181__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__6181__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__11182 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__11183 = i + 1;
                ret = G__11182;
                i = G__11183;
                continue;
              }
              break;
            }
          } else {
            return and__6181__auto____$2;
          }
        } else {
          return and__6181__auto____$1;
        }
      } else {
        return and__6181__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args11184 = [];
  var len__7263__auto___11188 = arguments.length;
  var i__7264__auto___11189 = 0;
  while (true) {
    if (i__7264__auto___11189 < len__7263__auto___11188) {
      args11184.push(arguments[i__7264__auto___11189]);
      var G__11190 = i__7264__auto___11189 + 1;
      i__7264__auto___11189 = G__11190;
      continue;
    } else {
    }
    break;
  }
  var G__11186 = args11184.length;
  switch(G__11186) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11184.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11187 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11187) : cljs.core.deref.call(null, G__11187);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args11192 = [];
  var len__7263__auto___11196 = arguments.length;
  var i__7264__auto___11197 = 0;
  while (true) {
    if (i__7264__auto___11197 < len__7263__auto___11196) {
      args11192.push(arguments[i__7264__auto___11197]);
      var G__11198 = i__7264__auto___11197 + 1;
      i__7264__auto___11197 = G__11198;
      continue;
    } else {
    }
    break;
  }
  var G__11194 = args11192.length;
  switch(G__11194) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11192.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11195 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11195) : cljs.core.deref.call(null, G__11195);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args11200 = [];
  var len__7263__auto___11204 = arguments.length;
  var i__7264__auto___11205 = 0;
  while (true) {
    if (i__7264__auto___11205 < len__7263__auto___11204) {
      args11200.push(arguments[i__7264__auto___11205]);
      var G__11206 = i__7264__auto___11205 + 1;
      i__7264__auto___11205 = G__11206;
      continue;
    } else {
    }
    break;
  }
  var G__11202 = args11200.length;
  switch(G__11202) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11200.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11203 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11203) : cljs.core.deref.call(null, G__11203);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args11208 = [];
  var len__7263__auto___11211 = arguments.length;
  var i__7264__auto___11212 = 0;
  while (true) {
    if (i__7264__auto___11212 < len__7263__auto___11211) {
      args11208.push(arguments[i__7264__auto___11212]);
      var G__11213 = i__7264__auto___11212 + 1;
      i__7264__auto___11212 = G__11213;
      continue;
    } else {
    }
    break;
  }
  var G__11210 = args11208.length;
  switch(G__11210) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11208.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error("Assert failed: (namespace parent)");
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error("Assert failed: (not\x3d tag parent)");
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__6193__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args11218 = [];
  var len__7263__auto___11221 = arguments.length;
  var i__7264__auto___11222 = 0;
  while (true) {
    if (i__7264__auto___11222 < len__7263__auto___11221) {
      args11218.push(arguments[i__7264__auto___11222]);
      var G__11223 = i__7264__auto___11222 + 1;
      i__7264__auto___11222 = G__11223;
      continue;
    } else {
    }
    break;
  }
  var G__11220 = args11218.length;
  switch(G__11220) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11218.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__11215_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__11215_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__11215_SHARP_), cljs.core.second(p1__11215_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__11216_SHARP_, p2__11217_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__11216_SHARP_, p2__11217_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__6193__auto__ = cljs.core.truth_(function() {
    var and__6181__auto__ = xprefs;
    if (cljs.core.truth_(and__6181__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__6181__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    var or__6193__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__11237 = cljs.core.rest(ps);
          ps = G__11237;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__6193__auto____$1)) {
      return or__6193__auto____$1;
    } else {
      var or__6193__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__11238 = cljs.core.rest(ps);
            ps = G__11238;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__6193__auto____$2)) {
        return or__6193__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__6193__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__11241) {
    var vec__11242 = p__11241;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11242, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11242, 1, null);
    var e = vec__11242;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__6193__auto__ = be == null;
        if (or__6193__auto__) {
          return or__6193__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._reset[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto__.call(null, mf);
    } else {
      var m__6857__auto____$1 = cljs.core._reset["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._add_method[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__6857__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__6857__auto____$1 = cljs.core._add_method["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__6857__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._remove_method[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6857__auto__.call(null, mf, dispatch_val);
    } else {
      var m__6857__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6857__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._prefer_method[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__6857__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__6857__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__6857__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._get_method[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6857__auto__.call(null, mf, dispatch_val);
    } else {
      var m__6857__auto____$1 = cljs.core._get_method["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6857__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._methods[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto__.call(null, mf);
    } else {
      var m__6857__auto____$1 = cljs.core._methods["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._prefers[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto__.call(null, mf);
    } else {
      var m__6857__auto____$1 = cljs.core._prefers["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto__.call(null, mf);
    } else {
      var m__6857__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__6856__auto__ = mf == null ? null : mf;
    var m__6857__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto__.call(null, mf);
    } else {
      var m__6857__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6857__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6857__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11244 = null;
  var G__11244__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11244__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__11244__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__11244__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__11244__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__11244__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__11244__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__11244__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__11244__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__11244__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11244__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11244__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11244__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11244__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11244__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11244__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11244__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11244__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11244__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11244__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11244__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11244__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11244 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11244__1.call(this, self__);
      case 2:
        return G__11244__2.call(this, self__, a);
      case 3:
        return G__11244__3.call(this, self__, a, b);
      case 4:
        return G__11244__4.call(this, self__, a, b, c);
      case 5:
        return G__11244__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11244__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11244__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11244__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11244__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11244__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11244__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11244__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11244__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11244__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11244__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11244__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11244__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11244__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11244__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11244__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11244__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11244__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11244.cljs$core$IFn$_invoke$arity$1 = G__11244__1;
  G__11244.cljs$core$IFn$_invoke$arity$2 = G__11244__2;
  G__11244.cljs$core$IFn$_invoke$arity$3 = G__11244__3;
  G__11244.cljs$core$IFn$_invoke$arity$4 = G__11244__4;
  G__11244.cljs$core$IFn$_invoke$arity$5 = G__11244__5;
  G__11244.cljs$core$IFn$_invoke$arity$6 = G__11244__6;
  G__11244.cljs$core$IFn$_invoke$arity$7 = G__11244__7;
  G__11244.cljs$core$IFn$_invoke$arity$8 = G__11244__8;
  G__11244.cljs$core$IFn$_invoke$arity$9 = G__11244__9;
  G__11244.cljs$core$IFn$_invoke$arity$10 = G__11244__10;
  G__11244.cljs$core$IFn$_invoke$arity$11 = G__11244__11;
  G__11244.cljs$core$IFn$_invoke$arity$12 = G__11244__12;
  G__11244.cljs$core$IFn$_invoke$arity$13 = G__11244__13;
  G__11244.cljs$core$IFn$_invoke$arity$14 = G__11244__14;
  G__11244.cljs$core$IFn$_invoke$arity$15 = G__11244__15;
  G__11244.cljs$core$IFn$_invoke$arity$16 = G__11244__16;
  G__11244.cljs$core$IFn$_invoke$arity$17 = G__11244__17;
  G__11244.cljs$core$IFn$_invoke$arity$18 = G__11244__18;
  G__11244.cljs$core$IFn$_invoke$arity$19 = G__11244__19;
  G__11244.cljs$core$IFn$_invoke$arity$20 = G__11244__20;
  G__11244.cljs$core$IFn$_invoke$arity$21 = G__11244__21;
  G__11244.cljs$core$IFn$_invoke$arity$22 = G__11244__22;
  return G__11244;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args11243) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11243)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__11245 = self__.uuid;
  var G__11246 = other.uuid;
  return goog.array.defaultCompare(G__11245, G__11246);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args11247 = [];
  var len__7263__auto___11250 = arguments.length;
  var i__7264__auto___11251 = 0;
  while (true) {
    if (i__7264__auto___11251 < len__7263__auto___11250) {
      args11247.push(arguments[i__7264__auto___11251]);
      var G__11252 = i__7264__auto___11251 + 1;
      i__7264__auto___11251 = G__11252;
      continue;
    } else {
    }
    break;
  }
  var G__11249 = args11247.length;
  switch(G__11249) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11247.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "finally", "finally", -1065347064, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, 
  "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, 
  null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "catch", "catch", -1616370245, null), null, new cljs.core.Symbol(null, 
  "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__11254 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__11254) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? tag)");
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__11256_SHARP_, p2__11257_SHARP_) {
      goog.object.set(p1__11256_SHARP_, p2__11257_SHARP_, true);
      return p1__11256_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__11260 = cljs.core.next(ks__$1);
          var G__11261 = [cljs.core.str(function() {
            var G__11259 = ret;
            var G__11259__$1 = !(ret === "") ? [cljs.core.str(G__11259), cljs.core.str("|")].join("") : G__11259;
            return G__11259__$1;
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__11260;
          ret = G__11261;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_11262 = 0;
  while (true) {
    if (i_11262 < name.length) {
      var c_11263 = name.charAt(i_11262);
      var sub_11264 = goog.object.get(cljs.core.CHAR_MAP, c_11263);
      if (!(sub_11264 == null)) {
        sb.append(sub_11264);
      } else {
        sb.append(c_11263);
      }
      var G__11265 = i_11262 + 1;
      i_11262 = G__11265;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4423__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var match = temp__4423__auto__;
      var vec__11267 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11267, 0, null);
      var G__11268 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__11269 = r.lastIndex;
      ret = G__11268;
      last_match_end = G__11269;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write(writer__6800__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__11274 = function() {
          var G__11272 = ctxt;
          var G__11273 = cljs.core.first(xs);
          return goog.object.get(G__11272, G__11273);
        }();
        var G__11275 = cljs.core.next(xs);
        ctxt = G__11274;
        xs = G__11275;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__11279 = cljs.core._STAR_target_STAR_;
  switch(G__11279) {
    case "nodejs":
      if (COMPILED) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__11281 = cljs.core.first(segs);
            return eval(G__11281);
          } catch (e11280) {
            if (e11280 instanceof ReferenceError) {
              var e = e11280;
              return null;
            } else {
              throw e11280;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args11283 = [];
  var len__7263__auto___11286 = arguments.length;
  var i__7264__auto___11287 = 0;
  while (true) {
    if (i__7264__auto___11287 < len__7263__auto___11286) {
      args11283.push(arguments[i__7264__auto___11287]);
      var G__11288 = i__7264__auto___11287 + 1;
      i__7264__auto___11287 = G__11288;
      continue;
    } else {
    }
    break;
  }
  var G__11285 = args11283.length;
  switch(G__11285) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11283.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__11291 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11291) : cljs.core.atom.call(null, G__11291);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__11293 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11293) : cljs.core.atom.call(null, G__11293);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "'");
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push((key));
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = (value);
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray(object, sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(String(object));
      break;
    case "function":
      sb.push("null");
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("￿") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? String(n) : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress", DOWNLOAD_PROGRESS:"downloadprogress", UPLOAD_PROGRESS:"uploadprogress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.progressEventsEnabled_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {
  this.progressEventsEnabled_ = enabled;
};
goog.net.XhrIo.prototype.getProgressEventsEnabled = function() {
  return this.progressEventsEnabled_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  if (this.getProgressEventsEnabled() && "onprogress" in this.xhr_) {
    this.xhr_.onprogress = goog.bind(function(e) {
      this.onProgressHandler_(e, true);
    }, this);
    if (this.xhr_.upload) {
      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);
    }
  }
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {
  goog.asserts.assert(e.type === goog.net.EventType.PROGRESS, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS : goog.net.EventType.UPLOAD_PROGRESS));
};
goog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {
  return ({type:eventType, lengthComputable:e.lengthComputable, loaded:e.loaded, total:e.total});
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain || scheme == "file") {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res) || typeof goog.global["Promise"] === "function" && res instanceof goog.global["Promise"]) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.async.Delay.base(this, "constructor");
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.base(this, "disposeInternal");
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function(opt_interval) {
  if (!this.isActive()) {
    this.start(opt_interval);
  }
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return {callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[String(this.transportType)] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return {"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetupCb_;
goog.net.xpc.FrameElementMethodTransport.prototype.outgoing_;
goog.net.xpc.FrameElementMethodTransport.prototype.iframeElm_;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.prototype.ackReceiver_;
goog.net.xpc.IframePollingTransport.prototype.ackSender_;
goog.net.xpc.IframePollingTransport.prototype.ackIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.ackWinObj_;
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresentCb_;
goog.net.xpc.IframePollingTransport.prototype.deliveryQueue_;
goog.net.xpc.IframePollingTransport.prototype.msgIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.msgReceiver_;
goog.net.xpc.IframePollingTransport.prototype.msgSender_;
goog.net.xpc.IframePollingTransport.prototype.msgWinObj_;
goog.net.xpc.IframePollingTransport.prototype.rcvdConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetup_;
goog.net.xpc.IframePollingTransport.prototype.parts_;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return !this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return {};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement(goog.dom.TagName.IFRAME);
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  if (!/^https?:\/\//.test(url)) {
    throw Error("URL " + url + " is invalid");
  }
  this.sanitizedSendUri_ = url;
  this.sendFrame_ = (windowObj);
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sanitizedSendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement(goog.dom.TagName.DIV);
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.createIframe(null, null, {"onload":goog.string.Const.from("this.xpcOnload()"), "sandbox":null}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement(goog.dom.TagName.IFRAME);
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.prototype.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, (msgEvt.getBrowserEvent()).origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return !!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement(goog.dom.TagName.IFRAME);
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return (iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    this.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
  }
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed() || this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Channel closed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(opt_origin)) || goog.string.isEmptyOrWhitespace(goog.string.makeSafe(peerHostname)) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.reconnectTimer_ = null;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return !!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.getBufferedAmount = function() {
  return this.webSocket_.bufferedAmount;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
clojure.browser.event.IEventType = function() {
};
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$event$IEventType$event_types$arity$1 == null)) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.event.event_types[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = clojure.browser.event.event_types["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
      }
    }
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9620) {
      var vec__9621 = p__9620;
      var k = cljs.core.nth.call(null, vec__9621, 0, null);
      var v = cljs.core.nth.call(null, vec__9621, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__9622) {
        var vec__9623 = p__9622;
        var k = cljs.core.nth.call(null, vec__9623, 0, null);
        var v = cljs.core.nth.call(null, vec__9623, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function clojure$browser$event$listen(var_args) {
  var args9624 = [];
  var len__7263__auto___9627 = arguments.length;
  var i__7264__auto___9628 = 0;
  while (true) {
    if (i__7264__auto___9628 < len__7263__auto___9627) {
      args9624.push(arguments[i__7264__auto___9628]);
      var G__9629 = i__7264__auto___9628 + 1;
      i__7264__auto___9628 = G__9629;
      continue;
    } else {
    }
    break;
  }
  var G__9626 = args9624.length;
  switch(G__9626) {
    case 3:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9624.length)].join(""));;
  }
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen.call(null, src, type, fn, false);
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen.cljs$lang$maxFixedArity = 4;
clojure.browser.event.listen_once = function clojure$browser$event$listen_once(var_args) {
  var args9631 = [];
  var len__7263__auto___9634 = arguments.length;
  var i__7264__auto___9635 = 0;
  while (true) {
    if (i__7264__auto___9635 < len__7263__auto___9634) {
      args9631.push(arguments[i__7264__auto___9635]);
      var G__9636 = i__7264__auto___9635 + 1;
      i__7264__auto___9635 = G__9636;
      continue;
    } else {
    }
    break;
  }
  var G__9633 = args9631.length;
  switch(G__9633) {
    case 3:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9631.length)].join(""));;
  }
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen_once.call(null, src, type, fn, false);
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen_once.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten = function clojure$browser$event$unlisten(var_args) {
  var args9638 = [];
  var len__7263__auto___9641 = arguments.length;
  var i__7264__auto___9642 = 0;
  while (true) {
    if (i__7264__auto___9642 < len__7263__auto___9641) {
      args9638.push(arguments[i__7264__auto___9642]);
      var G__9643 = i__7264__auto___9642 + 1;
      i__7264__auto___9642 = G__9643;
      continue;
    } else {
    }
    break;
  }
  var G__9640 = args9638.length;
  switch(G__9640) {
    case 3:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9638.length)].join(""));;
  }
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.unlisten.call(null, src, type, fn, false);
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.unlisten.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.WebSocket");
goog.require("goog.net.EventType");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
goog.require("goog.net.xpc.CrossPageChannel");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__9647) {
  var vec__9648 = p__9647;
  var k = cljs.core.nth.call(null, vec__9648, 0, null);
  var v = cljs.core.nth.call(null, vec__9648, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
};
clojure.browser.net.connect = function clojure$browser$net$connect(var_args) {
  var args9649 = [];
  var len__7263__auto___9655 = arguments.length;
  var i__7264__auto___9656 = 0;
  while (true) {
    if (i__7264__auto___9656 < len__7263__auto___9655) {
      args9649.push(arguments[i__7264__auto___9656]);
      var G__9657 = i__7264__auto___9656 + 1;
      i__7264__auto___9656 = G__9657;
      continue;
    } else {
    }
    break;
  }
  var G__9651 = args9649.length;
  switch(G__9651) {
    case 1:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9649.length)].join(""));;
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.connect[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2 = function(this$, opt1) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.connect[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt1);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt1);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3 = function(this$, opt1, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.connect[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt1, opt2);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt1, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4 = function(this$, opt1, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.connect[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt1, opt2, opt3);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt1, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$lang$maxFixedArity = 4;
clojure.browser.net.transmit = function clojure$browser$net$transmit(var_args) {
  var args9652 = [];
  var len__7263__auto___9659 = arguments.length;
  var i__7264__auto___9660 = 0;
  while (true) {
    if (i__7264__auto___9660 < len__7263__auto___9659) {
      args9652.push(arguments[i__7264__auto___9660]);
      var G__9661 = i__7264__auto___9660 + 1;
      i__7264__auto___9660 = G__9661;
      continue;
    } else {
    }
    break;
  }
  var G__9654 = args9652.length;
  switch(G__9654) {
    case 2:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9652.length)].join(""));;
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2 = function(this$, opt) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3 = function(this$, opt, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt, opt2);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4 = function(this$, opt, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt, opt2, opt3);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5 = function(this$, opt, opt2, opt3, opt4) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$5 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt, opt2, opt3, opt4);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt, opt2, opt3, opt4);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6 = function(this$, opt, opt2, opt3, opt4, opt5) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$6 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, opt, opt2, opt3, opt4, opt5);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$lang$maxFixedArity = 6;
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$close$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.close[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.close["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
      }
    }
  }
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9663) {
      var vec__9664 = p__9663;
      var k = cljs.core.nth.call(null, vec__9664, 0, null);
      var v = cljs.core.nth.call(null, vec__9664, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__9665) {
  var vec__9666 = p__9665;
  var k = cljs.core.nth.call(null, vec__9666, 0, null);
  var v = cljs.core.nth.call(null, vec__9666, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
};
clojure.browser.net.register_service = function clojure$browser$net$register_service(var_args) {
  var args9667 = [];
  var len__7263__auto___9670 = arguments.length;
  var i__7264__auto___9671 = 0;
  while (true) {
    if (i__7264__auto___9671 < len__7263__auto___9670) {
      args9667.push(arguments[i__7264__auto___9671]);
      var G__9672 = i__7264__auto___9671 + 1;
      i__7264__auto___9671 = G__9672;
      continue;
    } else {
    }
    break;
  }
  var G__9669 = args9667.length;
  switch(G__9669) {
    case 3:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9667.length)].join(""));;
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3 = function(this$, service_name, fn) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.register_service[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, service_name, fn);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, service_name, fn);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.register_service[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, service_name, fn, encode_json_QMARK_);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, service_name, fn, encode_json_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$lang$maxFixedArity = 4;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
clojure.browser.net.xpc_connection = function clojure$browser$net$xpc_connection(var_args) {
  var args9674 = [];
  var len__7263__auto___9682 = arguments.length;
  var i__7264__auto___9683 = 0;
  while (true) {
    if (i__7264__auto___9683 < len__7263__auto___9682) {
      args9674.push(arguments[i__7264__auto___9683]);
      var G__9684 = i__7264__auto___9683 + 1;
      i__7264__auto___9683 = G__9684;
      continue;
    } else {
    }
    break;
  }
  var G__9676 = args9674.length;
  switch(G__9676) {
    case 0:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9674.length)].join(""));;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  var temp__4425__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
  if (cljs.core.truth_(temp__4425__auto__)) {
    var config = temp__4425__auto__;
    return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
  } else {
    return null;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1 = function(config) {
  return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__9677) {
    var vec__9678 = p__9677;
    var k = cljs.core.nth.call(null, vec__9678, 0, null);
    var v = cljs.core.nth.call(null, vec__9678, 1, null);
    var temp__4423__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var field = temp__4423__auto__;
      var G__9679 = sum;
      G__9679[field] = v;
      return G__9679;
    } else {
      return sum;
    }
  }, {}, config));
};
clojure.browser.net.xpc_connection.cljs$lang$maxFixedArity = 1;
clojure.browser.net.IWebSocket = function() {
};
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 == null)) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = clojure.browser.net.open_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
      }
    }
  }
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9686) {
      var vec__9687 = p__9686;
      var k = cljs.core.nth.call(null, vec__9687, 0, null);
      var v = cljs.core.nth.call(null, vec__9687, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
clojure.browser.net.websocket_connection = function clojure$browser$net$websocket_connection(var_args) {
  var args9688 = [];
  var len__7263__auto___9691 = arguments.length;
  var i__7264__auto___9692 = 0;
  while (true) {
    if (i__7264__auto___9692 < len__7263__auto___9691) {
      args9688.push(arguments[i__7264__auto___9692]);
      var G__9693 = i__7264__auto___9692 + 1;
      i__7264__auto___9692 = G__9693;
      continue;
    } else {
    }
    break;
  }
  var G__9690 = args9688.length;
  switch(G__9690) {
    case 0:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9688.length)].join(""));;
  }
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.browser.net.websocket_connection.call(null, null, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1 = function(auto_reconnect_QMARK_) {
  return clojure.browser.net.websocket_connection.call(null, auto_reconnect_QMARK_, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
  return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
};
clojure.browser.net.websocket_connection.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.repl");
goog.require("cljs.core");
cljs.repl.print_doc = function cljs$repl$print_doc(m) {
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str(function() {
    var temp__4425__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var ns = temp__4425__auto__;
      return [cljs.core.str(ns), cljs.core.str("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__10375_10389 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__10376_10390 = null;
    var count__10377_10391 = 0;
    var i__10378_10392 = 0;
    while (true) {
      if (i__10378_10392 < count__10377_10391) {
        var f_10393 = cljs.core._nth.call(null, chunk__10376_10390, i__10378_10392);
        cljs.core.println.call(null, "  ", f_10393);
        var G__10394 = seq__10375_10389;
        var G__10395 = chunk__10376_10390;
        var G__10396 = count__10377_10391;
        var G__10397 = i__10378_10392 + 1;
        seq__10375_10389 = G__10394;
        chunk__10376_10390 = G__10395;
        count__10377_10391 = G__10396;
        i__10378_10392 = G__10397;
        continue;
      } else {
        var temp__4425__auto___10398 = cljs.core.seq.call(null, seq__10375_10389);
        if (temp__4425__auto___10398) {
          var seq__10375_10399__$1 = temp__4425__auto___10398;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10375_10399__$1)) {
            var c__7004__auto___10400 = cljs.core.chunk_first.call(null, seq__10375_10399__$1);
            var G__10401 = cljs.core.chunk_rest.call(null, seq__10375_10399__$1);
            var G__10402 = c__7004__auto___10400;
            var G__10403 = cljs.core.count.call(null, c__7004__auto___10400);
            var G__10404 = 0;
            seq__10375_10389 = G__10401;
            chunk__10376_10390 = G__10402;
            count__10377_10391 = G__10403;
            i__10378_10392 = G__10404;
            continue;
          } else {
            var f_10405 = cljs.core.first.call(null, seq__10375_10399__$1);
            cljs.core.println.call(null, "  ", f_10405);
            var G__10406 = cljs.core.next.call(null, seq__10375_10399__$1);
            var G__10407 = null;
            var G__10408 = 0;
            var G__10409 = 0;
            seq__10375_10389 = G__10406;
            chunk__10376_10390 = G__10407;
            count__10377_10391 = G__10408;
            i__10378_10392 = G__10409;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      var arglists_10410 = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(function() {
        var or__6193__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return (new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, arglists_10410);
      } else {
        cljs.core.prn.call(null, cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists_10410)) ? cljs.core.second.call(null, arglists_10410) : arglists_10410);
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/special_forms#"), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__10379 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__10380 = null;
      var count__10381 = 0;
      var i__10382 = 0;
      while (true) {
        if (i__10382 < count__10381) {
          var vec__10383 = cljs.core._nth.call(null, chunk__10380, i__10382);
          var name = cljs.core.nth.call(null, vec__10383, 0, null);
          var map__10384 = cljs.core.nth.call(null, vec__10383, 1, null);
          var map__10384__$1 = (!(map__10384 == null) ? map__10384.cljs$lang$protocol_mask$partition0$ & 64 || map__10384.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10384) : map__10384;
          var doc = cljs.core.get.call(null, map__10384__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          var arglists = cljs.core.get.call(null, map__10384__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name);
          cljs.core.println.call(null, " ", arglists);
          if (cljs.core.truth_(doc)) {
            cljs.core.println.call(null, " ", doc);
          } else {
          }
          var G__10411 = seq__10379;
          var G__10412 = chunk__10380;
          var G__10413 = count__10381;
          var G__10414 = i__10382 + 1;
          seq__10379 = G__10411;
          chunk__10380 = G__10412;
          count__10381 = G__10413;
          i__10382 = G__10414;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__10379);
          if (temp__4425__auto__) {
            var seq__10379__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10379__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__10379__$1);
              var G__10415 = cljs.core.chunk_rest.call(null, seq__10379__$1);
              var G__10416 = c__7004__auto__;
              var G__10417 = cljs.core.count.call(null, c__7004__auto__);
              var G__10418 = 0;
              seq__10379 = G__10415;
              chunk__10380 = G__10416;
              count__10381 = G__10417;
              i__10382 = G__10418;
              continue;
            } else {
              var vec__10386 = cljs.core.first.call(null, seq__10379__$1);
              var name = cljs.core.nth.call(null, vec__10386, 0, null);
              var map__10387 = cljs.core.nth.call(null, vec__10386, 1, null);
              var map__10387__$1 = (!(map__10387 == null) ? map__10387.cljs$lang$protocol_mask$partition0$ & 64 || map__10387.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10387) : map__10387;
              var doc = cljs.core.get.call(null, map__10387__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              var arglists = cljs.core.get.call(null, map__10387__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name);
              cljs.core.println.call(null, " ", arglists);
              if (cljs.core.truth_(doc)) {
                cljs.core.println.call(null, " ", doc);
              } else {
              }
              var G__10419 = cljs.core.next.call(null, seq__10379__$1);
              var G__10420 = null;
              var G__10421 = 0;
              var G__10422 = 0;
              seq__10379 = G__10419;
              chunk__10380 = G__10420;
              count__10381 = G__10421;
              i__10382 = G__10422;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.userAgent.product");
goog.require("goog.array");
goog.require("goog.object");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
goog.require("cljs.repl");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.print_queue = [];
clojure.browser.repl.flush_print_queue_BANG_ = function clojure$browser$repl$flush_print_queue_BANG_(conn) {
  var seq__10429_10433 = cljs.core.seq.call(null, clojure.browser.repl.print_queue);
  var chunk__10430_10434 = null;
  var count__10431_10435 = 0;
  var i__10432_10436 = 0;
  while (true) {
    if (i__10432_10436 < count__10431_10435) {
      var str_10437 = cljs.core._nth.call(null, chunk__10430_10434, i__10432_10436);
      clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_10437);
      var G__10438 = seq__10429_10433;
      var G__10439 = chunk__10430_10434;
      var G__10440 = count__10431_10435;
      var G__10441 = i__10432_10436 + 1;
      seq__10429_10433 = G__10438;
      chunk__10430_10434 = G__10439;
      count__10431_10435 = G__10440;
      i__10432_10436 = G__10441;
      continue;
    } else {
      var temp__4425__auto___10442 = cljs.core.seq.call(null, seq__10429_10433);
      if (temp__4425__auto___10442) {
        var seq__10429_10443__$1 = temp__4425__auto___10442;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10429_10443__$1)) {
          var c__7004__auto___10444 = cljs.core.chunk_first.call(null, seq__10429_10443__$1);
          var G__10445 = cljs.core.chunk_rest.call(null, seq__10429_10443__$1);
          var G__10446 = c__7004__auto___10444;
          var G__10447 = cljs.core.count.call(null, c__7004__auto___10444);
          var G__10448 = 0;
          seq__10429_10433 = G__10445;
          chunk__10430_10434 = G__10446;
          count__10431_10435 = G__10447;
          i__10432_10436 = G__10448;
          continue;
        } else {
          var str_10449 = cljs.core.first.call(null, seq__10429_10443__$1);
          clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_10449);
          var G__10450 = cljs.core.next.call(null, seq__10429_10443__$1);
          var G__10451 = null;
          var G__10452 = 0;
          var G__10453 = 0;
          seq__10429_10433 = G__10450;
          chunk__10430_10434 = G__10451;
          count__10431_10435 = G__10452;
          i__10432_10436 = G__10453;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return goog.array.clear(clojure.browser.repl.print_queue);
};
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  clojure.browser.repl.print_queue.push(cljs.core.pr_str.call(null, data));
  var temp__4425__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var conn = temp__4425__auto__;
    return clojure.browser.repl.flush_print_queue_BANG_.call(null, conn);
  } else {
    return null;
  }
};
cljs.core._STAR_print_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_err_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_newline_STAR_ = true;
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.userAgent.product.SAFARI)) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.userAgent.product.CHROME)) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.userAgent.product.FIREFOX)) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.userAgent.product.IE)) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e10455) {
      var e = e10455;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function clojure$browser$repl$send_print(var_args) {
  var args10456 = [];
  var len__7263__auto___10459 = arguments.length;
  var i__7264__auto___10460 = 0;
  while (true) {
    if (i__7264__auto___10460 < len__7263__auto___10459) {
      args10456.push(arguments[i__7264__auto___10460]);
      var G__10461 = i__7264__auto___10460 + 1;
      i__7264__auto___10460 = G__10461;
      continue;
    } else {
    }
    break;
  }
  var G__10458 = args10456.length;
  switch(G__10458) {
    case 2:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10456.length)].join(""));;
  }
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2 = function(url, data) {
  return clojure.browser.repl.send_print.call(null, url, data, 0);
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3 = function(url, data, n) {
  var conn = clojure.browser.net.xhr_connection.call(null);
  clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
    return function(_) {
      if (n < 10) {
        return clojure.browser.repl.send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    };
  }(conn));
  return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print.cljs$lang$maxFixedArity = 3;
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4423__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var repl_connection = temp__4423__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4423__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4423__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4423__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4423__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4423__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.constructNamespace_("cljs.user");
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__6181__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__6181__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__6181__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__10466 = script;
          goog.object.set(G__10466, "type", "text/javascript");
          goog.object.set(G__10466, "onload", onload);
          goog.object.set(G__10466, "onreadystatechange", onload);
          return G__10466;
        }();
        var script__$2 = opt_sourceText == null ? function() {
          var G__10467 = script__$1;
          goog.object.set(G__10467, "src", src);
          return G__10467;
        }() : function() {
          var G__10468 = script__$1;
          goog.dom.setTextContext(G__10468, opt_sourceText);
          return G__10468;
        }();
        return script__$2;
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__6193__auto__ = reload;
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_10469 = goog.dependencies_.nameToPath[src];
        goog.object.remove(goog.dependencies_.visited, path_10469);
        goog.object.remove(goog.dependencies_.written, path_10469);
        goog.object.remove(goog.dependencies_.written, [cljs.core.str(goog.basePath), cljs.core.str(path_10469)].join(""));
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("goog.net.jsloader");
goog.provide("goog.net.jsloader.Error");
goog.provide("goog.net.jsloader.ErrorCode");
goog.provide("goog.net.jsloader.Options");
goog.require("goog.array");
goog.require("goog.async.Deferred");
goog.require("goog.debug.Error");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.object");
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5E3;
goog.net.jsloader.Options;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.scriptLoadingDeferred_;
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if (!uris.length) {
    return goog.async.Deferred.succeed(null);
  }
  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    return goog.net.jsloader.scriptLoadingDeferred_;
  }
  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
    return deferred;
  };
  goog.net.jsloader.scriptLoadingDeferred_ = popAndLoadNextScript();
  return goog.net.jsloader.scriptLoadingDeferred_;
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;
  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_:script, timeout_:undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == "loaded" || script.readyState == "complete") {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri));
  };
  var properties = options.attributes || {};
  goog.object.extend(properties, {"type":"text/javascript", "charset":"UTF-8", "src":uri});
  goog.dom.setProperties(script, properties);
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);
  return deferred;
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if (goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."));
  }
  var sendDeferred = goog.net.jsloader.load(uri, options);
  var deferred = new goog.async.Deferred(goog.bind(sendDeferred.cancel, sendDeferred));
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."));
    }
  });
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });
  return deferred;
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == goog.dom.TagName.SCRIPT) {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  if (opt_message) {
    msg += ": " + opt_message;
  }
  goog.net.jsloader.Error.base(this, "constructor", msg);
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
goog.provide("goog.net.Jsonp");
goog.require("goog.Uri");
goog.require("goog.net.jsloader");
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5E3;
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.prototype.setRequestTimeout = function(timeout) {
  this.timeout_ = timeout;
};
goog.net.Jsonp.prototype.getRequestTimeout = function() {
  return this.timeout_;
};
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null;
  var id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  if (!goog.global[goog.net.Jsonp.CALLBACKS]) {
    goog.global[goog.net.Jsonp.CALLBACKS] = {};
  }
  var uri = this.uri_.clone();
  if (payload) {
    goog.net.Jsonp.addPayloadToUri_(payload, uri);
  }
  if (opt_replyCallback) {
    var reply = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback);
    goog.global[goog.net.Jsonp.CALLBACKS][id] = reply;
    uri.setParameterValues(this.callbackParamName_, goog.net.Jsonp.CALLBACKS + "." + id);
  }
  var deferred = goog.net.jsloader.load(uri.toString(), {timeout:this.timeout_, cleanupWhenDone:true});
  var error = goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback);
  deferred.addErrback(error);
  return {id_:id, deferred_:deferred};
};
goog.net.Jsonp.prototype.cancel = function(request) {
  if (request) {
    if (request.deferred_) {
      request.deferred_.cancel();
    }
    if (request.id_) {
      goog.net.Jsonp.cleanup_(request.id_, false);
    }
  }
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, false);
    if (opt_errorCallback) {
      opt_errorCallback(payload);
    }
  };
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  var handler = function(var_args) {
    goog.net.Jsonp.cleanup_(id, true);
    replyCallback.apply(undefined, arguments);
  };
  return handler;
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  if (goog.global[goog.net.Jsonp.CALLBACKS][id]) {
    if (deleteReplyHandler) {
      delete goog.global[goog.net.Jsonp.CALLBACKS][id];
    } else {
      goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.nullFunction;
    }
  }
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for (var name in payload) {
    if (!payload.hasOwnProperty || payload.hasOwnProperty(name)) {
      uri.setParameterValues(name, payload[name]);
    }
  }
  return uri;
};
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length <= CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.asserts");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  goog.asserts.assert(goog.isArrayLike(input), "encodeByteArray takes an array as a parameter");
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__10525__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__10525 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10526__i = 0, G__10526__a = new Array(arguments.length - 0);
        while (G__10526__i < G__10526__a.length) {
          G__10526__a[G__10526__i] = arguments[G__10526__i + 0];
          ++G__10526__i;
        }
        args = new cljs.core.IndexedSeq(G__10526__a, 0);
      }
      return G__10525__delegate.call(this, args);
    };
    G__10525.cljs$lang$maxFixedArity = 0;
    G__10525.cljs$lang$applyTo = function(arglist__10527) {
      var args = cljs.core.seq(arglist__10527);
      return G__10525__delegate(args);
    };
    G__10525.cljs$core$IFn$_invoke$arity$variadic = G__10525__delegate;
    return G__10525;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args10528 = [];
  var len__7263__auto___10531 = arguments.length;
  var i__7264__auto___10532 = 0;
  while (true) {
    if (i__7264__auto___10532 < len__7263__auto___10531) {
      args10528.push(arguments[i__7264__auto___10532]);
      var G__10533 = i__7264__auto___10532 + 1;
      i__7264__auto___10532 = G__10533;
      continue;
    } else {
    }
    break;
  }
  var G__10530 = args10528.length;
  switch(G__10530) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10528.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__10535 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__10536 = cljs.core.next.call(null, coll__$1);
      sb = G__10535;
      coll__$1 = G__10536;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__10537 = sb;
      var G__10538 = coll__$2;
      sb = G__10537;
      coll__$1 = G__10538;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__10539 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__10539;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit && 1 < cljs.core.count.call(null, v)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__10543 = cljs.core._EQ__EQ_;
    var expr__10544 = limit;
    if (cljs.core.truth_(pred__10543.call(null, 1, expr__10544))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__10543.call(null, 2, expr__10544))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args10546 = [];
  var len__7263__auto___10549 = arguments.length;
  var i__7264__auto___10550 = 0;
  while (true) {
    if (i__7264__auto___10550 < len__7263__auto___10549) {
      args10546.push(arguments[i__7264__auto___10550]);
      var G__10551 = i__7264__auto___10550 + 1;
      i__7264__auto___10550 = G__10551;
      continue;
    } else {
    }
    break;
  }
  var G__10548 = args10546.length;
  switch(G__10548) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10546.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__10553 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__10554 = limit__$1 - 1;
          var G__10555 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__10553;
          limit__$1 = G__10554;
          parts = G__10555;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__10556 = index - 1;
        index = G__10556;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__10557 = index + 1;
      index = G__10557;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args10558 = [];
  var len__7263__auto___10561 = arguments.length;
  var i__7264__auto___10562 = 0;
  while (true) {
    if (i__7264__auto___10562 < len__7263__auto___10561) {
      args10558.push(arguments[i__7264__auto___10562]);
      var G__10563 = i__7264__auto___10562 + 1;
      i__7264__auto___10562 = G__10563;
      continue;
    } else {
    }
    break;
  }
  var G__10560 = args10558.length;
  switch(G__10560) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10558.length)].join(""));;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args10565 = [];
  var len__7263__auto___10568 = arguments.length;
  var i__7264__auto___10569 = 0;
  while (true) {
    if (i__7264__auto___10569 < len__7263__auto___10568) {
      args10565.push(arguments[i__7264__auto___10569]);
      var G__10570 = i__7264__auto___10569 + 1;
      i__7264__auto___10569 = G__10570;
      continue;
    } else {
    }
    break;
  }
  var G__10567 = args10565.length;
  switch(G__10567) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10565.length)].join(""));;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__6856__auto__ = reader == null ? null : reader;
    var m__6857__auto__ = cljs.reader.read_char[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, reader);
    } else {
      var m__6857__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__6856__auto__ = reader == null ? null : reader;
    var m__6857__auto__ = cljs.reader.unread[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, reader, ch);
    } else {
      var m__6857__auto____$1 = cljs.reader.unread["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__6193__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10576 = arguments.length;
  var i__7264__auto___10577 = 0;
  while (true) {
    if (i__7264__auto___10577 < len__7263__auto___10576) {
      args__7270__auto__.push(arguments[i__7264__auto___10577]);
      var G__10578 = i__7264__auto___10577 + 1;
      i__7264__auto___10577 = G__10578;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq10574) {
  var G__10575 = cljs.core.first.call(null, seq10574);
  var seq10574__$1 = cljs.core.next.call(null, seq10574);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__10575, seq10574__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__6181__auto__ = !(ch === "#");
  if (and__6181__auto__) {
    var and__6181__auto____$1 = !(ch === "'");
    if (and__6181__auto____$1) {
      var and__6181__auto____$2 = !(ch === ":");
      if (and__6181__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__6181__auto____$2;
      }
    } else {
      return and__6181__auto____$1;
    }
  } else {
    return and__6181__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__10579 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__10580 = cljs.reader.read_char.call(null, rdr);
      sb = G__10579;
      ch = G__10580;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__10581 = cljs.reader.read_char.call(null, rdr);
      ch = G__10581;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4423__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var macrofn = temp__4423__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__10582 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__10582;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__10583 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__10583;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4423__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var obj = temp__4423__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__6193__auto__ = ch == null;
      if (or__6193__auto__) {
        return or__6193__auto__;
      } else {
        var or__6193__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__6193__auto____$1) {
          return or__6193__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__6193__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__10584 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__10585 = cljs.reader.read_char.call(null, reader);
      buffer = G__10584;
      ch = G__10585;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__10586 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__10587 = cljs.reader.read_char.call(null, reader);
        buffer = G__10586;
        ch = G__10587;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__10588 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__10589 = cljs.reader.read_char.call(null, reader);
          buffer = G__10588;
          ch = G__10589;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__10594 = function() {
            var G__10592 = buffer;
            G__10592.append(nch);
            return G__10592;
          }();
          var G__10595 = cljs.reader.read_char.call(null, reader);
          buffer = G__10594;
          ch = G__10595;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__10596 = function() {
            var G__10593 = buffer;
            G__10593.append(ch);
            return G__10593;
          }();
          var G__10597 = cljs.reader.read_char.call(null, reader);
          buffer = G__10596;
          ch = G__10597;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__6181__auto__)) {
      return !(token.length === 1);
    } else {
      return and__6181__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_literal = function cljs$reader$read_literal(rdr, ch) {
  var token = cljs.reader.read_token.call(null, rdr, ch);
  var chars = cljs.core.subs.call(null, token, 1);
  if (chars.length === 1) {
    return chars;
  } else {
    if (chars === "tab") {
      return "\t";
    } else {
      if (chars === "return") {
        return "\r";
      } else {
        if (chars === "newline") {
          return "\n";
        } else {
          if (chars === "space") {
            return " ";
          } else {
            if (chars === "backspace") {
              return "\b";
            } else {
              if (chars === "formfeed") {
                return "\f";
              } else {
                if (chars.charAt(0) === "u") {
                  return cljs.reader.make_unicode_char.call(null, cljs.core.subs.call(null, chars, 1));
                } else {
                  if (chars.charAt(0) === "o") {
                    return cljs.reader.not_implemented.call(null, rdr, token);
                  } else {
                    return cljs.reader.reader_error.call(null, rdr, "Unknown character literal: ", token);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    var x__7027__auto__ = sym;
    return cljs.core._conj.call(null, function() {
      var x__7027__auto____$1 = cljs.reader.read.call(null, rdr, true, null, true);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
    }(), x__7027__auto__);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_literal;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__10600 = reader;
        var G__10601 = eof_is_error;
        var G__10602 = sentinel;
        var G__10603 = is_recursive;
        reader = G__10600;
        eof_is_error = G__10601;
        sentinel = G__10602;
        is_recursive = G__10603;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__10604 = cljs.reader.read_comment.call(null, reader, ch);
          var G__10605 = eof_is_error;
          var G__10606 = sentinel;
          var G__10607 = is_recursive;
          reader = G__10604;
          eof_is_error = G__10605;
          sentinel = G__10606;
          is_recursive = G__10607;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__10608 = reader;
            var G__10609 = eof_is_error;
            var G__10610 = sentinel;
            var G__10611 = is_recursive;
            reader = G__10608;
            eof_is_error = G__10609;
            sentinel = G__10610;
            is_recursive = G__10611;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__10612 = b.append("0");
          b = G__10612;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__6181__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__6181__auto__)) {
    var or__6193__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__6181__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__10614 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__10614, 0, null);
  var years = cljs.core.nth.call(null, vec__10614, 1, null);
  var months = cljs.core.nth.call(null, vec__10614, 2, null);
  var days = cljs.core.nth.call(null, vec__10614, 3, null);
  var hours = cljs.core.nth.call(null, vec__10614, 4, null);
  var minutes = cljs.core.nth.call(null, vec__10614, 5, null);
  var seconds = cljs.core.nth.call(null, vec__10614, 6, null);
  var fraction = cljs.core.nth.call(null, vec__10614, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__10614, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__10614, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__10614, 10, null);
  var v = vec__10614;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__6193__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4423__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var vec__10616 = temp__4423__auto__;
    var years = cljs.core.nth.call(null, vec__10616, 0, null);
    var months = cljs.core.nth.call(null, vec__10616, 1, null);
    var days = cljs.core.nth.call(null, vec__10616, 2, null);
    var hours = cljs.core.nth.call(null, vec__10616, 3, null);
    var minutes = cljs.core.nth.call(null, vec__10616, 4, null);
    var seconds = cljs.core.nth.call(null, vec__10616, 5, null);
    var ms = cljs.core.nth.call(null, vec__10616, 6, null);
    var offset = cljs.core.nth.call(null, vec__10616, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__10629_10641 = cljs.core.seq.call(null, form);
    var chunk__10630_10642 = null;
    var count__10631_10643 = 0;
    var i__10632_10644 = 0;
    while (true) {
      if (i__10632_10644 < count__10631_10643) {
        var x_10645 = cljs.core._nth.call(null, chunk__10630_10642, i__10632_10644);
        arr.push(x_10645);
        var G__10646 = seq__10629_10641;
        var G__10647 = chunk__10630_10642;
        var G__10648 = count__10631_10643;
        var G__10649 = i__10632_10644 + 1;
        seq__10629_10641 = G__10646;
        chunk__10630_10642 = G__10647;
        count__10631_10643 = G__10648;
        i__10632_10644 = G__10649;
        continue;
      } else {
        var temp__4425__auto___10650 = cljs.core.seq.call(null, seq__10629_10641);
        if (temp__4425__auto___10650) {
          var seq__10629_10651__$1 = temp__4425__auto___10650;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10629_10651__$1)) {
            var c__7004__auto___10652 = cljs.core.chunk_first.call(null, seq__10629_10651__$1);
            var G__10653 = cljs.core.chunk_rest.call(null, seq__10629_10651__$1);
            var G__10654 = c__7004__auto___10652;
            var G__10655 = cljs.core.count.call(null, c__7004__auto___10652);
            var G__10656 = 0;
            seq__10629_10641 = G__10653;
            chunk__10630_10642 = G__10654;
            count__10631_10643 = G__10655;
            i__10632_10644 = G__10656;
            continue;
          } else {
            var x_10657 = cljs.core.first.call(null, seq__10629_10651__$1);
            arr.push(x_10657);
            var G__10658 = cljs.core.next.call(null, seq__10629_10651__$1);
            var G__10659 = null;
            var G__10660 = 0;
            var G__10661 = 0;
            seq__10629_10641 = G__10658;
            chunk__10630_10642 = G__10659;
            count__10631_10643 = G__10660;
            i__10632_10644 = G__10661;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__10635_10662 = cljs.core.seq.call(null, form);
      var chunk__10636_10663 = null;
      var count__10637_10664 = 0;
      var i__10638_10665 = 0;
      while (true) {
        if (i__10638_10665 < count__10637_10664) {
          var vec__10639_10666 = cljs.core._nth.call(null, chunk__10636_10663, i__10638_10665);
          var k_10667 = cljs.core.nth.call(null, vec__10639_10666, 0, null);
          var v_10668 = cljs.core.nth.call(null, vec__10639_10666, 1, null);
          obj[cljs.core.name.call(null, k_10667)] = v_10668;
          var G__10669 = seq__10635_10662;
          var G__10670 = chunk__10636_10663;
          var G__10671 = count__10637_10664;
          var G__10672 = i__10638_10665 + 1;
          seq__10635_10662 = G__10669;
          chunk__10636_10663 = G__10670;
          count__10637_10664 = G__10671;
          i__10638_10665 = G__10672;
          continue;
        } else {
          var temp__4425__auto___10673 = cljs.core.seq.call(null, seq__10635_10662);
          if (temp__4425__auto___10673) {
            var seq__10635_10674__$1 = temp__4425__auto___10673;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10635_10674__$1)) {
              var c__7004__auto___10675 = cljs.core.chunk_first.call(null, seq__10635_10674__$1);
              var G__10676 = cljs.core.chunk_rest.call(null, seq__10635_10674__$1);
              var G__10677 = c__7004__auto___10675;
              var G__10678 = cljs.core.count.call(null, c__7004__auto___10675);
              var G__10679 = 0;
              seq__10635_10662 = G__10676;
              chunk__10636_10663 = G__10677;
              count__10637_10664 = G__10678;
              i__10638_10665 = G__10679;
              continue;
            } else {
              var vec__10640_10680 = cljs.core.first.call(null, seq__10635_10674__$1);
              var k_10681 = cljs.core.nth.call(null, vec__10640_10680, 0, null);
              var v_10682 = cljs.core.nth.call(null, vec__10640_10680, 1, null);
              obj[cljs.core.name.call(null, k_10681)] = v_10682;
              var G__10683 = cljs.core.next.call(null, seq__10635_10674__$1);
              var G__10684 = null;
              var G__10685 = 0;
              var G__10686 = 0;
              seq__10635_10662 = G__10683;
              chunk__10636_10663 = G__10684;
              count__10637_10664 = G__10685;
              i__10638_10665 = G__10686;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.crypt.base64");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?#]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function no$en$core$split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (!clojure.string.blank_QMARK_.call(null, s)) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function no$en$core$split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function no$en$core$utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function no$en$core$base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function no$en$core$base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function no$en$core$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function no$en$core$url_encode(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10693 = arguments.length;
  var i__7264__auto___10694 = 0;
  while (true) {
    if (i__7264__auto___10694 < len__7263__auto___10693) {
      args__7270__auto__.push(arguments[i__7264__auto___10694]);
      var G__10695 = i__7264__auto___10694 + 1;
      i__7264__auto___10694 = G__10695;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__10691) {
  var vec__10692 = p__10691;
  var encoding = cljs.core.nth.call(null, vec__10692, 0, null);
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join("")), "*", "%2A");
  } else {
    return null;
  }
};
no.en.core.url_encode.cljs$lang$maxFixedArity = 1;
no.en.core.url_encode.cljs$lang$applyTo = function(seq10689) {
  var G__10690 = cljs.core.first.call(null, seq10689);
  var seq10689__$1 = cljs.core.next.call(null, seq10689);
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(G__10690, seq10689__$1);
};
no.en.core.url_decode = function no$en$core$url_decode(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10700 = arguments.length;
  var i__7264__auto___10701 = 0;
  while (true) {
    if (i__7264__auto___10701 < len__7263__auto___10700) {
      args__7270__auto__.push(arguments[i__7264__auto___10701]);
      var G__10702 = i__7264__auto___10701 + 1;
      i__7264__auto___10701 = G__10702;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__10698) {
  var vec__10699 = p__10698;
  var encoding = cljs.core.nth.call(null, vec__10699, 0, null);
  if (cljs.core.truth_(s)) {
    return decodeURIComponent(s);
  } else {
    return null;
  }
};
no.en.core.url_decode.cljs$lang$maxFixedArity = 1;
no.en.core.url_decode.cljs$lang$applyTo = function(seq10696) {
  var G__10697 = cljs.core.first.call(null, seq10696);
  var seq10696__$1 = cljs.core.next.call(null, seq10696);
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(G__10697, seq10696__$1);
};
no.en.core.pow = function no$en$core$pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function no$en$core$apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__10705 = clojure.string.upper_case.call(null, unit);
    switch(G__10705) {
      default:
        var G__10706 = unit;
        switch(G__10706) {
          case "M":
            return number * 1E6;
            break;
          case "B":
            return number * 1E9;
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unit)].join(""));;
        }
      ;
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function no$en$core$parse_number(s, parse_fn) {
  var temp__4423__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var matches = temp__4423__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function no$en$core$parse_bytes(s) {
  var temp__4423__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var matches = temp__4423__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__6193__auto__ = unit;
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function no$en$core$parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__10709_SHARP_) {
    return parseInt(p1__10709_SHARP_);
  });
};
no.en.core.parse_long = function no$en$core$parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__10710_SHARP_) {
    return parseInt(p1__10710_SHARP_);
  });
};
no.en.core.parse_double = function no$en$core$parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__10711_SHARP_) {
    return parseFloat(p1__10711_SHARP_);
  });
};
no.en.core.parse_float = function no$en$core$parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__10712_SHARP_) {
    return parseFloat(p1__10712_SHARP_);
  });
};
no.en.core.format_query_params = function no$en$core$format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__10715_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__10715_SHARP_);
  }, cljs.core.map.call(null, function(p1__10714_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__10714_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__10714_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__10713_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str(cljs.core.second.call(null, p1__10713_SHARP_))].join(""));
  }, cljs.core.sort_by.call(null, cljs.core.first, cljs.core.seq.call(null, m))))));
  if (!clojure.string.blank_QMARK_.call(null, params)) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function no$en$core$format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return [cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str("://")].join("") : null), cljs.core.str(function() {
      var map__10718 = m;
      var map__10718__$1 = (!(map__10718 == null) ? map__10718.cljs$lang$protocol_mask$partition0$ & 64 || map__10718.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10718) : map__10718;
      var user = cljs.core.get.call(null, map__10718__$1, new cljs.core.Keyword(null, "user", "user", 1532431356));
      var password = cljs.core.get.call(null, map__10718__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      if (cljs.core.truth_(user)) {
        return [cljs.core.str(cljs.core.truth_(user) ? user : null), cljs.core.str(cljs.core.truth_(password) ? [cljs.core.str(":"), cljs.core.str(password)].join("") : null), cljs.core.str("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(function() {
      var temp__4423__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var port = temp__4423__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return [cljs.core.str(":"), cljs.core.str(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str("?"), cljs.core.str(no.en.core.format_query_params.call(null, query_params))].join("") : null), cljs.core.str(!clojure.string.blank_QMARK_.call(null, 
    (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.parse_percent = function no$en$core$parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function no$en$core$pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function no$en$core$separator(s) {
  var temp__4423__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var matches = temp__4423__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function no$en$core$parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__10722_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__10722_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__10722_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__10721_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__10721_SHARP_));
    }, cljs.core.map.call(null, function(p1__10720_SHARP_) {
      return clojure.string.split.call(null, p1__10720_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function no$en$core$parse_url(s) {
  var temp__4423__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var matches = temp__4423__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, 
    "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), function() {
      var or__6193__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), cljs.core.nth.call(null, matches, 3), scheme]));
  } else {
    return null;
  }
};
no.en.core.with_retries_STAR_ = function no$en$core$with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4423__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e10724) {
        if (e10724 instanceof Error) {
          var e = e10724;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e10724;
        }
      }
    }();
    if (cljs.core.truth_(temp__4423__auto__)) {
      var result = temp__4423__auto__;
      return result.call(null, 0);
    } else {
      var G__10725 = n__$1 - 1;
      n__$1 = G__10725;
      continue;
    }
    break;
  }
};
no.en.core.with_retries = function no$en$core$with_retries(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10730 = arguments.length;
  var i__7264__auto___10731 = 0;
  while (true) {
    if (i__7264__auto___10731 < len__7263__auto___10730) {
      args__7270__auto__.push(arguments[i__7264__auto___10731]);
      var G__10732 = i__7264__auto___10731 + 1;
      i__7264__auto___10731 = G__10732;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 3 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(3), 0, null) : null;
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7271__auto__);
};
no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, n, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("no.en.core", "with-retries*", "no.en.core/with-retries*", 172357687, null)), function() {
    var x__7027__auto__ = n;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto__);
  }(), function() {
    var x__7027__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), function() {
      var x__7027__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto__);
  }())));
};
no.en.core.with_retries.cljs$lang$maxFixedArity = 3;
no.en.core.with_retries.cljs$lang$applyTo = function(seq10726) {
  var G__10727 = cljs.core.first.call(null, seq10726);
  var seq10726__$1 = cljs.core.next.call(null, seq10726);
  var G__10728 = cljs.core.first.call(null, seq10726__$1);
  var seq10726__$2 = cljs.core.next.call(null, seq10726__$1);
  var G__10729 = cljs.core.first.call(null, seq10726__$2);
  var seq10726__$3 = cljs.core.next.call(null, seq10726__$2);
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(G__10727, G__10728, G__10729, seq10726__$3);
};
no.en.core.with_retries.cljs$lang$macro = true;
no.en.core.editable_QMARK_ = function no$en$core$editable_QMARK_(coll) {
  if (!(coll == null)) {
    if (false || coll.cljs$core$IEditableCollection$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
  }
};
no.en.core.reduce_map = function no$en$core$reduce_map(f, coll) {
  if (cljs.core.truth_(no.en.core.editable_QMARK_.call(null, coll))) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc_BANG_), cljs.core.transient$.call(null, cljs.core.empty.call(null, coll)), coll));
  } else {
    return cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc), cljs.core.empty.call(null, coll), coll);
  }
};
no.en.core.map_keys = function no$en$core$map_keys(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, f.call(null, k), v);
    };
  }, coll);
};
no.en.core.map_vals = function no$en$core$map_vals(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, k, f.call(null, v));
    };
  }, coll);
};
no.en.core.deep_merge = function no$en$core$deep_merge(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10736 = arguments.length;
  var i__7264__auto___10737 = 0;
  while (true) {
    if (i__7264__auto___10737 < len__7263__auto___10736) {
      args__7270__auto__.push(arguments[i__7264__auto___10737]);
      var G__10738 = i__7264__auto___10737 + 1;
      i__7264__auto___10737 = G__10738;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps)) {
    return cljs.core.apply.call(null, cljs.core.merge_with, no.en.core.deep_merge, maps);
  } else {
    return cljs.core.last.call(null, maps);
  }
};
no.en.core.deep_merge.cljs$lang$maxFixedArity = 0;
no.en.core.deep_merge.cljs$lang$applyTo = function(seq10735) {
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10735));
};
no.en.core.deep_merge_with = function no$en$core$deep_merge_with(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___10741 = arguments.length;
  var i__7264__auto___10742 = 0;
  while (true) {
    if (i__7264__auto___10742 < len__7263__auto___10741) {
      args__7270__auto__.push(arguments[i__7264__auto___10742]);
      var G__10743 = i__7264__auto___10742 + 1;
      i__7264__auto___10742 = G__10743;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  return cljs.core.apply.call(null, function() {
    var no$en$core$m__delegate = function(maps__$1) {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
        return cljs.core.apply.call(null, cljs.core.merge_with, no$en$core$m, maps__$1);
      } else {
        return cljs.core.apply.call(null, f, maps__$1);
      }
    };
    var no$en$core$m = function(var_args) {
      var maps__$1 = null;
      if (arguments.length > 0) {
        var G__10744__i = 0, G__10744__a = new Array(arguments.length - 0);
        while (G__10744__i < G__10744__a.length) {
          G__10744__a[G__10744__i] = arguments[G__10744__i + 0];
          ++G__10744__i;
        }
        maps__$1 = new cljs.core.IndexedSeq(G__10744__a, 0);
      }
      return no$en$core$m__delegate.call(this, maps__$1);
    };
    no$en$core$m.cljs$lang$maxFixedArity = 0;
    no$en$core$m.cljs$lang$applyTo = function(arglist__10745) {
      var maps__$1 = cljs.core.seq(arglist__10745);
      return no$en$core$m__delegate(maps__$1);
    };
    no$en$core$m.cljs$core$IFn$_invoke$arity$variadic = no$en$core$m__delegate;
    return no$en$core$m;
  }(), maps);
};
no.en.core.deep_merge_with.cljs$lang$maxFixedArity = 1;
no.en.core.deep_merge_with.cljs$lang$applyTo = function(seq10739) {
  var G__10740 = cljs.core.first.call(null, seq10739);
  var seq10739__$1 = cljs.core.next.call(null, seq10739);
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(G__10740, seq10739__$1);
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.getTwoPwr24DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  var idZero = goog.math.Long.ValueCacheId_.ZERO;
  if (!goog.math.Long.valueCache_[idZero]) {
    goog.math.Long.valueCache_[idZero] = goog.math.Long.fromInt(0);
  }
  return goog.math.Long.valueCache_[idZero];
};
goog.math.Long.getOne = function() {
  var idOne = goog.math.Long.ValueCacheId_.ONE;
  if (!goog.math.Long.valueCache_[idOne]) {
    goog.math.Long.valueCache_[idOne] = goog.math.Long.fromInt(1);
  }
  return goog.math.Long.valueCache_[idOne];
};
goog.math.Long.getNegOne = function() {
  var idNegOne = goog.math.Long.ValueCacheId_.NEG_ONE;
  if (!goog.math.Long.valueCache_[idNegOne]) {
    goog.math.Long.valueCache_[idNegOne] = goog.math.Long.fromInt(-1);
  }
  return goog.math.Long.valueCache_[idNegOne];
};
goog.math.Long.getMaxValue = function() {
  var idMaxValue = goog.math.Long.ValueCacheId_.MAX_VALUE;
  if (!goog.math.Long.valueCache_[idMaxValue]) {
    goog.math.Long.valueCache_[idMaxValue] = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  }
  return goog.math.Long.valueCache_[idMaxValue];
};
goog.math.Long.getMinValue = function() {
  var idMinValue = goog.math.Long.ValueCacheId_.MIN_VALUE;
  if (!goog.math.Long.valueCache_[idMinValue]) {
    goog.math.Long.valueCache_[idMinValue] = goog.math.Long.fromBits(0, 2147483648 | 0);
  }
  return goog.math.Long.valueCache_[idMinValue];
};
goog.math.Long.getTwoPwr24 = function() {
  var idTwoPwr24 = goog.math.Long.ValueCacheId_.TWO_PWR_24;
  if (!goog.math.Long.valueCache_[idTwoPwr24]) {
    goog.math.Long.valueCache_[idTwoPwr24] = goog.math.Long.fromInt(1 << 24);
  }
  return goog.math.Long.valueCache_[idTwoPwr24];
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  if (typeof Symbol != "undefined") {
    types.ITERATOR = Symbol.iterator;
  } else {
    types.ITERATOR = "@@iterator";
  }
  types.TaggedValue = function Transit$TaggedValue(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740991");
  types.MIN_INT = Long.fromString("-9007199254740991");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x, 10);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function Transit$Keyword(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this._name;
  };
  types.Keyword.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Keyword.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this._name == other._name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function Transit$Symbol(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Symbol.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Symbol.prototype.toString = function() {
    return this._name;
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this._name == other._name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function Transit$UUID(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function() {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function Transit$ArrayMapIterator(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function() {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitArrayMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.TransitMapIterator = function Transit$MapIterator(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.TransitMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.mapEquals = function(me, you) {
    if (me instanceof types.TransitMap && types.isMap(you)) {
      if (me.size !== you.size) {
        return false;
      }
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (me instanceof types.TransitArrayMap && types.isMap(you)) {
        if (me.size !== you.size) {
          return false;
        }
        var entries = me._entries;
        for (var j = 0;j < entries.length;j += 2) {
          if (!eq.equals(entries[j + 1], you.get(entries[j]))) {
            return false;
          }
        }
        return true;
      } else {
        if (you != null && typeof you === "object") {
          var ks = util.objectKeys(you), kslen = ks.length;
          if (me.size === kslen) {
            for (var i = 0;i < kslen;i++) {
              var k = ks[i];
              if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
                return false;
              }
            }
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.print = function(x) {
    if (x == null) {
      return "null";
    }
    if (goog.isArray(x)) {
      return "[" + x.toString() + "]";
    } else {
      if (goog.isString(x)) {
        return '"' + x + '"';
      } else {
        return x.toString();
      }
    }
  };
  types.printMap = function(map) {
    var idx = 0, str = "TransitMap {";
    map.forEach(function(v, k) {
      str += types.print(k) + " \x3d\x3e " + types.print(v);
      if (idx < map.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.printSet = function(set) {
    var idx = 0, str = "TransitSet {";
    set.forEach(function(v) {
      str += types.print(v);
      if (idx < set.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.TransitArrayMap = function Transit$ArrayMap(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitArrayMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      var ret = this.backingMap["delete"](k);
      this.size = this.backingMap.size;
      return ret;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          var ret = this._entries[i + 1];
          this._entries.splice(i, 2);
          this.size--;
          return ret;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitArrayMap.prototype["clone"] = types.TransitArrayMap.prototype.clone;
  types.TransitArrayMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function Transit$Map(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        var ret = bucket[i + 1];
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        return ret;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitMap.prototype["clone"] = types.TransitMap.prototype.clone;
  types.TransitMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function Transit$Set(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return types.printSet(this);
  };
  types.TransitSet.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    var ret = this.map["delete"](value);
    this.size = this.map.size;
    return ret;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.clone = function() {
    var clone = types.set();
    this.forEach(function(k) {
      clone.add(k);
    });
    return clone;
  };
  types.TransitSet.prototype["clone"] = types.TransitSet.prototype.clone;
  types.TransitSet.prototype[types.ITERATOR] = function() {
    return this.values();
  };
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.TaggedValue && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function Transit$WriteCache() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function Transit$ReadCache() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function Transit$Tag(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function Transit$Decoder(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init(node);
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function Transit$JSONUnmarshaller(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function Transit$Reader(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function Transit$NilHandler() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function Transit$StringHandler() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function Transit$NumberHandler() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function Transit$IntegerHandler() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function Transit$BooleanHandler() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function Transit$ArrayHandler() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function Transit$MapHandler() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function Transit$VerboseDateHandler() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function Transit$DateHandler() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function Transit$UUIDHandler() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function Transit$KeywordHandler() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function Transit$SymbolHandler() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function Transit$TaggedHandler() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function Transit$TransitSetHandler() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function Transit$ArrayMapHandler() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function Transit$MapHandler() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function Transit$BufferHandler() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function Transit$Uint8ArrayHandler() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function Transit$Handlers() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function Transit$JSONMarshaller(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        if (k !== undefined) {
          self.handlers.set(k, v);
        } else {
          throw new Error("Cannot create handler for JavaScript undefined");
        }
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString();
    ret = ret.substr("function ".length);
    ret = ret.substr(0, ret.indexOf("("));
    isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    var arr = null, rep = null, tag = null, ks = null, i = 0;
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          ks = util.objectKeys(obj);
          ret = {};
          for (;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            arr = em.unpack(obj);
            ret = ["^ "];
            if (arr) {
              for (;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          ret = ["^ "];
          ks = util.objectKeys(obj);
          for (;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function Transit$Writer(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var util = com.cognitect.transit.util, reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.MapLike;
  transit.SetLike;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashArrayLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.objectToMap = function(obj) {
    var ret = transit.map();
    for (var p in obj) {
      if (obj.hasOwnProperty(p)) {
        ret.set(p, obj[p]);
      }
    }
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = util.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.objectToMap", transit.objectToMap);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", util.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, objectToMap:transit.objectToMap, decoder:decoder.decoder, 
    UUIDfromString:types.UUIDfromString, randomUUID:util.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = true;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.hash.call(null, this$__$1.toString());
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__10752_10756 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__10753_10757 = null;
  var count__10754_10758 = 0;
  var i__10755_10759 = 0;
  while (true) {
    if (i__10755_10759 < count__10754_10758) {
      var k_10760 = cljs.core._nth.call(null, chunk__10753_10757, i__10755_10759);
      var v_10761 = b[k_10760];
      a[k_10760] = v_10761;
      var G__10762 = seq__10752_10756;
      var G__10763 = chunk__10753_10757;
      var G__10764 = count__10754_10758;
      var G__10765 = i__10755_10759 + 1;
      seq__10752_10756 = G__10762;
      chunk__10753_10757 = G__10763;
      count__10754_10758 = G__10764;
      i__10755_10759 = G__10765;
      continue;
    } else {
      var temp__4425__auto___10766 = cljs.core.seq.call(null, seq__10752_10756);
      if (temp__4425__auto___10766) {
        var seq__10752_10767__$1 = temp__4425__auto___10766;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10752_10767__$1)) {
          var c__7004__auto___10768 = cljs.core.chunk_first.call(null, seq__10752_10767__$1);
          var G__10769 = cljs.core.chunk_rest.call(null, seq__10752_10767__$1);
          var G__10770 = c__7004__auto___10768;
          var G__10771 = cljs.core.count.call(null, c__7004__auto___10768);
          var G__10772 = 0;
          seq__10752_10756 = G__10769;
          chunk__10753_10757 = G__10770;
          count__10754_10758 = G__10771;
          i__10755_10759 = G__10772;
          continue;
        } else {
          var k_10773 = cljs.core.first.call(null, seq__10752_10767__$1);
          var v_10774 = b[k_10773];
          a[k_10773] = v_10774;
          var G__10775 = cljs.core.next.call(null, seq__10752_10767__$1);
          var G__10776 = null;
          var G__10777 = 0;
          var G__10778 = 0;
          seq__10752_10756 = G__10775;
          chunk__10753_10757 = G__10776;
          count__10754_10758 = G__10777;
          i__10755_10759 = G__10778;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader(var_args) {
  var args10779 = [];
  var len__7263__auto___10782 = arguments.length;
  var i__7264__auto___10783 = 0;
  while (true) {
    if (i__7264__auto___10783 < len__7263__auto___10782) {
      args10779.push(arguments[i__7264__auto___10783]);
      var G__10784 = i__7264__auto___10783 + 1;
      i__7264__auto___10783 = G__10784;
      continue;
    } else {
    }
    break;
  }
  var G__10781 = args10779.length;
  switch(G__10781) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10779.length)].join(""));;
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__10786 = i + 2;
        var G__10787 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__10786;
        ret = G__10787;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__10788_10792 = cljs.core.seq.call(null, v);
  var chunk__10789_10793 = null;
  var count__10790_10794 = 0;
  var i__10791_10795 = 0;
  while (true) {
    if (i__10791_10795 < count__10790_10794) {
      var x_10796 = cljs.core._nth.call(null, chunk__10789_10793, i__10791_10795);
      ret.push(x_10796);
      var G__10797 = seq__10788_10792;
      var G__10798 = chunk__10789_10793;
      var G__10799 = count__10790_10794;
      var G__10800 = i__10791_10795 + 1;
      seq__10788_10792 = G__10797;
      chunk__10789_10793 = G__10798;
      count__10790_10794 = G__10799;
      i__10791_10795 = G__10800;
      continue;
    } else {
      var temp__4425__auto___10801 = cljs.core.seq.call(null, seq__10788_10792);
      if (temp__4425__auto___10801) {
        var seq__10788_10802__$1 = temp__4425__auto___10801;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10788_10802__$1)) {
          var c__7004__auto___10803 = cljs.core.chunk_first.call(null, seq__10788_10802__$1);
          var G__10804 = cljs.core.chunk_rest.call(null, seq__10788_10802__$1);
          var G__10805 = c__7004__auto___10803;
          var G__10806 = cljs.core.count.call(null, c__7004__auto___10803);
          var G__10807 = 0;
          seq__10788_10792 = G__10804;
          chunk__10789_10793 = G__10805;
          count__10790_10794 = G__10806;
          i__10791_10795 = G__10807;
          continue;
        } else {
          var x_10808 = cljs.core.first.call(null, seq__10788_10802__$1);
          ret.push(x_10808);
          var G__10809 = cljs.core.next.call(null, seq__10788_10802__$1);
          var G__10810 = null;
          var G__10811 = 0;
          var G__10812 = 0;
          seq__10788_10792 = G__10809;
          chunk__10789_10793 = G__10810;
          count__10790_10794 = G__10811;
          i__10791_10795 = G__10812;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__10813_10817 = cljs.core.seq.call(null, v);
  var chunk__10814_10818 = null;
  var count__10815_10819 = 0;
  var i__10816_10820 = 0;
  while (true) {
    if (i__10816_10820 < count__10815_10819) {
      var x_10821 = cljs.core._nth.call(null, chunk__10814_10818, i__10816_10820);
      ret.push(x_10821);
      var G__10822 = seq__10813_10817;
      var G__10823 = chunk__10814_10818;
      var G__10824 = count__10815_10819;
      var G__10825 = i__10816_10820 + 1;
      seq__10813_10817 = G__10822;
      chunk__10814_10818 = G__10823;
      count__10815_10819 = G__10824;
      i__10816_10820 = G__10825;
      continue;
    } else {
      var temp__4425__auto___10826 = cljs.core.seq.call(null, seq__10813_10817);
      if (temp__4425__auto___10826) {
        var seq__10813_10827__$1 = temp__4425__auto___10826;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10813_10827__$1)) {
          var c__7004__auto___10828 = cljs.core.chunk_first.call(null, seq__10813_10827__$1);
          var G__10829 = cljs.core.chunk_rest.call(null, seq__10813_10827__$1);
          var G__10830 = c__7004__auto___10828;
          var G__10831 = cljs.core.count.call(null, c__7004__auto___10828);
          var G__10832 = 0;
          seq__10813_10817 = G__10829;
          chunk__10814_10818 = G__10830;
          count__10815_10819 = G__10831;
          i__10816_10820 = G__10832;
          continue;
        } else {
          var x_10833 = cljs.core.first.call(null, seq__10813_10827__$1);
          ret.push(x_10833);
          var G__10834 = cljs.core.next.call(null, seq__10813_10827__$1);
          var G__10835 = null;
          var G__10836 = 0;
          var G__10837 = 0;
          seq__10813_10817 = G__10834;
          chunk__10814_10818 = G__10835;
          count__10815_10819 = G__10836;
          i__10816_10820 = G__10837;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__10838_10842 = cljs.core.seq.call(null, v);
  var chunk__10839_10843 = null;
  var count__10840_10844 = 0;
  var i__10841_10845 = 0;
  while (true) {
    if (i__10841_10845 < count__10840_10844) {
      var x_10846 = cljs.core._nth.call(null, chunk__10839_10843, i__10841_10845);
      ret.push(x_10846);
      var G__10847 = seq__10838_10842;
      var G__10848 = chunk__10839_10843;
      var G__10849 = count__10840_10844;
      var G__10850 = i__10841_10845 + 1;
      seq__10838_10842 = G__10847;
      chunk__10839_10843 = G__10848;
      count__10840_10844 = G__10849;
      i__10841_10845 = G__10850;
      continue;
    } else {
      var temp__4425__auto___10851 = cljs.core.seq.call(null, seq__10838_10842);
      if (temp__4425__auto___10851) {
        var seq__10838_10852__$1 = temp__4425__auto___10851;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10838_10852__$1)) {
          var c__7004__auto___10853 = cljs.core.chunk_first.call(null, seq__10838_10852__$1);
          var G__10854 = cljs.core.chunk_rest.call(null, seq__10838_10852__$1);
          var G__10855 = c__7004__auto___10853;
          var G__10856 = cljs.core.count.call(null, c__7004__auto___10853);
          var G__10857 = 0;
          seq__10838_10842 = G__10854;
          chunk__10839_10843 = G__10855;
          count__10840_10844 = G__10856;
          i__10841_10845 = G__10857;
          continue;
        } else {
          var x_10858 = cljs.core.first.call(null, seq__10838_10852__$1);
          ret.push(x_10858);
          var G__10859 = cljs.core.next.call(null, seq__10838_10852__$1);
          var G__10860 = null;
          var G__10861 = 0;
          var G__10862 = 0;
          seq__10838_10842 = G__10859;
          chunk__10839_10843 = G__10860;
          count__10840_10844 = G__10861;
          i__10841_10845 = G__10862;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer(var_args) {
  var args10863 = [];
  var len__7263__auto___10874 = arguments.length;
  var i__7264__auto___10875 = 0;
  while (true) {
    if (i__7264__auto___10875 < len__7263__auto___10874) {
      args10863.push(arguments[i__7264__auto___10875]);
      var G__10876 = i__7264__auto___10875 + 1;
      i__7264__auto___10875 = G__10876;
      continue;
    } else {
    }
    break;
  }
  var G__10865 = args10863.length;
  switch(G__10865) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10863.length)].join(""));;
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__10866 = obj;
          G__10866.push(kfn.call(null, k), vfn.call(null, v));
          return G__10866;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x10867 = cljs.core.clone.call(null, handlers);
    x10867.forEach = function(x10867, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__10868 = cljs.core.seq.call(null, coll);
        var chunk__10869 = null;
        var count__10870 = 0;
        var i__10871 = 0;
        while (true) {
          if (i__10871 < count__10870) {
            var vec__10872 = cljs.core._nth.call(null, chunk__10869, i__10871);
            var k = cljs.core.nth.call(null, vec__10872, 0, null);
            var v = cljs.core.nth.call(null, vec__10872, 1, null);
            f.call(null, v, k);
            var G__10878 = seq__10868;
            var G__10879 = chunk__10869;
            var G__10880 = count__10870;
            var G__10881 = i__10871 + 1;
            seq__10868 = G__10878;
            chunk__10869 = G__10879;
            count__10870 = G__10880;
            i__10871 = G__10881;
            continue;
          } else {
            var temp__4425__auto__ = cljs.core.seq.call(null, seq__10868);
            if (temp__4425__auto__) {
              var seq__10868__$1 = temp__4425__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10868__$1)) {
                var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__10868__$1);
                var G__10882 = cljs.core.chunk_rest.call(null, seq__10868__$1);
                var G__10883 = c__7004__auto__;
                var G__10884 = cljs.core.count.call(null, c__7004__auto__);
                var G__10885 = 0;
                seq__10868 = G__10882;
                chunk__10869 = G__10883;
                count__10870 = G__10884;
                i__10871 = G__10885;
                continue;
              } else {
                var vec__10873 = cljs.core.first.call(null, seq__10868__$1);
                var k = cljs.core.nth.call(null, vec__10873, 0, null);
                var v = cljs.core.nth.call(null, vec__10873, 1, null);
                f.call(null, v, k);
                var G__10886 = cljs.core.next.call(null, seq__10868__$1);
                var G__10887 = null;
                var G__10888 = 0;
                var G__10889 = 0;
                seq__10868 = G__10886;
                chunk__10869 = G__10887;
                count__10870 = G__10888;
                i__10871 = G__10889;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x10867, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x10867;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler(var_args) {
  var args10890 = [];
  var len__7263__auto___10896 = arguments.length;
  var i__7264__auto___10897 = 0;
  while (true) {
    if (i__7264__auto___10897 < len__7263__auto___10896) {
      args10890.push(arguments[i__7264__auto___10897]);
      var G__10898 = i__7264__auto___10897 + 1;
      i__7264__auto___10897 = G__10898;
      continue;
    } else {
    }
    break;
  }
  var G__10892 = args10890.length;
  switch(G__10892) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10890.length)].join(""));;
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t_cognitect$transit10893 !== "undefined") {
  } else {
    cognitect.transit.t_cognitect$transit10893 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta10894) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta10894 = meta10894;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t_cognitect$transit10893.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10895, meta10894__$1) {
      var self__ = this;
      var _10895__$1 = this;
      return new cognitect.transit.t_cognitect$transit10893(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta10894__$1);
    };
    cognitect.transit.t_cognitect$transit10893.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10895) {
      var self__ = this;
      var _10895__$1 = this;
      return self__.meta10894;
    };
    cognitect.transit.t_cognitect$transit10893.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit10893.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit10893.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit10893.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit10893.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta10894", "meta10894", -442826229, null)], null);
    };
    cognitect.transit.t_cognitect$transit10893.cljs$lang$type = true;
    cognitect.transit.t_cognitect$transit10893.cljs$lang$ctorStr = "cognitect.transit/t_cognitect$transit10893";
    cognitect.transit.t_cognitect$transit10893.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cognitect.transit/t_cognitect$transit10893");
    };
    cognitect.transit.__GT_t_cognitect$transit10893 = function cognitect$transit$__GT_t_cognitect$transit10893(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta10894) {
      return new cognitect.transit.t_cognitect$transit10893(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta10894);
    };
  }
  return new cognitect.transit.t_cognitect$transit10893(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  var or__6193__auto__ = com.cognitect.transit.types.isUUID.call(null, x);
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    return x instanceof cljs.core.UUID;
  }
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("cognitect.transit");
goog.require("goog.userAgent");
goog.require("no.en.core");
cljs_http.util.basic_auth = function cljs_http$util$basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__10903 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__10903, 0, null);
    var password = cljs.core.nth.call(null, vec__10903, 1, null);
    return [cljs.core.str("Basic "), cljs.core.str(no.en.core.base64_encode.call(null, [cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function cljs_http$util$build_url(p__10904) {
  var map__10908 = p__10904;
  var map__10908__$1 = (!(map__10908 == null) ? map__10908.cljs$lang$protocol_mask$partition0$ & 64 || map__10908.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10908) : map__10908;
  var scheme = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  var server_name = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var server_port = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var uri = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var query_string = cljs.core.get.call(null, map__10908__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  return [cljs.core.str(function() {
    var G__10910 = new goog.Uri;
    G__10910.setScheme(cljs.core.name.call(null, function() {
      var or__6193__auto__ = scheme;
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__10910.setDomain(server_name);
    G__10910.setPort(server_port);
    G__10910.setPath(uri);
    G__10910.setQuery(query_string, true);
    return G__10910;
  }())].join("");
};
cljs_http.util.camelize = function cljs_http$util$camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function cljs_http$util$build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function cljs_http$util$user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function cljs_http$util$android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function cljs_http$util$transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function cljs_http$util$transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function cljs_http$util$json_decode(s) {
  var temp__4423__auto__ = !clojure.string.blank_QMARK_.call(null, s) ? JSON.parse(s) : null;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var v = temp__4423__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function cljs_http$util$json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function cljs_http$util$parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__10912_SHARP_, p2__10911_SHARP_) {
    var vec__10914 = clojure.string.split.call(null, p2__10911_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__10914, 0, null);
    var v = cljs.core.nth.call(null, vec__10914, 1, null);
    if (clojure.string.blank_QMARK_.call(null, k) || clojure.string.blank_QMARK_.call(null, v)) {
      return p1__10912_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__10912_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__6193__auto__ = headers;
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
};
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__6856__auto__ = port == null ? null : port;
    var m__6857__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, port, fn1_handler);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, port, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
};
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__6856__auto__ = port == null ? null : port;
    var m__6857__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, port, val, fn1_handler);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, port, val, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.Channel = function() {
};
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__6856__auto__ = chan == null ? null : chan;
    var m__6857__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, chan);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__6856__auto__ = chan == null ? null : chan;
    var m__6857__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, chan);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.Handler = function() {
};
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__6856__auto__ = h == null ? null : h;
    var m__6857__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, h);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    var x__6856__auto__ = h == null ? null : h;
    var m__6857__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, h);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__6856__auto__ = h == null ? null : h;
    var m__6857__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, h);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
};
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__6856__auto__ = b == null ? null : b;
    var m__6857__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, b);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__6856__auto__ = b == null ? null : b;
    var m__6857__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, b);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__6856__auto__ = b == null ? null : b;
    var m__6857__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, b, itm);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, b, itm);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    var x__6856__auto__ = b == null ? null : b;
    var m__6857__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, b);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_(var_args) {
  var args10474 = [];
  var len__7263__auto___10477 = arguments.length;
  var i__7264__auto___10478 = 0;
  while (true) {
    if (i__7264__auto___10478 < len__7263__auto___10477) {
      args10474.push(arguments[i__7264__auto___10478]);
      var G__10479 = i__7264__auto___10478 + 1;
      i__7264__auto___10478 = G__10479;
      continue;
    } else {
    }
    break;
  }
  var G__10476 = args10474.length;
  switch(G__10476) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10474.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? itm))");
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__10483 = cnt + 1;
      cnt = G__10483;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__7108__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__7108__auto__) {
      var v_10484 = this$.pop();
      if (keep_QMARK_.call(null, v_10484)) {
        this$.unshift(v_10484);
      } else {
      }
      var G__10485 = x + 1;
      x = G__10485;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "length", "length", -2065447907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str("(\x3e n 0)")].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_10488 = 0;
  while (true) {
    var m_10489 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_10489 == null) {
    } else {
      m_10489.call(null);
      if (count_10488 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__10490 = count_10488 + 1;
        count_10488 = G__10490;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__6181__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__6181__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496 = function(box, val, meta10497) {
      this.box = box;
      this.val = val;
      this.meta10497 = meta10497;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10498, meta10497__$1) {
      var self__ = this;
      var _10498__$1 = this;
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496(self__.box, self__.val, meta10497__$1);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10498) {
      var self__ = this;
      var _10498__$1 = this;
      return self__.meta10497;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 
      1769233139, null)], null)))], null)), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta10497", "meta10497", -594249428, null)], null);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.cljs$lang$type = true;
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels10496";
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels10496");
    };
    cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels10496 = function cljs$core$async$impl$channels$box_$___GT_t_cljs$core$async$impl$channels10496(box__$1, val__$1, meta10497) {
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496(box__$1, val__$1, meta10497);
    };
  }
  return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels10496(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
};
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (!(this$ == null) && !(this$.cljs$core$async$impl$channels$MMC$abort$arity$1 == null)) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = cljs.core.async.impl.channels.abort["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_10499 = self__.puts.pop();
    if (putter_10499 == null) {
    } else {
      var put_handler_10500 = putter_10499.handler;
      var val_10501 = putter_10499.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_10500)) {
        var put_cb_10502 = cljs.core.async.impl.protocols.commit.call(null, put_handler_10500);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_10502, put_handler_10500, val_10501, putter_10499, this$__$1) {
          return function() {
            return put_cb_10502.call(null, true);
          };
        }(put_cb_10502, put_handler_10500, val_10501, putter_10499, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str("(not (nil? val))")].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = self__.buf;
      if (cljs.core.truth_(and__6181__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__6181__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_10503 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_10503)) {
            var take_cb_10504 = cljs.core.async.impl.protocols.commit.call(null, taker_10503);
            var val_10505__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_10504, val_10505__$1, taker_10503, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_10504.call(null, val_10505__$1);
              };
            }(take_cb_10504, val_10505__$1, taker_10503, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str("(\x3c (.-length puts) impl/MAX-QUEUE-SIZE)")].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_10506 = self__.puts.pop();
          if (putter_10506 == null) {
          } else {
            var put_handler_10507 = putter_10506.handler;
            var val_10508 = putter_10506.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_10507)) {
              var put_cb_10509 = cljs.core.async.impl.protocols.commit.call(null, put_handler_10507);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_10509, put_handler_10507, val_10508, putter_10506, _, retval, this$__$1) {
                return function() {
                  return put_cb_10509.call(null, true);
                };
              }(put_cb_10509, put_handler_10507, val_10508, putter_10506, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_10508))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__6181__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__6181__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__6181__auto__;
            }
          }())) {
            var has_val = function() {
              var and__6181__auto__ = self__.buf;
              if (cljs.core.truth_(and__6181__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__6181__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str("(\x3c (.-length takes) impl/MAX-QUEUE-SIZE)")].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = self__.buf;
      if (cljs.core.truth_(and__6181__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__6181__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_10510 = self__.takes.pop();
      if (taker_10510 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_10510)) {
          var take_cb_10511 = cljs.core.async.impl.protocols.commit.call(null, taker_10510);
          var val_10512 = cljs.core.truth_(function() {
            var and__6181__auto__ = self__.buf;
            if (cljs.core.truth_(and__6181__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__6181__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_10511, val_10512, taker_10510, this$__$1) {
            return function() {
              return take_cb_10511.call(null, val_10512);
            };
          }(take_cb_10511, val_10512, taker_10510, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 
  57041148, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__6193__auto__ = exh;
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan(var_args) {
  var args10513 = [];
  var len__7263__auto___10518 = arguments.length;
  var i__7264__auto___10519 = 0;
  while (true) {
    if (i__7264__auto___10519 < len__7263__auto___10518) {
      args10513.push(arguments[i__7264__auto___10519]);
      var G__10520 = i__7264__auto___10519 + 1;
      i__7264__auto___10519 = G__10520;
      continue;
    } else {
    }
    break;
  }
  var G__10515 = args10513.length;
  switch(G__10515) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10513.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__10522 = null;
        var G__10522__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e10516) {
            var t = e10516;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__10522__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e10517) {
            var t = e10517;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__10522 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__10522__1.call(this, buf__$1);
            case 2:
              return G__10522__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10522.cljs$core$IFn$_invoke$arity$1 = G__10522__1;
        G__10522.cljs$core$IFn$_invoke$arity$2 = G__10522__2;
        return G__10522;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920 = function(fn_handler, f, meta10921) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta10921 = meta10921;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10922, meta10921__$1) {
      var self__ = this;
      var _10922__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920(self__.fn_handler, self__.f, meta10921__$1);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10922) {
      var self__ = this;
      var _10922__$1 = this;
      return self__.meta10921;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, 
      cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null)], null)))], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta10921", "meta10921", 782243447, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers10920";
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers10920");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t_cljs$core$async$impl$ioc_helpers10920 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t_cljs$core$async$impl$ioc_helpers10920(fn_handler__$1, f__$1, meta10921) {
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920(fn_handler__$1, f__$1, meta10921);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers10920(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e10924) {
    if (e10924 instanceof Object) {
      var ex = e10924;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e10924;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_10927_10929 = state;
    statearr_10927_10929[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_10927_10929[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_10928_10930 = state;
    statearr_10928_10930[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_10928_10930[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_10933_10935 = state;
    statearr_10933_10935[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_10933_10935[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var cb = temp__4423__auto__;
    var statearr_10934_10936 = state;
    statearr_10934_10936[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_10934_10936[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__6815__auto__, k__6816__auto__) {
  var self__ = this;
  var this__6815__auto____$1 = this;
  return cljs.core._lookup.call(null, this__6815__auto____$1, k__6816__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__6817__auto__, k10938, else__6818__auto__) {
  var self__ = this;
  var this__6817__auto____$1 = this;
  var G__10940 = k10938 instanceof cljs.core.Keyword ? k10938.fqn : null;
  switch(G__10940) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k10938, else__6818__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__6829__auto__, writer__6830__auto__, opts__6831__auto__) {
  var self__ = this;
  var this__6829__auto____$1 = this;
  var pr_pair__6832__auto__ = function(this__6829__auto____$1) {
    return function(keyval__6833__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__6830__auto__, cljs.core.pr_writer, "", " ", "", opts__6831__auto__, keyval__6833__auto__);
    };
  }(this__6829__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__6830__auto__, pr_pair__6832__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__6831__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$ = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__10937) {
  var self__ = this;
  var G__10937__$1 = this;
  return new cljs.core.RecordIter(0, G__10937__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)], null), 
  cljs.core._iterator.call(null, self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__6813__auto__) {
  var self__ = this;
  var this__6813__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__6809__auto__) {
  var self__ = this;
  var this__6809__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__6819__auto__) {
  var self__ = this;
  var this__6819__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__6810__auto__) {
  var self__ = this;
  var this__6810__auto____$1 = this;
  var h__6628__auto__ = self__.__hash;
  if (!(h__6628__auto__ == null)) {
    return h__6628__auto__;
  } else {
    var h__6628__auto____$1 = cljs.core.hash_imap.call(null, this__6810__auto____$1);
    self__.__hash = h__6628__auto____$1;
    return h__6628__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__6811__auto__, other__6812__auto__) {
  var self__ = this;
  var this__6811__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = other__6812__auto__;
    if (cljs.core.truth_(and__6181__auto__)) {
      var and__6181__auto____$1 = this__6811__auto____$1.constructor === other__6812__auto__.constructor;
      if (and__6181__auto____$1) {
        return cljs.core.equiv_map.call(null, this__6811__auto____$1, other__6812__auto__);
      } else {
        return and__6181__auto____$1;
      }
    } else {
      return and__6181__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__6824__auto__, k__6825__auto__) {
  var self__ = this;
  var this__6824__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__6825__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__6824__auto____$1), self__.__meta), k__6825__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__6825__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__6822__auto__, k__6823__auto__, G__10937) {
  var self__ = this;
  var this__6822__auto____$1 = this;
  var pred__10941 = cljs.core.keyword_identical_QMARK_;
  var expr__10942 = k__6823__auto__;
  if (cljs.core.truth_(pred__10941.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__10942))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__10937, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__10941.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__10942))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__10937, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__10941.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__10942))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__10937, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__10941.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__10942))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__10937, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__10941.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__10942))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__10937, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__6823__auto__, G__10937), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__6827__auto__) {
  var self__ = this;
  var this__6827__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__6814__auto__, G__10937) {
  var self__ = this;
  var this__6814__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__10937, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__6820__auto__, entry__6821__auto__) {
  var self__ = this;
  var this__6820__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__6821__auto__)) {
    return cljs.core._assoc.call(null, this__6820__auto____$1, cljs.core._nth.call(null, entry__6821__auto__, 0), cljs.core._nth.call(null, entry__6821__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__6820__auto____$1, entry__6821__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), cljs.core.with_meta(new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "Class", "Class", 2064526977, null)], null)), new cljs.core.Symbol(null, "finally-block", "finally-block", 
  -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__6849__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__6849__auto__, writer__6850__auto__) {
  return cljs.core._write.call(null, writer__6850__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__10939) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__10939), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__10939), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__10939), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__10939), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__10939), null, cljs.core.dissoc.call(null, G__10939, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_10946 = state;
  statearr_10946[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_10946;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = exception;
      if (cljs.core.truth_(and__6181__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__6181__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__6181__auto__ = exception;
        if (cljs.core.truth_(and__6181__auto__)) {
          var and__6181__auto____$1 = catch_block;
          if (cljs.core.truth_(and__6181__auto____$1)) {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), catch_exception) || exception instanceof catch_exception;
          } else {
            return and__6181__auto____$1;
          }
        } else {
          return and__6181__auto__;
        }
      }())) {
        var statearr_10952 = state;
        statearr_10952[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_10952[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_10952[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_10952[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_10952;
      } else {
        if (cljs.core.truth_(function() {
          var and__6181__auto__ = exception;
          if (cljs.core.truth_(and__6181__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__6181__auto__;
          }
        }())) {
          var statearr_10953_10957 = state;
          statearr_10953_10957[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__10958 = state;
          state = G__10958;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__6181__auto__ = exception;
            if (cljs.core.truth_(and__6181__auto__)) {
              var and__6181__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__6181__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__6181__auto____$1;
              }
            } else {
              return and__6181__auto__;
            }
          }())) {
            var statearr_10954 = state;
            statearr_10954[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_10954[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_10954;
          } else {
            if (cljs.core.truth_(function() {
              var and__6181__auto__ = cljs.core.not.call(null, exception);
              if (and__6181__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__6181__auto__;
              }
            }())) {
              var statearr_10955 = state;
              statearr_10955[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_10955[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_10955;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_10956 = state;
                statearr_10956[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_10956[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_10956;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level(var_args) {
  var args10961 = [];
  var len__7263__auto___10964 = arguments.length;
  var i__7264__auto___10965 = 0;
  while (true) {
    if (i__7264__auto___10965 < len__7263__auto___10964) {
      args10961.push(arguments[i__7264__auto___10965]);
      var G__10966 = i__7264__auto___10965 + 1;
      i__7264__auto___10965 = G__10966;
      continue;
    } else {
    }
    break;
  }
  var G__10963 = args10961.length;
  switch(G__10963) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10961.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__10968 = level + 1;
      level = G__10968;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var x__7027__auto__ = self__.key;
  return cljs.core._conj.call(null, function() {
    var x__7027__auto____$1 = self__.val;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
  }(), x__7027__auto__);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node(var_args) {
  var args10969 = [];
  var len__7263__auto___10972 = arguments.length;
  var i__7264__auto___10973 = 0;
  while (true) {
    if (i__7264__auto___10973 < len__7263__auto___10972) {
      args10969.push(arguments[i__7264__auto___10973]);
      var G__10974 = i__7264__auto___10973 + 1;
      i__7264__auto___10973 = G__10974;
      continue;
    } else {
    }
    break;
  }
  var G__10971 = args10969.length;
  switch(G__10971) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10969.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_10976 = 0;
  while (true) {
    if (i_10976 < arr.length) {
      arr[i_10976] = null;
      var G__10977 = i_10976 + 1;
      i_10976 = G__10977;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node(var_args) {
  var args10978 = [];
  var len__7263__auto___10981 = arguments.length;
  var i__7264__auto___10982 = 0;
  while (true) {
    if (i__7264__auto___10982 < len__7263__auto___10981) {
      args10978.push(arguments[i__7264__auto___10982]);
      var G__10983 = i__7264__auto___10982 + 1;
      i__7264__auto___10982 = G__10983;
      continue;
    } else {
    }
    break;
  }
  var G__10980 = args10978.length;
  switch(G__10980) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10978.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4423__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var x_SINGLEQUOTE_ = temp__4423__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__10985 = x_SINGLEQUOTE_;
              x__$1 = G__10985;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__10986 = x__$1;
      var G__10987 = k;
      var G__10988 = level - 1;
      var G__10989 = update;
      x = G__10986;
      k = G__10987;
      level = G__10988;
      update = G__10989;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_10990 = self__.level + 1;
      while (true) {
        if (i_10990 <= new_level + 1) {
          update[i_10990] = self__.header;
          var G__10991 = i_10990 + 1;
          i_10990 = G__10991;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_10992 = 0;
    while (true) {
      if (i_10992 <= self__.level) {
        var links_10993 = update[i_10992].forward;
        if (links_10993[i_10992] === x__$1) {
          links_10993[i_10992] = x__$1.forward[i_10992];
          var G__10994 = i_10992 + 1;
          i_10992 = G__10994;
          continue;
        } else {
          var G__10995 = i_10992 + 1;
          i_10992 = G__10995;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__10996 = x_SINGLEQUOTE_;
              x__$1 = G__10996;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__10997 = nx;
        var G__10998 = level__$1 - 1;
        x = G__10997;
        level__$1 = G__10998;
        continue;
      } else {
        var G__10999 = x;
        var G__11000 = level__$1 - 1;
        x = G__10999;
        level__$1 = G__11000;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__11001 = x_SINGLEQUOTE_;
              x__$1 = G__11001;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__11002 = nx;
        var G__11003 = level__$1 - 1;
        x = G__11002;
        level__$1 = G__11003;
        continue;
      } else {
        var G__11004 = x;
        var G__11005 = level__$1 - 1;
        x = G__11004;
        level__$1 = G__11005;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), cljs.core.with_meta(new cljs.core.Symbol(null, "level", "level", -1363938217, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
  return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__6193__auto__ = cljs.core.truth_(function() {
    var and__6181__auto__ = me;
    if (cljs.core.truth_(and__6181__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__6181__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__6193__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__6193__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(var_args) {
  var args11008 = [];
  var len__7263__auto___11014 = arguments.length;
  var i__7264__auto___11015 = 0;
  while (true) {
    if (i__7264__auto___11015 < len__7263__auto___11014) {
      args11008.push(arguments[i__7264__auto___11015]);
      var G__11016 = i__7264__auto___11015 + 1;
      i__7264__auto___11015 = G__11016;
      continue;
    } else {
    }
    break;
  }
  var G__11010 = args11008.length;
  switch(G__11010) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11008.length)].join(""));;
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs.core.async.t_cljs$core$async11011 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11011 = function(f, blockable, meta11012) {
      this.f = f;
      this.blockable = blockable;
      this.meta11012 = meta11012;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11013, meta11012__$1) {
      var self__ = this;
      var _11013__$1 = this;
      return new cljs.core.async.t_cljs$core$async11011(self__.f, self__.blockable, meta11012__$1);
    };
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11013) {
      var self__ = this;
      var _11013__$1 = this;
      return self__.meta11012;
    };
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t_cljs$core$async11011.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t_cljs$core$async11011.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "blockable", "blockable", -28395259, null), new cljs.core.Symbol(null, "meta11012", "meta11012", -1177619710, null)], null);
    };
    cljs.core.async.t_cljs$core$async11011.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11011.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11011";
    cljs.core.async.t_cljs$core$async11011.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async11011");
    };
    cljs.core.async.__GT_t_cljs$core$async11011 = function cljs$core$async$__GT_t_cljs$core$async11011(f__$1, blockable__$1, meta11012) {
      return new cljs.core.async.t_cljs$core$async11011(f__$1, blockable__$1, meta11012);
    };
  }
  return new cljs.core.async.t_cljs$core$async11011(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  if (!(buff == null)) {
    if (false || buff.cljs$core$async$impl$protocols$UnblockingBuffer$) {
      return true;
    } else {
      if (!buff.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
  }
};
cljs.core.async.chan = function cljs$core$async$chan(var_args) {
  var args11020 = [];
  var len__7263__auto___11023 = arguments.length;
  var i__7264__auto___11024 = 0;
  while (true) {
    if (i__7264__auto___11024 < len__7263__auto___11023) {
      args11020.push(arguments[i__7264__auto___11024]);
      var G__11025 = i__7264__auto___11024 + 1;
      i__7264__auto___11024 = G__11025;
      continue;
    } else {
    }
    break;
  }
  var G__11022 = args11020.length;
  switch(G__11022) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11020.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str("buf-or-n")].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan(var_args) {
  var args11027 = [];
  var len__7263__auto___11030 = arguments.length;
  var i__7264__auto___11031 = 0;
  while (true) {
    if (i__7264__auto___11031 < len__7263__auto___11030) {
      args11027.push(arguments[i__7264__auto___11031]);
      var G__11032 = i__7264__auto___11031 + 1;
      i__7264__auto___11031 = G__11032;
      continue;
    } else {
    }
    break;
  }
  var G__11029 = args11027.length;
  switch(G__11029) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11027.length)].join(""));;
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_(var_args) {
  var args11034 = [];
  var len__7263__auto___11037 = arguments.length;
  var i__7264__auto___11038 = 0;
  while (true) {
    if (i__7264__auto___11038 < len__7263__auto___11037) {
      args11034.push(arguments[i__7264__auto___11038]);
      var G__11039 = i__7264__auto___11038 + 1;
      i__7264__auto___11038 = G__11039;
      continue;
    } else {
    }
    break;
  }
  var G__11036 = args11034.length;
  switch(G__11036) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11034.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_11041 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_11041);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_11041, ret) {
        return function() {
          return fn1.call(null, val_11041);
        };
      }(val_11041, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_(var_args) {
  var args11042 = [];
  var len__7263__auto___11045 = arguments.length;
  var i__7264__auto___11046 = 0;
  while (true) {
    if (i__7264__auto___11046 < len__7263__auto___11045) {
      args11042.push(arguments[i__7264__auto___11046]);
      var G__11047 = i__7264__auto___11046 + 1;
      i__7264__auto___11046 = G__11047;
      continue;
    } else {
    }
    break;
  }
  var G__11044 = args11042.length;
  switch(G__11044) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11042.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var ret = temp__4423__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4423__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4423__auto__)) {
    var retb = temp__4423__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4423__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4423__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__7108__auto___11049 = n;
  var x_11050 = 0;
  while (true) {
    if (x_11050 < n__7108__auto___11049) {
      a[x_11050] = 0;
      var G__11051 = x_11050 + 1;
      x_11050 = G__11051;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__11052 = i + 1;
      i = G__11052;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t_cljs$core$async11056 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11056 = function(alt_flag, flag, meta11057) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta11057 = meta11057;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_11058, meta11057__$1) {
        var self__ = this;
        var _11058__$1 = this;
        return new cljs.core.async.t_cljs$core$async11056(self__.alt_flag, self__.flag, meta11057__$1);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_11058) {
        var self__ = this;
        var _11058__$1 = this;
        return self__.meta11057;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), 
        new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta11057", "meta11057", 1813686823, null)], null);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11056.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11056.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11056";
    cljs.core.async.t_cljs$core$async11056.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async11056");
      };
    }(flag);
    cljs.core.async.__GT_t_cljs$core$async11056 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t_cljs$core$async11056(alt_flag__$1, flag__$1, meta11057) {
        return new cljs.core.async.t_cljs$core$async11056(alt_flag__$1, flag__$1, meta11057);
      };
    }(flag);
  }
  return new cljs.core.async.t_cljs$core$async11056(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t_cljs$core$async11062 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11062 = function(alt_handler, flag, cb, meta11063) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta11063 = meta11063;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11064, meta11063__$1) {
      var self__ = this;
      var _11064__$1 = this;
      return new cljs.core.async.t_cljs$core$async11062(self__.alt_handler, self__.flag, self__.cb, meta11063__$1);
    };
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11064) {
      var self__ = this;
      var _11064__$1 = this;
      return self__.meta11063;
    };
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async11062.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t_cljs$core$async11062.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 
      5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null)], null)))], null)), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta11063", "meta11063", 502888574, null)], null);
    };
    cljs.core.async.t_cljs$core$async11062.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11062.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11062";
    cljs.core.async.t_cljs$core$async11062.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async11062");
    };
    cljs.core.async.__GT_t_cljs$core$async11062 = function cljs$core$async$alt_handler_$___GT_t_cljs$core$async11062(alt_handler__$1, flag__$1, cb__$1, meta11063) {
      return new cljs.core.async.t_cljs$core$async11062(alt_handler__$1, flag__$1, cb__$1, meta11063);
    };
  }
  return new cljs.core.async.t_cljs$core$async11062(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__11065_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11065_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__11066_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11066_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__6193__auto__ = wport;
            if (cljs.core.truth_(or__6193__auto__)) {
              return or__6193__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__11067 = i + 1;
          i = G__11067;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__6193__auto__ = ret;
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4425__auto__ = function() {
        var and__6181__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__6181__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__6181__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4425__auto__)) {
        var got = temp__4425__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___11073 = arguments.length;
  var i__7264__auto___11074 = 0;
  while (true) {
    if (i__7264__auto___11074 < len__7263__auto___11073) {
      args__7270__auto__.push(arguments[i__7264__auto___11074]);
      var G__11075 = i__7264__auto___11074 + 1;
      i__7264__auto___11074 = G__11075;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__11070) {
  var map__11071 = p__11070;
  var map__11071__$1 = (!(map__11071 == null) ? map__11071.cljs$lang$protocol_mask$partition0$ & 64 || map__11071.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11071) : map__11071;
  var opts = map__11071__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq11068) {
  var G__11069 = cljs.core.first.call(null, seq11068);
  var seq11068__$1 = cljs.core.next.call(null, seq11068);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11069, seq11068__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe(var_args) {
  var args11076 = [];
  var len__7263__auto___11126 = arguments.length;
  var i__7264__auto___11127 = 0;
  while (true) {
    if (i__7264__auto___11127 < len__7263__auto___11126) {
      args11076.push(arguments[i__7264__auto___11127]);
      var G__11128 = i__7264__auto___11127 + 1;
      i__7264__auto___11127 = G__11128;
      continue;
    } else {
    }
    break;
  }
  var G__11078 = args11076.length;
  switch(G__11078) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11076.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__9573__auto___11130 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___11130) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___11130) {
          return function(state_11102) {
            var state_val_11103 = state_11102[1];
            if (state_val_11103 === 7) {
              var inst_11098 = state_11102[2];
              var state_11102__$1 = state_11102;
              var statearr_11104_11131 = state_11102__$1;
              statearr_11104_11131[2] = inst_11098;
              statearr_11104_11131[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11103 === 1) {
                var state_11102__$1 = state_11102;
                var statearr_11105_11132 = state_11102__$1;
                statearr_11105_11132[2] = null;
                statearr_11105_11132[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11103 === 4) {
                  var inst_11081 = state_11102[7];
                  var inst_11081__$1 = state_11102[2];
                  var inst_11082 = inst_11081__$1 == null;
                  var state_11102__$1 = function() {
                    var statearr_11106 = state_11102;
                    statearr_11106[7] = inst_11081__$1;
                    return statearr_11106;
                  }();
                  if (cljs.core.truth_(inst_11082)) {
                    var statearr_11107_11133 = state_11102__$1;
                    statearr_11107_11133[1] = 5;
                  } else {
                    var statearr_11108_11134 = state_11102__$1;
                    statearr_11108_11134[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11103 === 13) {
                    var state_11102__$1 = state_11102;
                    var statearr_11109_11135 = state_11102__$1;
                    statearr_11109_11135[2] = null;
                    statearr_11109_11135[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11103 === 6) {
                      var inst_11081 = state_11102[7];
                      var state_11102__$1 = state_11102;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11102__$1, 11, to, inst_11081);
                    } else {
                      if (state_val_11103 === 3) {
                        var inst_11100 = state_11102[2];
                        var state_11102__$1 = state_11102;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11102__$1, inst_11100);
                      } else {
                        if (state_val_11103 === 12) {
                          var state_11102__$1 = state_11102;
                          var statearr_11110_11136 = state_11102__$1;
                          statearr_11110_11136[2] = null;
                          statearr_11110_11136[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11103 === 2) {
                            var state_11102__$1 = state_11102;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11102__$1, 4, from);
                          } else {
                            if (state_val_11103 === 11) {
                              var inst_11091 = state_11102[2];
                              var state_11102__$1 = state_11102;
                              if (cljs.core.truth_(inst_11091)) {
                                var statearr_11111_11137 = state_11102__$1;
                                statearr_11111_11137[1] = 12;
                              } else {
                                var statearr_11112_11138 = state_11102__$1;
                                statearr_11112_11138[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11103 === 9) {
                                var state_11102__$1 = state_11102;
                                var statearr_11113_11139 = state_11102__$1;
                                statearr_11113_11139[2] = null;
                                statearr_11113_11139[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11103 === 5) {
                                  var state_11102__$1 = state_11102;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_11114_11140 = state_11102__$1;
                                    statearr_11114_11140[1] = 8;
                                  } else {
                                    var statearr_11115_11141 = state_11102__$1;
                                    statearr_11115_11141[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11103 === 14) {
                                    var inst_11096 = state_11102[2];
                                    var state_11102__$1 = state_11102;
                                    var statearr_11116_11142 = state_11102__$1;
                                    statearr_11116_11142[2] = inst_11096;
                                    statearr_11116_11142[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11103 === 10) {
                                      var inst_11088 = state_11102[2];
                                      var state_11102__$1 = state_11102;
                                      var statearr_11117_11143 = state_11102__$1;
                                      statearr_11117_11143[2] = inst_11088;
                                      statearr_11117_11143[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11103 === 8) {
                                        var inst_11085 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_11102__$1 = state_11102;
                                        var statearr_11118_11144 = state_11102__$1;
                                        statearr_11118_11144[2] = inst_11085;
                                        statearr_11118_11144[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___11130);
        return function(switch__9558__auto__, c__9573__auto___11130) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_11122 = [null, null, null, null, null, null, null, null];
              statearr_11122[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_11122[1] = 1;
              return statearr_11122;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_11102) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11102);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11123) {
                    if (e11123 instanceof Object) {
                      var ex__9562__auto__ = e11123;
                      var statearr_11124_11145 = state_11102;
                      statearr_11124_11145[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11102);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11123;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11146 = state_11102;
                  state_11102 = G__11146;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_11102) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_11102);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___11130);
      }();
      var state__9575__auto__ = function() {
        var statearr_11125 = f__9574__auto__.call(null);
        statearr_11125[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11130;
        return statearr_11125;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___11130));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: (pos? n)");
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__11330) {
      var vec__11331 = p__11330;
      var v = cljs.core.nth.call(null, vec__11331, 0, null);
      var p = cljs.core.nth.call(null, vec__11331, 1, null);
      var job = vec__11331;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__9573__auto___11513 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results) {
          return function() {
            var f__9574__auto__ = function() {
              var switch__9558__auto__ = function(c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results) {
                return function(state_11336) {
                  var state_val_11337 = state_11336[1];
                  if (state_val_11337 === 1) {
                    var state_11336__$1 = state_11336;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11336__$1, 2, res, v);
                  } else {
                    if (state_val_11337 === 2) {
                      var inst_11333 = state_11336[2];
                      var inst_11334 = cljs.core.async.close_BANG_.call(null, res);
                      var state_11336__$1 = function() {
                        var statearr_11338 = state_11336;
                        statearr_11338[7] = inst_11333;
                        return statearr_11338;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11336__$1, inst_11334);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results);
              return function(switch__9558__auto__, c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0 = function() {
                    var statearr_11342 = [null, null, null, null, null, null, null, null];
                    statearr_11342[0] = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                    statearr_11342[1] = 1;
                    return statearr_11342;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1 = function(state_11336) {
                    while (true) {
                      var ret_value__9560__auto__ = function() {
                        try {
                          while (true) {
                            var result__9561__auto__ = switch__9558__auto__.call(null, state_11336);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__9561__auto__;
                            }
                            break;
                          }
                        } catch (e11343) {
                          if (e11343 instanceof Object) {
                            var ex__9562__auto__ = e11343;
                            var statearr_11344_11514 = state_11336;
                            statearr_11344_11514[5] = ex__9562__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11336);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e11343;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__11515 = state_11336;
                        state_11336 = G__11515;
                        continue;
                      } else {
                        return ret_value__9560__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = function(state_11336) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1.call(this, state_11336);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                }();
              }(switch__9558__auto__, c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results);
            }();
            var state__9575__auto__ = function() {
              var statearr_11345 = f__9574__auto__.call(null);
              statearr_11345[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11513;
              return statearr_11345;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
          };
        }(c__9573__auto___11513, res, vec__11331, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__11346) {
      var vec__11347 = p__11346;
      var v = cljs.core.nth.call(null, vec__11347, 0, null);
      var p = cljs.core.nth.call(null, vec__11347, 1, null);
      var job = vec__11347;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__7108__auto___11516 = n;
  var __11517 = 0;
  while (true) {
    if (__11517 < n__7108__auto___11516) {
      var G__11348_11518 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__11348_11518) {
        case "compute":
          var c__9573__auto___11520 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11517, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
            return function() {
              var f__9574__auto__ = function() {
                var switch__9558__auto__ = function(__11517, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
                  return function(state_11361) {
                    var state_val_11362 = state_11361[1];
                    if (state_val_11362 === 1) {
                      var state_11361__$1 = state_11361;
                      var statearr_11363_11521 = state_11361__$1;
                      statearr_11363_11521[2] = null;
                      statearr_11363_11521[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11362 === 2) {
                        var state_11361__$1 = state_11361;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11361__$1, 4, jobs);
                      } else {
                        if (state_val_11362 === 3) {
                          var inst_11359 = state_11361[2];
                          var state_11361__$1 = state_11361;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11361__$1, inst_11359);
                        } else {
                          if (state_val_11362 === 4) {
                            var inst_11351 = state_11361[2];
                            var inst_11352 = process.call(null, inst_11351);
                            var state_11361__$1 = state_11361;
                            if (cljs.core.truth_(inst_11352)) {
                              var statearr_11364_11522 = state_11361__$1;
                              statearr_11364_11522[1] = 5;
                            } else {
                              var statearr_11365_11523 = state_11361__$1;
                              statearr_11365_11523[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11362 === 5) {
                              var state_11361__$1 = state_11361;
                              var statearr_11366_11524 = state_11361__$1;
                              statearr_11366_11524[2] = null;
                              statearr_11366_11524[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11362 === 6) {
                                var state_11361__$1 = state_11361;
                                var statearr_11367_11525 = state_11361__$1;
                                statearr_11367_11525[2] = null;
                                statearr_11367_11525[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11362 === 7) {
                                  var inst_11357 = state_11361[2];
                                  var state_11361__$1 = state_11361;
                                  var statearr_11368_11526 = state_11361__$1;
                                  statearr_11368_11526[2] = inst_11357;
                                  statearr_11368_11526[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11517, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async);
                return function(__11517, switch__9558__auto__, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0 = function() {
                      var statearr_11372 = [null, null, null, null, null, null, null];
                      statearr_11372[0] = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                      statearr_11372[1] = 1;
                      return statearr_11372;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1 = function(state_11361) {
                      while (true) {
                        var ret_value__9560__auto__ = function() {
                          try {
                            while (true) {
                              var result__9561__auto__ = switch__9558__auto__.call(null, state_11361);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__9561__auto__;
                              }
                              break;
                            }
                          } catch (e11373) {
                            if (e11373 instanceof Object) {
                              var ex__9562__auto__ = e11373;
                              var statearr_11374_11527 = state_11361;
                              statearr_11374_11527[5] = ex__9562__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11361);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11373;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11528 = state_11361;
                          state_11361 = G__11528;
                          continue;
                        } else {
                          return ret_value__9560__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = function(state_11361) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1.call(this, state_11361);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                  }();
                }(__11517, switch__9558__auto__, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async);
              }();
              var state__9575__auto__ = function() {
                var statearr_11375 = f__9574__auto__.call(null);
                statearr_11375[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11520;
                return statearr_11375;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
            };
          }(__11517, c__9573__auto___11520, G__11348_11518, n__7108__auto___11516, jobs, results, process, async));
          break;
        case "async":
          var c__9573__auto___11529 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11517, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
            return function() {
              var f__9574__auto__ = function() {
                var switch__9558__auto__ = function(__11517, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
                  return function(state_11388) {
                    var state_val_11389 = state_11388[1];
                    if (state_val_11389 === 1) {
                      var state_11388__$1 = state_11388;
                      var statearr_11390_11530 = state_11388__$1;
                      statearr_11390_11530[2] = null;
                      statearr_11390_11530[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11389 === 2) {
                        var state_11388__$1 = state_11388;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11388__$1, 4, jobs);
                      } else {
                        if (state_val_11389 === 3) {
                          var inst_11386 = state_11388[2];
                          var state_11388__$1 = state_11388;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11388__$1, inst_11386);
                        } else {
                          if (state_val_11389 === 4) {
                            var inst_11378 = state_11388[2];
                            var inst_11379 = async.call(null, inst_11378);
                            var state_11388__$1 = state_11388;
                            if (cljs.core.truth_(inst_11379)) {
                              var statearr_11391_11531 = state_11388__$1;
                              statearr_11391_11531[1] = 5;
                            } else {
                              var statearr_11392_11532 = state_11388__$1;
                              statearr_11392_11532[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11389 === 5) {
                              var state_11388__$1 = state_11388;
                              var statearr_11393_11533 = state_11388__$1;
                              statearr_11393_11533[2] = null;
                              statearr_11393_11533[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11389 === 6) {
                                var state_11388__$1 = state_11388;
                                var statearr_11394_11534 = state_11388__$1;
                                statearr_11394_11534[2] = null;
                                statearr_11394_11534[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11389 === 7) {
                                  var inst_11384 = state_11388[2];
                                  var state_11388__$1 = state_11388;
                                  var statearr_11395_11535 = state_11388__$1;
                                  statearr_11395_11535[2] = inst_11384;
                                  statearr_11395_11535[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11517, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async);
                return function(__11517, switch__9558__auto__, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0 = function() {
                      var statearr_11399 = [null, null, null, null, null, null, null];
                      statearr_11399[0] = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                      statearr_11399[1] = 1;
                      return statearr_11399;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1 = function(state_11388) {
                      while (true) {
                        var ret_value__9560__auto__ = function() {
                          try {
                            while (true) {
                              var result__9561__auto__ = switch__9558__auto__.call(null, state_11388);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__9561__auto__;
                              }
                              break;
                            }
                          } catch (e11400) {
                            if (e11400 instanceof Object) {
                              var ex__9562__auto__ = e11400;
                              var statearr_11401_11536 = state_11388;
                              statearr_11401_11536[5] = ex__9562__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11388);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11400;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11537 = state_11388;
                          state_11388 = G__11537;
                          continue;
                        } else {
                          return ret_value__9560__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = function(state_11388) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1.call(this, state_11388);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
                  }();
                }(__11517, switch__9558__auto__, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async);
              }();
              var state__9575__auto__ = function() {
                var statearr_11402 = f__9574__auto__.call(null);
                statearr_11402[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11529;
                return statearr_11402;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
            };
          }(__11517, c__9573__auto___11529, G__11348_11518, n__7108__auto___11516, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__11538 = __11517 + 1;
      __11517 = G__11538;
      continue;
    } else {
    }
    break;
  }
  var c__9573__auto___11539 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___11539, jobs, results, process, async) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___11539, jobs, results, process, async) {
          return function(state_11424) {
            var state_val_11425 = state_11424[1];
            if (state_val_11425 === 1) {
              var state_11424__$1 = state_11424;
              var statearr_11426_11540 = state_11424__$1;
              statearr_11426_11540[2] = null;
              statearr_11426_11540[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11425 === 2) {
                var state_11424__$1 = state_11424;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11424__$1, 4, from);
              } else {
                if (state_val_11425 === 3) {
                  var inst_11422 = state_11424[2];
                  var state_11424__$1 = state_11424;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11424__$1, inst_11422);
                } else {
                  if (state_val_11425 === 4) {
                    var inst_11405 = state_11424[7];
                    var inst_11405__$1 = state_11424[2];
                    var inst_11406 = inst_11405__$1 == null;
                    var state_11424__$1 = function() {
                      var statearr_11427 = state_11424;
                      statearr_11427[7] = inst_11405__$1;
                      return statearr_11427;
                    }();
                    if (cljs.core.truth_(inst_11406)) {
                      var statearr_11428_11541 = state_11424__$1;
                      statearr_11428_11541[1] = 5;
                    } else {
                      var statearr_11429_11542 = state_11424__$1;
                      statearr_11429_11542[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11425 === 5) {
                      var inst_11408 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_11424__$1 = state_11424;
                      var statearr_11430_11543 = state_11424__$1;
                      statearr_11430_11543[2] = inst_11408;
                      statearr_11430_11543[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11425 === 6) {
                        var inst_11410 = state_11424[8];
                        var inst_11405 = state_11424[7];
                        var inst_11410__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_11411 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_11412 = [inst_11405, inst_11410__$1];
                        var inst_11413 = new cljs.core.PersistentVector(null, 2, 5, inst_11411, inst_11412, null);
                        var state_11424__$1 = function() {
                          var statearr_11431 = state_11424;
                          statearr_11431[8] = inst_11410__$1;
                          return statearr_11431;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11424__$1, 8, jobs, inst_11413);
                      } else {
                        if (state_val_11425 === 7) {
                          var inst_11420 = state_11424[2];
                          var state_11424__$1 = state_11424;
                          var statearr_11432_11544 = state_11424__$1;
                          statearr_11432_11544[2] = inst_11420;
                          statearr_11432_11544[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11425 === 8) {
                            var inst_11410 = state_11424[8];
                            var inst_11415 = state_11424[2];
                            var state_11424__$1 = function() {
                              var statearr_11433 = state_11424;
                              statearr_11433[9] = inst_11415;
                              return statearr_11433;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11424__$1, 9, results, inst_11410);
                          } else {
                            if (state_val_11425 === 9) {
                              var inst_11417 = state_11424[2];
                              var state_11424__$1 = function() {
                                var statearr_11434 = state_11424;
                                statearr_11434[10] = inst_11417;
                                return statearr_11434;
                              }();
                              var statearr_11435_11545 = state_11424__$1;
                              statearr_11435_11545[2] = null;
                              statearr_11435_11545[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___11539, jobs, results, process, async);
        return function(switch__9558__auto__, c__9573__auto___11539, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0 = function() {
              var statearr_11439 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11439[0] = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
              statearr_11439[1] = 1;
              return statearr_11439;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1 = function(state_11424) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11424);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11440) {
                    if (e11440 instanceof Object) {
                      var ex__9562__auto__ = e11440;
                      var statearr_11441_11546 = state_11424;
                      statearr_11441_11546[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11424);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11440;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11547 = state_11424;
                  state_11424 = G__11547;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = function(state_11424) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1.call(this, state_11424);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___11539, jobs, results, process, async);
      }();
      var state__9575__auto__ = function() {
        var statearr_11442 = f__9574__auto__.call(null);
        statearr_11442[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11539;
        return statearr_11442;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___11539, jobs, results, process, async));
  var c__9573__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto__, jobs, results, process, async) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto__, jobs, results, process, async) {
          return function(state_11480) {
            var state_val_11481 = state_11480[1];
            if (state_val_11481 === 7) {
              var inst_11476 = state_11480[2];
              var state_11480__$1 = state_11480;
              var statearr_11482_11548 = state_11480__$1;
              statearr_11482_11548[2] = inst_11476;
              statearr_11482_11548[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11481 === 20) {
                var state_11480__$1 = state_11480;
                var statearr_11483_11549 = state_11480__$1;
                statearr_11483_11549[2] = null;
                statearr_11483_11549[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11481 === 1) {
                  var state_11480__$1 = state_11480;
                  var statearr_11484_11550 = state_11480__$1;
                  statearr_11484_11550[2] = null;
                  statearr_11484_11550[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11481 === 4) {
                    var inst_11445 = state_11480[7];
                    var inst_11445__$1 = state_11480[2];
                    var inst_11446 = inst_11445__$1 == null;
                    var state_11480__$1 = function() {
                      var statearr_11485 = state_11480;
                      statearr_11485[7] = inst_11445__$1;
                      return statearr_11485;
                    }();
                    if (cljs.core.truth_(inst_11446)) {
                      var statearr_11486_11551 = state_11480__$1;
                      statearr_11486_11551[1] = 5;
                    } else {
                      var statearr_11487_11552 = state_11480__$1;
                      statearr_11487_11552[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11481 === 15) {
                      var inst_11458 = state_11480[8];
                      var state_11480__$1 = state_11480;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11480__$1, 18, to, inst_11458);
                    } else {
                      if (state_val_11481 === 21) {
                        var inst_11471 = state_11480[2];
                        var state_11480__$1 = state_11480;
                        var statearr_11488_11553 = state_11480__$1;
                        statearr_11488_11553[2] = inst_11471;
                        statearr_11488_11553[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11481 === 13) {
                          var inst_11473 = state_11480[2];
                          var state_11480__$1 = function() {
                            var statearr_11489 = state_11480;
                            statearr_11489[9] = inst_11473;
                            return statearr_11489;
                          }();
                          var statearr_11490_11554 = state_11480__$1;
                          statearr_11490_11554[2] = null;
                          statearr_11490_11554[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11481 === 6) {
                            var inst_11445 = state_11480[7];
                            var state_11480__$1 = state_11480;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11480__$1, 11, inst_11445);
                          } else {
                            if (state_val_11481 === 17) {
                              var inst_11466 = state_11480[2];
                              var state_11480__$1 = state_11480;
                              if (cljs.core.truth_(inst_11466)) {
                                var statearr_11491_11555 = state_11480__$1;
                                statearr_11491_11555[1] = 19;
                              } else {
                                var statearr_11492_11556 = state_11480__$1;
                                statearr_11492_11556[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11481 === 3) {
                                var inst_11478 = state_11480[2];
                                var state_11480__$1 = state_11480;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11480__$1, inst_11478);
                              } else {
                                if (state_val_11481 === 12) {
                                  var inst_11455 = state_11480[10];
                                  var state_11480__$1 = state_11480;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11480__$1, 14, inst_11455);
                                } else {
                                  if (state_val_11481 === 2) {
                                    var state_11480__$1 = state_11480;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11480__$1, 4, results);
                                  } else {
                                    if (state_val_11481 === 19) {
                                      var state_11480__$1 = state_11480;
                                      var statearr_11493_11557 = state_11480__$1;
                                      statearr_11493_11557[2] = null;
                                      statearr_11493_11557[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11481 === 11) {
                                        var inst_11455 = state_11480[2];
                                        var state_11480__$1 = function() {
                                          var statearr_11494 = state_11480;
                                          statearr_11494[10] = inst_11455;
                                          return statearr_11494;
                                        }();
                                        var statearr_11495_11558 = state_11480__$1;
                                        statearr_11495_11558[2] = null;
                                        statearr_11495_11558[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11481 === 9) {
                                          var state_11480__$1 = state_11480;
                                          var statearr_11496_11559 = state_11480__$1;
                                          statearr_11496_11559[2] = null;
                                          statearr_11496_11559[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11481 === 5) {
                                            var state_11480__$1 = state_11480;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_11497_11560 = state_11480__$1;
                                              statearr_11497_11560[1] = 8;
                                            } else {
                                              var statearr_11498_11561 = state_11480__$1;
                                              statearr_11498_11561[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11481 === 14) {
                                              var inst_11460 = state_11480[11];
                                              var inst_11458 = state_11480[8];
                                              var inst_11458__$1 = state_11480[2];
                                              var inst_11459 = inst_11458__$1 == null;
                                              var inst_11460__$1 = cljs.core.not.call(null, inst_11459);
                                              var state_11480__$1 = function() {
                                                var statearr_11499 = state_11480;
                                                statearr_11499[11] = inst_11460__$1;
                                                statearr_11499[8] = inst_11458__$1;
                                                return statearr_11499;
                                              }();
                                              if (inst_11460__$1) {
                                                var statearr_11500_11562 = state_11480__$1;
                                                statearr_11500_11562[1] = 15;
                                              } else {
                                                var statearr_11501_11563 = state_11480__$1;
                                                statearr_11501_11563[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11481 === 16) {
                                                var inst_11460 = state_11480[11];
                                                var state_11480__$1 = state_11480;
                                                var statearr_11502_11564 = state_11480__$1;
                                                statearr_11502_11564[2] = inst_11460;
                                                statearr_11502_11564[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11481 === 10) {
                                                  var inst_11452 = state_11480[2];
                                                  var state_11480__$1 = state_11480;
                                                  var statearr_11503_11565 = state_11480__$1;
                                                  statearr_11503_11565[2] = inst_11452;
                                                  statearr_11503_11565[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11481 === 18) {
                                                    var inst_11463 = state_11480[2];
                                                    var state_11480__$1 = state_11480;
                                                    var statearr_11504_11566 = state_11480__$1;
                                                    statearr_11504_11566[2] = inst_11463;
                                                    statearr_11504_11566[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11481 === 8) {
                                                      var inst_11449 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_11480__$1 = state_11480;
                                                      var statearr_11505_11567 = state_11480__$1;
                                                      statearr_11505_11567[2] = inst_11449;
                                                      statearr_11505_11567[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto__, jobs, results, process, async);
        return function(switch__9558__auto__, c__9573__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0 = function() {
              var statearr_11509 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11509[0] = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
              statearr_11509[1] = 1;
              return statearr_11509;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1 = function(state_11480) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11480);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11510) {
                    if (e11510 instanceof Object) {
                      var ex__9562__auto__ = e11510;
                      var statearr_11511_11568 = state_11480;
                      statearr_11511_11568[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11480);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11510;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11569 = state_11480;
                  state_11480 = G__11569;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__ = function(state_11480) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1.call(this, state_11480);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9559__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto__, jobs, results, process, async);
      }();
      var state__9575__auto__ = function() {
        var statearr_11512 = f__9574__auto__.call(null);
        statearr_11512[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto__;
        return statearr_11512;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto__, jobs, results, process, async));
  return c__9573__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async(var_args) {
  var args11570 = [];
  var len__7263__auto___11573 = arguments.length;
  var i__7264__auto___11574 = 0;
  while (true) {
    if (i__7264__auto___11574 < len__7263__auto___11573) {
      args11570.push(arguments[i__7264__auto___11574]);
      var G__11575 = i__7264__auto___11574 + 1;
      i__7264__auto___11574 = G__11575;
      continue;
    } else {
    }
    break;
  }
  var G__11572 = args11570.length;
  switch(G__11572) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11570.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline(var_args) {
  var args11577 = [];
  var len__7263__auto___11580 = arguments.length;
  var i__7264__auto___11581 = 0;
  while (true) {
    if (i__7264__auto___11581 < len__7263__auto___11580) {
      args11577.push(arguments[i__7264__auto___11581]);
      var G__11582 = i__7264__auto___11581 + 1;
      i__7264__auto___11581 = G__11582;
      continue;
    } else {
    }
    break;
  }
  var G__11579 = args11577.length;
  switch(G__11579) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11577.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split(var_args) {
  var args11584 = [];
  var len__7263__auto___11637 = arguments.length;
  var i__7264__auto___11638 = 0;
  while (true) {
    if (i__7264__auto___11638 < len__7263__auto___11637) {
      args11584.push(arguments[i__7264__auto___11638]);
      var G__11639 = i__7264__auto___11638 + 1;
      i__7264__auto___11638 = G__11639;
      continue;
    } else {
    }
    break;
  }
  var G__11586 = args11584.length;
  switch(G__11586) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11584.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__9573__auto___11641 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___11641, tc, fc) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___11641, tc, fc) {
          return function(state_11612) {
            var state_val_11613 = state_11612[1];
            if (state_val_11613 === 7) {
              var inst_11608 = state_11612[2];
              var state_11612__$1 = state_11612;
              var statearr_11614_11642 = state_11612__$1;
              statearr_11614_11642[2] = inst_11608;
              statearr_11614_11642[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11613 === 1) {
                var state_11612__$1 = state_11612;
                var statearr_11615_11643 = state_11612__$1;
                statearr_11615_11643[2] = null;
                statearr_11615_11643[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11613 === 4) {
                  var inst_11589 = state_11612[7];
                  var inst_11589__$1 = state_11612[2];
                  var inst_11590 = inst_11589__$1 == null;
                  var state_11612__$1 = function() {
                    var statearr_11616 = state_11612;
                    statearr_11616[7] = inst_11589__$1;
                    return statearr_11616;
                  }();
                  if (cljs.core.truth_(inst_11590)) {
                    var statearr_11617_11644 = state_11612__$1;
                    statearr_11617_11644[1] = 5;
                  } else {
                    var statearr_11618_11645 = state_11612__$1;
                    statearr_11618_11645[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11613 === 13) {
                    var state_11612__$1 = state_11612;
                    var statearr_11619_11646 = state_11612__$1;
                    statearr_11619_11646[2] = null;
                    statearr_11619_11646[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11613 === 6) {
                      var inst_11589 = state_11612[7];
                      var inst_11595 = p.call(null, inst_11589);
                      var state_11612__$1 = state_11612;
                      if (cljs.core.truth_(inst_11595)) {
                        var statearr_11620_11647 = state_11612__$1;
                        statearr_11620_11647[1] = 9;
                      } else {
                        var statearr_11621_11648 = state_11612__$1;
                        statearr_11621_11648[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11613 === 3) {
                        var inst_11610 = state_11612[2];
                        var state_11612__$1 = state_11612;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11612__$1, inst_11610);
                      } else {
                        if (state_val_11613 === 12) {
                          var state_11612__$1 = state_11612;
                          var statearr_11622_11649 = state_11612__$1;
                          statearr_11622_11649[2] = null;
                          statearr_11622_11649[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11613 === 2) {
                            var state_11612__$1 = state_11612;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11612__$1, 4, ch);
                          } else {
                            if (state_val_11613 === 11) {
                              var inst_11589 = state_11612[7];
                              var inst_11599 = state_11612[2];
                              var state_11612__$1 = state_11612;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11612__$1, 8, inst_11599, inst_11589);
                            } else {
                              if (state_val_11613 === 9) {
                                var state_11612__$1 = state_11612;
                                var statearr_11623_11650 = state_11612__$1;
                                statearr_11623_11650[2] = tc;
                                statearr_11623_11650[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11613 === 5) {
                                  var inst_11592 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_11593 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_11612__$1 = function() {
                                    var statearr_11624 = state_11612;
                                    statearr_11624[8] = inst_11592;
                                    return statearr_11624;
                                  }();
                                  var statearr_11625_11651 = state_11612__$1;
                                  statearr_11625_11651[2] = inst_11593;
                                  statearr_11625_11651[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11613 === 14) {
                                    var inst_11606 = state_11612[2];
                                    var state_11612__$1 = state_11612;
                                    var statearr_11626_11652 = state_11612__$1;
                                    statearr_11626_11652[2] = inst_11606;
                                    statearr_11626_11652[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11613 === 10) {
                                      var state_11612__$1 = state_11612;
                                      var statearr_11627_11653 = state_11612__$1;
                                      statearr_11627_11653[2] = fc;
                                      statearr_11627_11653[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11613 === 8) {
                                        var inst_11601 = state_11612[2];
                                        var state_11612__$1 = state_11612;
                                        if (cljs.core.truth_(inst_11601)) {
                                          var statearr_11628_11654 = state_11612__$1;
                                          statearr_11628_11654[1] = 12;
                                        } else {
                                          var statearr_11629_11655 = state_11612__$1;
                                          statearr_11629_11655[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___11641, tc, fc);
        return function(switch__9558__auto__, c__9573__auto___11641, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_11633 = [null, null, null, null, null, null, null, null, null];
              statearr_11633[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_11633[1] = 1;
              return statearr_11633;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_11612) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11612);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11634) {
                    if (e11634 instanceof Object) {
                      var ex__9562__auto__ = e11634;
                      var statearr_11635_11656 = state_11612;
                      statearr_11635_11656[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11612);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11634;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11657 = state_11612;
                  state_11612 = G__11657;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_11612) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_11612);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___11641, tc, fc);
      }();
      var state__9575__auto__ = function() {
        var statearr_11636 = f__9574__auto__.call(null);
        statearr_11636[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___11641;
        return statearr_11636;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___11641, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__9573__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto__) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto__) {
          return function(state_11721) {
            var state_val_11722 = state_11721[1];
            if (state_val_11722 === 7) {
              var inst_11717 = state_11721[2];
              var state_11721__$1 = state_11721;
              var statearr_11723_11744 = state_11721__$1;
              statearr_11723_11744[2] = inst_11717;
              statearr_11723_11744[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11722 === 1) {
                var inst_11701 = init;
                var state_11721__$1 = function() {
                  var statearr_11724 = state_11721;
                  statearr_11724[7] = inst_11701;
                  return statearr_11724;
                }();
                var statearr_11725_11745 = state_11721__$1;
                statearr_11725_11745[2] = null;
                statearr_11725_11745[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11722 === 4) {
                  var inst_11704 = state_11721[8];
                  var inst_11704__$1 = state_11721[2];
                  var inst_11705 = inst_11704__$1 == null;
                  var state_11721__$1 = function() {
                    var statearr_11726 = state_11721;
                    statearr_11726[8] = inst_11704__$1;
                    return statearr_11726;
                  }();
                  if (cljs.core.truth_(inst_11705)) {
                    var statearr_11727_11746 = state_11721__$1;
                    statearr_11727_11746[1] = 5;
                  } else {
                    var statearr_11728_11747 = state_11721__$1;
                    statearr_11728_11747[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11722 === 6) {
                    var inst_11701 = state_11721[7];
                    var inst_11704 = state_11721[8];
                    var inst_11708 = state_11721[9];
                    var inst_11708__$1 = f.call(null, inst_11701, inst_11704);
                    var inst_11709 = cljs.core.reduced_QMARK_.call(null, inst_11708__$1);
                    var state_11721__$1 = function() {
                      var statearr_11729 = state_11721;
                      statearr_11729[9] = inst_11708__$1;
                      return statearr_11729;
                    }();
                    if (inst_11709) {
                      var statearr_11730_11748 = state_11721__$1;
                      statearr_11730_11748[1] = 8;
                    } else {
                      var statearr_11731_11749 = state_11721__$1;
                      statearr_11731_11749[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11722 === 3) {
                      var inst_11719 = state_11721[2];
                      var state_11721__$1 = state_11721;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11721__$1, inst_11719);
                    } else {
                      if (state_val_11722 === 2) {
                        var state_11721__$1 = state_11721;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11721__$1, 4, ch);
                      } else {
                        if (state_val_11722 === 9) {
                          var inst_11708 = state_11721[9];
                          var inst_11701 = inst_11708;
                          var state_11721__$1 = function() {
                            var statearr_11732 = state_11721;
                            statearr_11732[7] = inst_11701;
                            return statearr_11732;
                          }();
                          var statearr_11733_11750 = state_11721__$1;
                          statearr_11733_11750[2] = null;
                          statearr_11733_11750[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11722 === 5) {
                            var inst_11701 = state_11721[7];
                            var state_11721__$1 = state_11721;
                            var statearr_11734_11751 = state_11721__$1;
                            statearr_11734_11751[2] = inst_11701;
                            statearr_11734_11751[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11722 === 10) {
                              var inst_11715 = state_11721[2];
                              var state_11721__$1 = state_11721;
                              var statearr_11735_11752 = state_11721__$1;
                              statearr_11735_11752[2] = inst_11715;
                              statearr_11735_11752[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11722 === 8) {
                                var inst_11708 = state_11721[9];
                                var inst_11711 = cljs.core.deref.call(null, inst_11708);
                                var state_11721__$1 = state_11721;
                                var statearr_11736_11753 = state_11721__$1;
                                statearr_11736_11753[2] = inst_11711;
                                statearr_11736_11753[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto__);
        return function(switch__9558__auto__, c__9573__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__9559__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__9559__auto____0 = function() {
              var statearr_11740 = [null, null, null, null, null, null, null, null, null, null];
              statearr_11740[0] = cljs$core$async$reduce_$_state_machine__9559__auto__;
              statearr_11740[1] = 1;
              return statearr_11740;
            };
            var cljs$core$async$reduce_$_state_machine__9559__auto____1 = function(state_11721) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11721);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11741) {
                    if (e11741 instanceof Object) {
                      var ex__9562__auto__ = e11741;
                      var statearr_11742_11754 = state_11721;
                      statearr_11742_11754[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11721);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11741;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11755 = state_11721;
                  state_11721 = G__11755;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__9559__auto__ = function(state_11721) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__9559__auto____1.call(this, state_11721);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__9559__auto____0;
            cljs$core$async$reduce_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__9559__auto____1;
            return cljs$core$async$reduce_$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto__);
      }();
      var state__9575__auto__ = function() {
        var statearr_11743 = f__9574__auto__.call(null);
        statearr_11743[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto__;
        return statearr_11743;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto__));
  return c__9573__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan(var_args) {
  var args11756 = [];
  var len__7263__auto___11808 = arguments.length;
  var i__7264__auto___11809 = 0;
  while (true) {
    if (i__7264__auto___11809 < len__7263__auto___11808) {
      args11756.push(arguments[i__7264__auto___11809]);
      var G__11810 = i__7264__auto___11809 + 1;
      i__7264__auto___11809 = G__11810;
      continue;
    } else {
    }
    break;
  }
  var G__11758 = args11756.length;
  switch(G__11758) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11756.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__9573__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto__) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto__) {
          return function(state_11783) {
            var state_val_11784 = state_11783[1];
            if (state_val_11784 === 7) {
              var inst_11765 = state_11783[2];
              var state_11783__$1 = state_11783;
              var statearr_11785_11812 = state_11783__$1;
              statearr_11785_11812[2] = inst_11765;
              statearr_11785_11812[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11784 === 1) {
                var inst_11759 = cljs.core.seq.call(null, coll);
                var inst_11760 = inst_11759;
                var state_11783__$1 = function() {
                  var statearr_11786 = state_11783;
                  statearr_11786[7] = inst_11760;
                  return statearr_11786;
                }();
                var statearr_11787_11813 = state_11783__$1;
                statearr_11787_11813[2] = null;
                statearr_11787_11813[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11784 === 4) {
                  var inst_11760 = state_11783[7];
                  var inst_11763 = cljs.core.first.call(null, inst_11760);
                  var state_11783__$1 = state_11783;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11783__$1, 7, ch, inst_11763);
                } else {
                  if (state_val_11784 === 13) {
                    var inst_11777 = state_11783[2];
                    var state_11783__$1 = state_11783;
                    var statearr_11788_11814 = state_11783__$1;
                    statearr_11788_11814[2] = inst_11777;
                    statearr_11788_11814[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11784 === 6) {
                      var inst_11768 = state_11783[2];
                      var state_11783__$1 = state_11783;
                      if (cljs.core.truth_(inst_11768)) {
                        var statearr_11789_11815 = state_11783__$1;
                        statearr_11789_11815[1] = 8;
                      } else {
                        var statearr_11790_11816 = state_11783__$1;
                        statearr_11790_11816[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11784 === 3) {
                        var inst_11781 = state_11783[2];
                        var state_11783__$1 = state_11783;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11783__$1, inst_11781);
                      } else {
                        if (state_val_11784 === 12) {
                          var state_11783__$1 = state_11783;
                          var statearr_11791_11817 = state_11783__$1;
                          statearr_11791_11817[2] = null;
                          statearr_11791_11817[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11784 === 2) {
                            var inst_11760 = state_11783[7];
                            var state_11783__$1 = state_11783;
                            if (cljs.core.truth_(inst_11760)) {
                              var statearr_11792_11818 = state_11783__$1;
                              statearr_11792_11818[1] = 4;
                            } else {
                              var statearr_11793_11819 = state_11783__$1;
                              statearr_11793_11819[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11784 === 11) {
                              var inst_11774 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_11783__$1 = state_11783;
                              var statearr_11794_11820 = state_11783__$1;
                              statearr_11794_11820[2] = inst_11774;
                              statearr_11794_11820[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11784 === 9) {
                                var state_11783__$1 = state_11783;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_11795_11821 = state_11783__$1;
                                  statearr_11795_11821[1] = 11;
                                } else {
                                  var statearr_11796_11822 = state_11783__$1;
                                  statearr_11796_11822[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11784 === 5) {
                                  var inst_11760 = state_11783[7];
                                  var state_11783__$1 = state_11783;
                                  var statearr_11797_11823 = state_11783__$1;
                                  statearr_11797_11823[2] = inst_11760;
                                  statearr_11797_11823[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11784 === 10) {
                                    var inst_11779 = state_11783[2];
                                    var state_11783__$1 = state_11783;
                                    var statearr_11798_11824 = state_11783__$1;
                                    statearr_11798_11824[2] = inst_11779;
                                    statearr_11798_11824[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11784 === 8) {
                                      var inst_11760 = state_11783[7];
                                      var inst_11770 = cljs.core.next.call(null, inst_11760);
                                      var inst_11760__$1 = inst_11770;
                                      var state_11783__$1 = function() {
                                        var statearr_11799 = state_11783;
                                        statearr_11799[7] = inst_11760__$1;
                                        return statearr_11799;
                                      }();
                                      var statearr_11800_11825 = state_11783__$1;
                                      statearr_11800_11825[2] = null;
                                      statearr_11800_11825[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto__);
        return function(switch__9558__auto__, c__9573__auto__) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_11804 = [null, null, null, null, null, null, null, null];
              statearr_11804[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_11804[1] = 1;
              return statearr_11804;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_11783) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_11783);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e11805) {
                    if (e11805 instanceof Object) {
                      var ex__9562__auto__ = e11805;
                      var statearr_11806_11826 = state_11783;
                      statearr_11806_11826[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11783);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11805;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11827 = state_11783;
                  state_11783 = G__11827;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_11783) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_11783);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto__);
      }();
      var state__9575__auto__ = function() {
        var statearr_11807 = f__9574__auto__.call(null);
        statearr_11807[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto__;
        return statearr_11807;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto__));
  return c__9573__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
};
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (!(_ == null) && !(_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__6856__auto__ = _ == null ? null : _;
    var m__6857__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, _);
    } else {
      var m__6857__auto____$1 = cljs.core.async.muxch_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, _);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
      }
    }
  }
};
cljs.core.async.Mult = function() {
};
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (!(m == null) && !(m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, ch, close_QMARK_);
    } else {
      var m__6857__auto____$1 = cljs.core.async.tap_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
      }
    }
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, ch);
    } else {
      var m__6857__auto____$1 = cljs.core.async.untap_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
      }
    }
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m);
    } else {
      var m__6857__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
      }
    }
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async12049 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async12049 = function(mult, ch, cs, meta12050) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta12050 = meta12050;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_12051, meta12050__$1) {
          var self__ = this;
          var _12051__$1 = this;
          return new cljs.core.async.t_cljs$core$async12049(self__.mult, self__.ch, self__.cs, meta12050__$1);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_12051) {
          var self__ = this;
          var _12051__$1 = this;
          return self__.meta12050;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", 
          "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult."], 
          null)), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta12050", "meta12050", -1051302518, null)], null);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12049.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async12049.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async12049";
      cljs.core.async.t_cljs$core$async12049.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
          return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async12049");
        };
      }(cs);
      cljs.core.async.__GT_t_cljs$core$async12049 = function(cs) {
        return function cljs$core$async$mult_$___GT_t_cljs$core$async12049(mult__$1, ch__$1, cs__$1, meta12050) {
          return new cljs.core.async.t_cljs$core$async12049(mult__$1, ch__$1, cs__$1, meta12050);
        };
      }(cs);
    }
    return new cljs.core.async.t_cljs$core$async12049(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__9573__auto___12270 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___12270, cs, m, dchan, dctr, done) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___12270, cs, m, dchan, dctr, done) {
          return function(state_12182) {
            var state_val_12183 = state_12182[1];
            if (state_val_12183 === 7) {
              var inst_12178 = state_12182[2];
              var state_12182__$1 = state_12182;
              var statearr_12184_12271 = state_12182__$1;
              statearr_12184_12271[2] = inst_12178;
              statearr_12184_12271[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12183 === 20) {
                var inst_12083 = state_12182[7];
                var inst_12093 = cljs.core.first.call(null, inst_12083);
                var inst_12094 = cljs.core.nth.call(null, inst_12093, 0, null);
                var inst_12095 = cljs.core.nth.call(null, inst_12093, 1, null);
                var state_12182__$1 = function() {
                  var statearr_12185 = state_12182;
                  statearr_12185[8] = inst_12094;
                  return statearr_12185;
                }();
                if (cljs.core.truth_(inst_12095)) {
                  var statearr_12186_12272 = state_12182__$1;
                  statearr_12186_12272[1] = 22;
                } else {
                  var statearr_12187_12273 = state_12182__$1;
                  statearr_12187_12273[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12183 === 27) {
                  var inst_12123 = state_12182[9];
                  var inst_12125 = state_12182[10];
                  var inst_12054 = state_12182[11];
                  var inst_12130 = state_12182[12];
                  var inst_12130__$1 = cljs.core._nth.call(null, inst_12123, inst_12125);
                  var inst_12131 = cljs.core.async.put_BANG_.call(null, inst_12130__$1, inst_12054, done);
                  var state_12182__$1 = function() {
                    var statearr_12188 = state_12182;
                    statearr_12188[12] = inst_12130__$1;
                    return statearr_12188;
                  }();
                  if (cljs.core.truth_(inst_12131)) {
                    var statearr_12189_12274 = state_12182__$1;
                    statearr_12189_12274[1] = 30;
                  } else {
                    var statearr_12190_12275 = state_12182__$1;
                    statearr_12190_12275[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12183 === 1) {
                    var state_12182__$1 = state_12182;
                    var statearr_12191_12276 = state_12182__$1;
                    statearr_12191_12276[2] = null;
                    statearr_12191_12276[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12183 === 24) {
                      var inst_12083 = state_12182[7];
                      var inst_12100 = state_12182[2];
                      var inst_12101 = cljs.core.next.call(null, inst_12083);
                      var inst_12063 = inst_12101;
                      var inst_12064 = null;
                      var inst_12065 = 0;
                      var inst_12066 = 0;
                      var state_12182__$1 = function() {
                        var statearr_12192 = state_12182;
                        statearr_12192[13] = inst_12100;
                        statearr_12192[14] = inst_12065;
                        statearr_12192[15] = inst_12064;
                        statearr_12192[16] = inst_12063;
                        statearr_12192[17] = inst_12066;
                        return statearr_12192;
                      }();
                      var statearr_12193_12277 = state_12182__$1;
                      statearr_12193_12277[2] = null;
                      statearr_12193_12277[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12183 === 39) {
                        var state_12182__$1 = state_12182;
                        var statearr_12197_12278 = state_12182__$1;
                        statearr_12197_12278[2] = null;
                        statearr_12197_12278[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12183 === 4) {
                          var inst_12054 = state_12182[11];
                          var inst_12054__$1 = state_12182[2];
                          var inst_12055 = inst_12054__$1 == null;
                          var state_12182__$1 = function() {
                            var statearr_12198 = state_12182;
                            statearr_12198[11] = inst_12054__$1;
                            return statearr_12198;
                          }();
                          if (cljs.core.truth_(inst_12055)) {
                            var statearr_12199_12279 = state_12182__$1;
                            statearr_12199_12279[1] = 5;
                          } else {
                            var statearr_12200_12280 = state_12182__$1;
                            statearr_12200_12280[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12183 === 15) {
                            var inst_12065 = state_12182[14];
                            var inst_12064 = state_12182[15];
                            var inst_12063 = state_12182[16];
                            var inst_12066 = state_12182[17];
                            var inst_12079 = state_12182[2];
                            var inst_12080 = inst_12066 + 1;
                            var tmp12194 = inst_12065;
                            var tmp12195 = inst_12064;
                            var tmp12196 = inst_12063;
                            var inst_12063__$1 = tmp12196;
                            var inst_12064__$1 = tmp12195;
                            var inst_12065__$1 = tmp12194;
                            var inst_12066__$1 = inst_12080;
                            var state_12182__$1 = function() {
                              var statearr_12201 = state_12182;
                              statearr_12201[18] = inst_12079;
                              statearr_12201[14] = inst_12065__$1;
                              statearr_12201[15] = inst_12064__$1;
                              statearr_12201[16] = inst_12063__$1;
                              statearr_12201[17] = inst_12066__$1;
                              return statearr_12201;
                            }();
                            var statearr_12202_12281 = state_12182__$1;
                            statearr_12202_12281[2] = null;
                            statearr_12202_12281[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12183 === 21) {
                              var inst_12104 = state_12182[2];
                              var state_12182__$1 = state_12182;
                              var statearr_12206_12282 = state_12182__$1;
                              statearr_12206_12282[2] = inst_12104;
                              statearr_12206_12282[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12183 === 31) {
                                var inst_12130 = state_12182[12];
                                var inst_12134 = done.call(null, null);
                                var inst_12135 = cljs.core.async.untap_STAR_.call(null, m, inst_12130);
                                var state_12182__$1 = function() {
                                  var statearr_12207 = state_12182;
                                  statearr_12207[19] = inst_12134;
                                  return statearr_12207;
                                }();
                                var statearr_12208_12283 = state_12182__$1;
                                statearr_12208_12283[2] = inst_12135;
                                statearr_12208_12283[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12183 === 32) {
                                  var inst_12122 = state_12182[20];
                                  var inst_12123 = state_12182[9];
                                  var inst_12125 = state_12182[10];
                                  var inst_12124 = state_12182[21];
                                  var inst_12137 = state_12182[2];
                                  var inst_12138 = inst_12125 + 1;
                                  var tmp12203 = inst_12122;
                                  var tmp12204 = inst_12123;
                                  var tmp12205 = inst_12124;
                                  var inst_12122__$1 = tmp12203;
                                  var inst_12123__$1 = tmp12204;
                                  var inst_12124__$1 = tmp12205;
                                  var inst_12125__$1 = inst_12138;
                                  var state_12182__$1 = function() {
                                    var statearr_12209 = state_12182;
                                    statearr_12209[20] = inst_12122__$1;
                                    statearr_12209[9] = inst_12123__$1;
                                    statearr_12209[10] = inst_12125__$1;
                                    statearr_12209[21] = inst_12124__$1;
                                    statearr_12209[22] = inst_12137;
                                    return statearr_12209;
                                  }();
                                  var statearr_12210_12284 = state_12182__$1;
                                  statearr_12210_12284[2] = null;
                                  statearr_12210_12284[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12183 === 40) {
                                    var inst_12150 = state_12182[23];
                                    var inst_12154 = done.call(null, null);
                                    var inst_12155 = cljs.core.async.untap_STAR_.call(null, m, inst_12150);
                                    var state_12182__$1 = function() {
                                      var statearr_12211 = state_12182;
                                      statearr_12211[24] = inst_12154;
                                      return statearr_12211;
                                    }();
                                    var statearr_12212_12285 = state_12182__$1;
                                    statearr_12212_12285[2] = inst_12155;
                                    statearr_12212_12285[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12183 === 33) {
                                      var inst_12141 = state_12182[25];
                                      var inst_12143 = cljs.core.chunked_seq_QMARK_.call(null, inst_12141);
                                      var state_12182__$1 = state_12182;
                                      if (inst_12143) {
                                        var statearr_12213_12286 = state_12182__$1;
                                        statearr_12213_12286[1] = 36;
                                      } else {
                                        var statearr_12214_12287 = state_12182__$1;
                                        statearr_12214_12287[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12183 === 13) {
                                        var inst_12073 = state_12182[26];
                                        var inst_12076 = cljs.core.async.close_BANG_.call(null, inst_12073);
                                        var state_12182__$1 = state_12182;
                                        var statearr_12215_12288 = state_12182__$1;
                                        statearr_12215_12288[2] = inst_12076;
                                        statearr_12215_12288[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12183 === 22) {
                                          var inst_12094 = state_12182[8];
                                          var inst_12097 = cljs.core.async.close_BANG_.call(null, inst_12094);
                                          var state_12182__$1 = state_12182;
                                          var statearr_12216_12289 = state_12182__$1;
                                          statearr_12216_12289[2] = inst_12097;
                                          statearr_12216_12289[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12183 === 36) {
                                            var inst_12141 = state_12182[25];
                                            var inst_12145 = cljs.core.chunk_first.call(null, inst_12141);
                                            var inst_12146 = cljs.core.chunk_rest.call(null, inst_12141);
                                            var inst_12147 = cljs.core.count.call(null, inst_12145);
                                            var inst_12122 = inst_12146;
                                            var inst_12123 = inst_12145;
                                            var inst_12124 = inst_12147;
                                            var inst_12125 = 0;
                                            var state_12182__$1 = function() {
                                              var statearr_12217 = state_12182;
                                              statearr_12217[20] = inst_12122;
                                              statearr_12217[9] = inst_12123;
                                              statearr_12217[10] = inst_12125;
                                              statearr_12217[21] = inst_12124;
                                              return statearr_12217;
                                            }();
                                            var statearr_12218_12290 = state_12182__$1;
                                            statearr_12218_12290[2] = null;
                                            statearr_12218_12290[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12183 === 41) {
                                              var inst_12141 = state_12182[25];
                                              var inst_12157 = state_12182[2];
                                              var inst_12158 = cljs.core.next.call(null, inst_12141);
                                              var inst_12122 = inst_12158;
                                              var inst_12123 = null;
                                              var inst_12124 = 0;
                                              var inst_12125 = 0;
                                              var state_12182__$1 = function() {
                                                var statearr_12219 = state_12182;
                                                statearr_12219[20] = inst_12122;
                                                statearr_12219[9] = inst_12123;
                                                statearr_12219[10] = inst_12125;
                                                statearr_12219[27] = inst_12157;
                                                statearr_12219[21] = inst_12124;
                                                return statearr_12219;
                                              }();
                                              var statearr_12220_12291 = state_12182__$1;
                                              statearr_12220_12291[2] = null;
                                              statearr_12220_12291[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12183 === 43) {
                                                var state_12182__$1 = state_12182;
                                                var statearr_12221_12292 = state_12182__$1;
                                                statearr_12221_12292[2] = null;
                                                statearr_12221_12292[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12183 === 29) {
                                                  var inst_12166 = state_12182[2];
                                                  var state_12182__$1 = state_12182;
                                                  var statearr_12222_12293 = state_12182__$1;
                                                  statearr_12222_12293[2] = inst_12166;
                                                  statearr_12222_12293[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12183 === 44) {
                                                    var inst_12175 = state_12182[2];
                                                    var state_12182__$1 = function() {
                                                      var statearr_12223 = state_12182;
                                                      statearr_12223[28] = inst_12175;
                                                      return statearr_12223;
                                                    }();
                                                    var statearr_12224_12294 = state_12182__$1;
                                                    statearr_12224_12294[2] = null;
                                                    statearr_12224_12294[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12183 === 6) {
                                                      var inst_12114 = state_12182[29];
                                                      var inst_12113 = cljs.core.deref.call(null, cs);
                                                      var inst_12114__$1 = cljs.core.keys.call(null, inst_12113);
                                                      var inst_12115 = cljs.core.count.call(null, inst_12114__$1);
                                                      var inst_12116 = cljs.core.reset_BANG_.call(null, dctr, inst_12115);
                                                      var inst_12121 = cljs.core.seq.call(null, inst_12114__$1);
                                                      var inst_12122 = inst_12121;
                                                      var inst_12123 = null;
                                                      var inst_12124 = 0;
                                                      var inst_12125 = 0;
                                                      var state_12182__$1 = function() {
                                                        var statearr_12225 = state_12182;
                                                        statearr_12225[20] = inst_12122;
                                                        statearr_12225[9] = inst_12123;
                                                        statearr_12225[29] = inst_12114__$1;
                                                        statearr_12225[10] = inst_12125;
                                                        statearr_12225[30] = inst_12116;
                                                        statearr_12225[21] = inst_12124;
                                                        return statearr_12225;
                                                      }();
                                                      var statearr_12226_12295 = state_12182__$1;
                                                      statearr_12226_12295[2] = null;
                                                      statearr_12226_12295[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12183 === 28) {
                                                        var inst_12122 = state_12182[20];
                                                        var inst_12141 = state_12182[25];
                                                        var inst_12141__$1 = cljs.core.seq.call(null, inst_12122);
                                                        var state_12182__$1 = function() {
                                                          var statearr_12227 = state_12182;
                                                          statearr_12227[25] = inst_12141__$1;
                                                          return statearr_12227;
                                                        }();
                                                        if (inst_12141__$1) {
                                                          var statearr_12228_12296 = state_12182__$1;
                                                          statearr_12228_12296[1] = 33;
                                                        } else {
                                                          var statearr_12229_12297 = state_12182__$1;
                                                          statearr_12229_12297[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12183 === 25) {
                                                          var inst_12125 = state_12182[10];
                                                          var inst_12124 = state_12182[21];
                                                          var inst_12127 = inst_12125 < inst_12124;
                                                          var inst_12128 = inst_12127;
                                                          var state_12182__$1 = state_12182;
                                                          if (cljs.core.truth_(inst_12128)) {
                                                            var statearr_12230_12298 = state_12182__$1;
                                                            statearr_12230_12298[1] = 27;
                                                          } else {
                                                            var statearr_12231_12299 = state_12182__$1;
                                                            statearr_12231_12299[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12183 === 34) {
                                                            var state_12182__$1 = state_12182;
                                                            var statearr_12232_12300 = state_12182__$1;
                                                            statearr_12232_12300[2] = null;
                                                            statearr_12232_12300[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12183 === 17) {
                                                              var state_12182__$1 = state_12182;
                                                              var statearr_12233_12301 = state_12182__$1;
                                                              statearr_12233_12301[2] = null;
                                                              statearr_12233_12301[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12183 === 3) {
                                                                var inst_12180 = state_12182[2];
                                                                var state_12182__$1 = state_12182;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12182__$1, inst_12180);
                                                              } else {
                                                                if (state_val_12183 === 12) {
                                                                  var inst_12109 = state_12182[2];
                                                                  var state_12182__$1 = state_12182;
                                                                  var statearr_12234_12302 = state_12182__$1;
                                                                  statearr_12234_12302[2] = inst_12109;
                                                                  statearr_12234_12302[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12183 === 2) {
                                                                    var state_12182__$1 = state_12182;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12182__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_12183 === 23) {
                                                                      var state_12182__$1 = state_12182;
                                                                      var statearr_12235_12303 = state_12182__$1;
                                                                      statearr_12235_12303[2] = null;
                                                                      statearr_12235_12303[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12183 === 35) {
                                                                        var inst_12164 = state_12182[2];
                                                                        var state_12182__$1 = state_12182;
                                                                        var statearr_12236_12304 = state_12182__$1;
                                                                        statearr_12236_12304[2] = inst_12164;
                                                                        statearr_12236_12304[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12183 === 19) {
                                                                          var inst_12083 = state_12182[7];
                                                                          var inst_12087 = cljs.core.chunk_first.call(null, inst_12083);
                                                                          var inst_12088 = cljs.core.chunk_rest.call(null, inst_12083);
                                                                          var inst_12089 = cljs.core.count.call(null, inst_12087);
                                                                          var inst_12063 = inst_12088;
                                                                          var inst_12064 = inst_12087;
                                                                          var inst_12065 = inst_12089;
                                                                          var inst_12066 = 0;
                                                                          var state_12182__$1 = function() {
                                                                            var statearr_12237 = state_12182;
                                                                            statearr_12237[14] = inst_12065;
                                                                            statearr_12237[15] = inst_12064;
                                                                            statearr_12237[16] = inst_12063;
                                                                            statearr_12237[17] = inst_12066;
                                                                            return statearr_12237;
                                                                          }();
                                                                          var statearr_12238_12305 = state_12182__$1;
                                                                          statearr_12238_12305[2] = null;
                                                                          statearr_12238_12305[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12183 === 11) {
                                                                            var inst_12083 = state_12182[7];
                                                                            var inst_12063 = state_12182[16];
                                                                            var inst_12083__$1 = cljs.core.seq.call(null, inst_12063);
                                                                            var state_12182__$1 = function() {
                                                                              var statearr_12239 = state_12182;
                                                                              statearr_12239[7] = inst_12083__$1;
                                                                              return statearr_12239;
                                                                            }();
                                                                            if (inst_12083__$1) {
                                                                              var statearr_12240_12306 = state_12182__$1;
                                                                              statearr_12240_12306[1] = 16;
                                                                            } else {
                                                                              var statearr_12241_12307 = state_12182__$1;
                                                                              statearr_12241_12307[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12183 === 9) {
                                                                              var inst_12111 = state_12182[2];
                                                                              var state_12182__$1 = state_12182;
                                                                              var statearr_12242_12308 = state_12182__$1;
                                                                              statearr_12242_12308[2] = inst_12111;
                                                                              statearr_12242_12308[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12183 === 5) {
                                                                                var inst_12061 = cljs.core.deref.call(null, cs);
                                                                                var inst_12062 = cljs.core.seq.call(null, inst_12061);
                                                                                var inst_12063 = inst_12062;
                                                                                var inst_12064 = null;
                                                                                var inst_12065 = 0;
                                                                                var inst_12066 = 0;
                                                                                var state_12182__$1 = function() {
                                                                                  var statearr_12243 = state_12182;
                                                                                  statearr_12243[14] = inst_12065;
                                                                                  statearr_12243[15] = inst_12064;
                                                                                  statearr_12243[16] = inst_12063;
                                                                                  statearr_12243[17] = inst_12066;
                                                                                  return statearr_12243;
                                                                                }();
                                                                                var statearr_12244_12309 = state_12182__$1;
                                                                                statearr_12244_12309[2] = null;
                                                                                statearr_12244_12309[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12183 === 14) {
                                                                                  var state_12182__$1 = state_12182;
                                                                                  var statearr_12245_12310 = state_12182__$1;
                                                                                  statearr_12245_12310[2] = null;
                                                                                  statearr_12245_12310[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12183 === 45) {
                                                                                    var inst_12172 = state_12182[2];
                                                                                    var state_12182__$1 = state_12182;
                                                                                    var statearr_12246_12311 = state_12182__$1;
                                                                                    statearr_12246_12311[2] = inst_12172;
                                                                                    statearr_12246_12311[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12183 === 26) {
                                                                                      var inst_12114 = state_12182[29];
                                                                                      var inst_12168 = state_12182[2];
                                                                                      var inst_12169 = cljs.core.seq.call(null, inst_12114);
                                                                                      var state_12182__$1 = function() {
                                                                                        var statearr_12247 = state_12182;
                                                                                        statearr_12247[31] = inst_12168;
                                                                                        return statearr_12247;
                                                                                      }();
                                                                                      if (inst_12169) {
                                                                                        var statearr_12248_12312 = state_12182__$1;
                                                                                        statearr_12248_12312[1] = 42;
                                                                                      } else {
                                                                                        var statearr_12249_12313 = state_12182__$1;
                                                                                        statearr_12249_12313[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12183 === 16) {
                                                                                        var inst_12083 = state_12182[7];
                                                                                        var inst_12085 = cljs.core.chunked_seq_QMARK_.call(null, inst_12083);
                                                                                        var state_12182__$1 = state_12182;
                                                                                        if (inst_12085) {
                                                                                          var statearr_12250_12314 = state_12182__$1;
                                                                                          statearr_12250_12314[1] = 19;
                                                                                        } else {
                                                                                          var statearr_12251_12315 = state_12182__$1;
                                                                                          statearr_12251_12315[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_12183 === 38) {
                                                                                          var inst_12161 = state_12182[2];
                                                                                          var state_12182__$1 = state_12182;
                                                                                          var statearr_12252_12316 = state_12182__$1;
                                                                                          statearr_12252_12316[2] = inst_12161;
                                                                                          statearr_12252_12316[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_12183 === 30) {
                                                                                            var state_12182__$1 = state_12182;
                                                                                            var statearr_12253_12317 = state_12182__$1;
                                                                                            statearr_12253_12317[2] = null;
                                                                                            statearr_12253_12317[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_12183 === 10) {
                                                                                              var inst_12064 = state_12182[15];
                                                                                              var inst_12066 = state_12182[17];
                                                                                              var inst_12072 = cljs.core._nth.call(null, inst_12064, inst_12066);
                                                                                              var inst_12073 = cljs.core.nth.call(null, inst_12072, 0, null);
                                                                                              var inst_12074 = cljs.core.nth.call(null, inst_12072, 1, null);
                                                                                              var state_12182__$1 = function() {
                                                                                                var statearr_12254 = state_12182;
                                                                                                statearr_12254[26] = inst_12073;
                                                                                                return statearr_12254;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_12074)) {
                                                                                                var statearr_12255_12318 = state_12182__$1;
                                                                                                statearr_12255_12318[1] = 13;
                                                                                              } else {
                                                                                                var statearr_12256_12319 = state_12182__$1;
                                                                                                statearr_12256_12319[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_12183 === 18) {
                                                                                                var inst_12107 = state_12182[2];
                                                                                                var state_12182__$1 = state_12182;
                                                                                                var statearr_12257_12320 = state_12182__$1;
                                                                                                statearr_12257_12320[2] = inst_12107;
                                                                                                statearr_12257_12320[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_12183 === 42) {
                                                                                                  var state_12182__$1 = state_12182;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12182__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_12183 === 37) {
                                                                                                    var inst_12054 = state_12182[11];
                                                                                                    var inst_12150 = state_12182[23];
                                                                                                    var inst_12141 = state_12182[25];
                                                                                                    var inst_12150__$1 = cljs.core.first.call(null, inst_12141);
                                                                                                    var inst_12151 = cljs.core.async.put_BANG_.call(null, inst_12150__$1, inst_12054, done);
                                                                                                    var state_12182__$1 = function() {
                                                                                                      var statearr_12258 = state_12182;
                                                                                                      statearr_12258[23] = inst_12150__$1;
                                                                                                      return statearr_12258;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_12151)) {
                                                                                                      var statearr_12259_12321 = state_12182__$1;
                                                                                                      statearr_12259_12321[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_12260_12322 = state_12182__$1;
                                                                                                      statearr_12260_12322[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_12183 === 8) {
                                                                                                      var inst_12065 = state_12182[14];
                                                                                                      var inst_12066 = state_12182[17];
                                                                                                      var inst_12068 = inst_12066 < inst_12065;
                                                                                                      var inst_12069 = inst_12068;
                                                                                                      var state_12182__$1 = state_12182;
                                                                                                      if (cljs.core.truth_(inst_12069)) {
                                                                                                        var statearr_12261_12323 = state_12182__$1;
                                                                                                        statearr_12261_12323[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_12262_12324 = state_12182__$1;
                                                                                                        statearr_12262_12324[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___12270, cs, m, dchan, dctr, done);
        return function(switch__9558__auto__, c__9573__auto___12270, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__9559__auto__ = null;
            var cljs$core$async$mult_$_state_machine__9559__auto____0 = function() {
              var statearr_12266 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12266[0] = cljs$core$async$mult_$_state_machine__9559__auto__;
              statearr_12266[1] = 1;
              return statearr_12266;
            };
            var cljs$core$async$mult_$_state_machine__9559__auto____1 = function(state_12182) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_12182);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e12267) {
                    if (e12267 instanceof Object) {
                      var ex__9562__auto__ = e12267;
                      var statearr_12268_12325 = state_12182;
                      statearr_12268_12325[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12182);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12267;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12326 = state_12182;
                  state_12182 = G__12326;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__9559__auto__ = function(state_12182) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__9559__auto____1.call(this, state_12182);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__9559__auto____0;
            cljs$core$async$mult_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__9559__auto____1;
            return cljs$core$async$mult_$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___12270, cs, m, dchan, dctr, done);
      }();
      var state__9575__auto__ = function() {
        var statearr_12269 = f__9574__auto__.call(null);
        statearr_12269[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___12270;
        return statearr_12269;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___12270, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap(var_args) {
  var args12327 = [];
  var len__7263__auto___12330 = arguments.length;
  var i__7264__auto___12331 = 0;
  while (true) {
    if (i__7264__auto___12331 < len__7263__auto___12330) {
      args12327.push(arguments[i__7264__auto___12331]);
      var G__12332 = i__7264__auto___12331 + 1;
      i__7264__auto___12331 = G__12332;
      continue;
    } else {
    }
    break;
  }
  var G__12329 = args12327.length;
  switch(G__12329) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12327.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
};
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, ch);
    } else {
      var m__6857__auto____$1 = cljs.core.async.admix_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
      }
    }
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, ch);
    } else {
      var m__6857__auto____$1 = cljs.core.async.unmix_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
      }
    }
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m);
    } else {
      var m__6857__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
      }
    }
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (!(m == null) && !(m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, state_map);
    } else {
      var m__6857__auto____$1 = cljs.core.async.toggle_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, state_map);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
      }
    }
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (!(m == null) && !(m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__6856__auto__ = m == null ? null : m;
    var m__6857__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, m, mode);
    } else {
      var m__6857__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, m, mode);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
      }
    }
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___12344 = arguments.length;
  var i__7264__auto___12345 = 0;
  while (true) {
    if (i__7264__auto___12345 < len__7263__auto___12344) {
      args__7270__auto__.push(arguments[i__7264__auto___12345]);
      var G__12346 = i__7264__auto___12345 + 1;
      i__7264__auto___12345 = G__12346;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 3 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(3), 0, null) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7271__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__12338) {
  var map__12339 = p__12338;
  var map__12339__$1 = (!(map__12339 == null) ? map__12339.cljs$lang$protocol_mask$partition0$ & 64 || map__12339.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12339) : map__12339;
  var opts = map__12339__$1;
  var statearr_12341_12347 = state;
  statearr_12341_12347[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4425__auto__ = cljs.core.async.do_alts.call(null, function(map__12339, map__12339__$1, opts) {
    return function(val) {
      var statearr_12342_12348 = state;
      statearr_12342_12348[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__12339, map__12339__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var cb = temp__4425__auto__;
    var statearr_12343_12349 = state;
    statearr_12343_12349[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq12334) {
  var G__12335 = cljs.core.first.call(null, seq12334);
  var seq12334__$1 = cljs.core.next.call(null, seq12334);
  var G__12336 = cljs.core.first.call(null, seq12334__$1);
  var seq12334__$2 = cljs.core.next.call(null, seq12334__$1);
  var G__12337 = cljs.core.first.call(null, seq12334__$2);
  var seq12334__$3 = cljs.core.next.call(null, seq12334__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12335, G__12336, G__12337, seq12334__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async12513 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async12513 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta12514) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta12514 = meta12514;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12515, meta12514__$1) {
          var self__ = this;
          var _12515__$1 = this;
          return new cljs.core.async.t_cljs$core$async12513(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta12514__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12515) {
          var self__ = this;
          var _12515__$1 = this;
          return self__.meta12514;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str("(solo-modes mode)")].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), cljs.core.with_meta(new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Symbol(null, "out", "out", 729986010, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"], 
          null)), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, 
          "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta12514", "meta12514", 430387967, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12513.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async12513.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async12513";
      cljs.core.async.t_cljs$core$async12513.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
          return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async12513");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t_cljs$core$async12513 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t_cljs$core$async12513(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12514) {
          return new cljs.core.async.t_cljs$core$async12513(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12514);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t_cljs$core$async12513(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__9573__auto___12676 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_12613) {
            var state_val_12614 = state_12613[1];
            if (state_val_12614 === 7) {
              var inst_12531 = state_12613[2];
              var state_12613__$1 = state_12613;
              var statearr_12615_12677 = state_12613__$1;
              statearr_12615_12677[2] = inst_12531;
              statearr_12615_12677[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12614 === 20) {
                var inst_12543 = state_12613[7];
                var state_12613__$1 = state_12613;
                var statearr_12616_12678 = state_12613__$1;
                statearr_12616_12678[2] = inst_12543;
                statearr_12616_12678[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12614 === 27) {
                  var state_12613__$1 = state_12613;
                  var statearr_12617_12679 = state_12613__$1;
                  statearr_12617_12679[2] = null;
                  statearr_12617_12679[1] = 28;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12614 === 1) {
                    var inst_12519 = state_12613[8];
                    var inst_12519__$1 = calc_state.call(null);
                    var inst_12521 = inst_12519__$1 == null;
                    var inst_12522 = cljs.core.not.call(null, inst_12521);
                    var state_12613__$1 = function() {
                      var statearr_12618 = state_12613;
                      statearr_12618[8] = inst_12519__$1;
                      return statearr_12618;
                    }();
                    if (inst_12522) {
                      var statearr_12619_12680 = state_12613__$1;
                      statearr_12619_12680[1] = 2;
                    } else {
                      var statearr_12620_12681 = state_12613__$1;
                      statearr_12620_12681[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12614 === 24) {
                      var inst_12587 = state_12613[9];
                      var inst_12566 = state_12613[10];
                      var inst_12573 = state_12613[11];
                      var inst_12587__$1 = inst_12566.call(null, inst_12573);
                      var state_12613__$1 = function() {
                        var statearr_12621 = state_12613;
                        statearr_12621[9] = inst_12587__$1;
                        return statearr_12621;
                      }();
                      if (cljs.core.truth_(inst_12587__$1)) {
                        var statearr_12622_12682 = state_12613__$1;
                        statearr_12622_12682[1] = 29;
                      } else {
                        var statearr_12623_12683 = state_12613__$1;
                        statearr_12623_12683[1] = 30;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12614 === 4) {
                        var inst_12534 = state_12613[2];
                        var state_12613__$1 = state_12613;
                        if (cljs.core.truth_(inst_12534)) {
                          var statearr_12624_12684 = state_12613__$1;
                          statearr_12624_12684[1] = 8;
                        } else {
                          var statearr_12625_12685 = state_12613__$1;
                          statearr_12625_12685[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12614 === 15) {
                          var inst_12560 = state_12613[2];
                          var state_12613__$1 = state_12613;
                          if (cljs.core.truth_(inst_12560)) {
                            var statearr_12626_12686 = state_12613__$1;
                            statearr_12626_12686[1] = 19;
                          } else {
                            var statearr_12627_12687 = state_12613__$1;
                            statearr_12627_12687[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12614 === 21) {
                            var inst_12565 = state_12613[12];
                            var inst_12565__$1 = state_12613[2];
                            var inst_12566 = cljs.core.get.call(null, inst_12565__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                            var inst_12567 = cljs.core.get.call(null, inst_12565__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                            var inst_12568 = cljs.core.get.call(null, inst_12565__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                            var state_12613__$1 = function() {
                              var statearr_12628 = state_12613;
                              statearr_12628[10] = inst_12566;
                              statearr_12628[12] = inst_12565__$1;
                              statearr_12628[13] = inst_12567;
                              return statearr_12628;
                            }();
                            return cljs.core.async.ioc_alts_BANG_.call(null, state_12613__$1, 22, inst_12568);
                          } else {
                            if (state_val_12614 === 31) {
                              var inst_12595 = state_12613[2];
                              var state_12613__$1 = state_12613;
                              if (cljs.core.truth_(inst_12595)) {
                                var statearr_12629_12688 = state_12613__$1;
                                statearr_12629_12688[1] = 32;
                              } else {
                                var statearr_12630_12689 = state_12613__$1;
                                statearr_12630_12689[1] = 33;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12614 === 32) {
                                var inst_12572 = state_12613[14];
                                var state_12613__$1 = state_12613;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12613__$1, 35, out, inst_12572);
                              } else {
                                if (state_val_12614 === 33) {
                                  var inst_12565 = state_12613[12];
                                  var inst_12543 = inst_12565;
                                  var state_12613__$1 = function() {
                                    var statearr_12631 = state_12613;
                                    statearr_12631[7] = inst_12543;
                                    return statearr_12631;
                                  }();
                                  var statearr_12632_12690 = state_12613__$1;
                                  statearr_12632_12690[2] = null;
                                  statearr_12632_12690[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12614 === 13) {
                                    var inst_12543 = state_12613[7];
                                    var inst_12550 = inst_12543.cljs$lang$protocol_mask$partition0$;
                                    var inst_12551 = inst_12550 & 64;
                                    var inst_12552 = inst_12543.cljs$core$ISeq$;
                                    var inst_12553 = inst_12551 || inst_12552;
                                    var state_12613__$1 = state_12613;
                                    if (cljs.core.truth_(inst_12553)) {
                                      var statearr_12633_12691 = state_12613__$1;
                                      statearr_12633_12691[1] = 16;
                                    } else {
                                      var statearr_12634_12692 = state_12613__$1;
                                      statearr_12634_12692[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12614 === 22) {
                                      var inst_12572 = state_12613[14];
                                      var inst_12573 = state_12613[11];
                                      var inst_12571 = state_12613[2];
                                      var inst_12572__$1 = cljs.core.nth.call(null, inst_12571, 0, null);
                                      var inst_12573__$1 = cljs.core.nth.call(null, inst_12571, 1, null);
                                      var inst_12574 = inst_12572__$1 == null;
                                      var inst_12575 = cljs.core._EQ_.call(null, inst_12573__$1, change);
                                      var inst_12576 = inst_12574 || inst_12575;
                                      var state_12613__$1 = function() {
                                        var statearr_12635 = state_12613;
                                        statearr_12635[14] = inst_12572__$1;
                                        statearr_12635[11] = inst_12573__$1;
                                        return statearr_12635;
                                      }();
                                      if (cljs.core.truth_(inst_12576)) {
                                        var statearr_12636_12693 = state_12613__$1;
                                        statearr_12636_12693[1] = 23;
                                      } else {
                                        var statearr_12637_12694 = state_12613__$1;
                                        statearr_12637_12694[1] = 24;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12614 === 36) {
                                        var inst_12565 = state_12613[12];
                                        var inst_12543 = inst_12565;
                                        var state_12613__$1 = function() {
                                          var statearr_12638 = state_12613;
                                          statearr_12638[7] = inst_12543;
                                          return statearr_12638;
                                        }();
                                        var statearr_12639_12695 = state_12613__$1;
                                        statearr_12639_12695[2] = null;
                                        statearr_12639_12695[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12614 === 29) {
                                          var inst_12587 = state_12613[9];
                                          var state_12613__$1 = state_12613;
                                          var statearr_12640_12696 = state_12613__$1;
                                          statearr_12640_12696[2] = inst_12587;
                                          statearr_12640_12696[1] = 31;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12614 === 6) {
                                            var state_12613__$1 = state_12613;
                                            var statearr_12641_12697 = state_12613__$1;
                                            statearr_12641_12697[2] = false;
                                            statearr_12641_12697[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12614 === 28) {
                                              var inst_12583 = state_12613[2];
                                              var inst_12584 = calc_state.call(null);
                                              var inst_12543 = inst_12584;
                                              var state_12613__$1 = function() {
                                                var statearr_12642 = state_12613;
                                                statearr_12642[15] = inst_12583;
                                                statearr_12642[7] = inst_12543;
                                                return statearr_12642;
                                              }();
                                              var statearr_12643_12698 = state_12613__$1;
                                              statearr_12643_12698[2] = null;
                                              statearr_12643_12698[1] = 11;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12614 === 25) {
                                                var inst_12609 = state_12613[2];
                                                var state_12613__$1 = state_12613;
                                                var statearr_12644_12699 = state_12613__$1;
                                                statearr_12644_12699[2] = inst_12609;
                                                statearr_12644_12699[1] = 12;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12614 === 34) {
                                                  var inst_12607 = state_12613[2];
                                                  var state_12613__$1 = state_12613;
                                                  var statearr_12645_12700 = state_12613__$1;
                                                  statearr_12645_12700[2] = inst_12607;
                                                  statearr_12645_12700[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12614 === 17) {
                                                    var state_12613__$1 = state_12613;
                                                    var statearr_12646_12701 = state_12613__$1;
                                                    statearr_12646_12701[2] = false;
                                                    statearr_12646_12701[1] = 18;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12614 === 3) {
                                                      var state_12613__$1 = state_12613;
                                                      var statearr_12647_12702 = state_12613__$1;
                                                      statearr_12647_12702[2] = false;
                                                      statearr_12647_12702[1] = 4;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12614 === 12) {
                                                        var inst_12611 = state_12613[2];
                                                        var state_12613__$1 = state_12613;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12613__$1, inst_12611);
                                                      } else {
                                                        if (state_val_12614 === 2) {
                                                          var inst_12519 = state_12613[8];
                                                          var inst_12524 = inst_12519.cljs$lang$protocol_mask$partition0$;
                                                          var inst_12525 = inst_12524 & 64;
                                                          var inst_12526 = inst_12519.cljs$core$ISeq$;
                                                          var inst_12527 = inst_12525 || inst_12526;
                                                          var state_12613__$1 = state_12613;
                                                          if (cljs.core.truth_(inst_12527)) {
                                                            var statearr_12648_12703 = state_12613__$1;
                                                            statearr_12648_12703[1] = 5;
                                                          } else {
                                                            var statearr_12649_12704 = state_12613__$1;
                                                            statearr_12649_12704[1] = 6;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12614 === 23) {
                                                            var inst_12572 = state_12613[14];
                                                            var inst_12578 = inst_12572 == null;
                                                            var state_12613__$1 = state_12613;
                                                            if (cljs.core.truth_(inst_12578)) {
                                                              var statearr_12650_12705 = state_12613__$1;
                                                              statearr_12650_12705[1] = 26;
                                                            } else {
                                                              var statearr_12651_12706 = state_12613__$1;
                                                              statearr_12651_12706[1] = 27;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12614 === 35) {
                                                              var inst_12598 = state_12613[2];
                                                              var state_12613__$1 = state_12613;
                                                              if (cljs.core.truth_(inst_12598)) {
                                                                var statearr_12652_12707 = state_12613__$1;
                                                                statearr_12652_12707[1] = 36;
                                                              } else {
                                                                var statearr_12653_12708 = state_12613__$1;
                                                                statearr_12653_12708[1] = 37;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12614 === 19) {
                                                                var inst_12543 = state_12613[7];
                                                                var inst_12562 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12543);
                                                                var state_12613__$1 = state_12613;
                                                                var statearr_12654_12709 = state_12613__$1;
                                                                statearr_12654_12709[2] = inst_12562;
                                                                statearr_12654_12709[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_12614 === 11) {
                                                                  var inst_12543 = state_12613[7];
                                                                  var inst_12547 = inst_12543 == null;
                                                                  var inst_12548 = cljs.core.not.call(null, inst_12547);
                                                                  var state_12613__$1 = state_12613;
                                                                  if (inst_12548) {
                                                                    var statearr_12655_12710 = state_12613__$1;
                                                                    statearr_12655_12710[1] = 13;
                                                                  } else {
                                                                    var statearr_12656_12711 = state_12613__$1;
                                                                    statearr_12656_12711[1] = 14;
                                                                  }
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12614 === 9) {
                                                                    var inst_12519 = state_12613[8];
                                                                    var state_12613__$1 = state_12613;
                                                                    var statearr_12657_12712 = state_12613__$1;
                                                                    statearr_12657_12712[2] = inst_12519;
                                                                    statearr_12657_12712[1] = 10;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_12614 === 5) {
                                                                      var state_12613__$1 = state_12613;
                                                                      var statearr_12658_12713 = state_12613__$1;
                                                                      statearr_12658_12713[2] = true;
                                                                      statearr_12658_12713[1] = 7;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12614 === 14) {
                                                                        var state_12613__$1 = state_12613;
                                                                        var statearr_12659_12714 = state_12613__$1;
                                                                        statearr_12659_12714[2] = false;
                                                                        statearr_12659_12714[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12614 === 26) {
                                                                          var inst_12573 = state_12613[11];
                                                                          var inst_12580 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_12573);
                                                                          var state_12613__$1 = state_12613;
                                                                          var statearr_12660_12715 = state_12613__$1;
                                                                          statearr_12660_12715[2] = inst_12580;
                                                                          statearr_12660_12715[1] = 28;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12614 === 16) {
                                                                            var state_12613__$1 = state_12613;
                                                                            var statearr_12661_12716 = state_12613__$1;
                                                                            statearr_12661_12716[2] = true;
                                                                            statearr_12661_12716[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12614 === 38) {
                                                                              var inst_12603 = state_12613[2];
                                                                              var state_12613__$1 = state_12613;
                                                                              var statearr_12662_12717 = state_12613__$1;
                                                                              statearr_12662_12717[2] = inst_12603;
                                                                              statearr_12662_12717[1] = 34;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12614 === 30) {
                                                                                var inst_12566 = state_12613[10];
                                                                                var inst_12567 = state_12613[13];
                                                                                var inst_12573 = state_12613[11];
                                                                                var inst_12590 = cljs.core.empty_QMARK_.call(null, inst_12566);
                                                                                var inst_12591 = inst_12567.call(null, inst_12573);
                                                                                var inst_12592 = cljs.core.not.call(null, inst_12591);
                                                                                var inst_12593 = inst_12590 && inst_12592;
                                                                                var state_12613__$1 = state_12613;
                                                                                var statearr_12663_12718 = state_12613__$1;
                                                                                statearr_12663_12718[2] = inst_12593;
                                                                                statearr_12663_12718[1] = 31;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12614 === 10) {
                                                                                  var inst_12519 = state_12613[8];
                                                                                  var inst_12539 = state_12613[2];
                                                                                  var inst_12540 = cljs.core.get.call(null, inst_12539, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                                                  var inst_12541 = cljs.core.get.call(null, inst_12539, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                                                  var inst_12542 = cljs.core.get.call(null, inst_12539, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                                                  var inst_12543 = inst_12519;
                                                                                  var state_12613__$1 = function() {
                                                                                    var statearr_12664 = state_12613;
                                                                                    statearr_12664[16] = inst_12541;
                                                                                    statearr_12664[17] = inst_12542;
                                                                                    statearr_12664[7] = inst_12543;
                                                                                    statearr_12664[18] = inst_12540;
                                                                                    return statearr_12664;
                                                                                  }();
                                                                                  var statearr_12665_12719 = state_12613__$1;
                                                                                  statearr_12665_12719[2] = null;
                                                                                  statearr_12665_12719[1] = 11;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12614 === 18) {
                                                                                    var inst_12557 = state_12613[2];
                                                                                    var state_12613__$1 = state_12613;
                                                                                    var statearr_12666_12720 = state_12613__$1;
                                                                                    statearr_12666_12720[2] = inst_12557;
                                                                                    statearr_12666_12720[1] = 15;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12614 === 37) {
                                                                                      var state_12613__$1 = state_12613;
                                                                                      var statearr_12667_12721 = state_12613__$1;
                                                                                      statearr_12667_12721[2] = null;
                                                                                      statearr_12667_12721[1] = 38;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12614 === 8) {
                                                                                        var inst_12519 = state_12613[8];
                                                                                        var inst_12536 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12519);
                                                                                        var state_12613__$1 = state_12613;
                                                                                        var statearr_12668_12722 = state_12613__$1;
                                                                                        statearr_12668_12722[2] = inst_12536;
                                                                                        statearr_12668_12722[1] = 10;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        return null;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__9558__auto__, c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__9559__auto__ = null;
            var cljs$core$async$mix_$_state_machine__9559__auto____0 = function() {
              var statearr_12672 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12672[0] = cljs$core$async$mix_$_state_machine__9559__auto__;
              statearr_12672[1] = 1;
              return statearr_12672;
            };
            var cljs$core$async$mix_$_state_machine__9559__auto____1 = function(state_12613) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_12613);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e12673) {
                    if (e12673 instanceof Object) {
                      var ex__9562__auto__ = e12673;
                      var statearr_12674_12723 = state_12613;
                      statearr_12674_12723[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12613);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12673;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12724 = state_12613;
                  state_12613 = G__12724;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__9559__auto__ = function(state_12613) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__9559__auto____1.call(this, state_12613);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__9559__auto____0;
            cljs$core$async$mix_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__9559__auto____1;
            return cljs$core$async$mix_$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__9575__auto__ = function() {
        var statearr_12675 = f__9574__auto__.call(null);
        statearr_12675[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___12676;
        return statearr_12675;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___12676, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
};
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (!(p == null) && !(p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__6856__auto__ = p == null ? null : p;
    var m__6857__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, p, v, ch, close_QMARK_);
    } else {
      var m__6857__auto____$1 = cljs.core.async.sub_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, p, v, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
      }
    }
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__6856__auto__ = p == null ? null : p;
    var m__6857__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, p, v, ch);
    } else {
      var m__6857__auto____$1 = cljs.core.async.unsub_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, p, v, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_(var_args) {
  var args12725 = [];
  var len__7263__auto___12728 = arguments.length;
  var i__7264__auto___12729 = 0;
  while (true) {
    if (i__7264__auto___12729 < len__7263__auto___12728) {
      args12725.push(arguments[i__7264__auto___12729]);
      var G__12730 = i__7264__auto___12729 + 1;
      i__7264__auto___12729 = G__12730;
      continue;
    } else {
    }
    break;
  }
  var G__12727 = args12725.length;
  switch(G__12727) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12725.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__6856__auto__ = p == null ? null : p;
    var m__6857__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, p);
    } else {
      var m__6857__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, p);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__6856__auto__ = p == null ? null : p;
    var m__6857__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, p, v);
    } else {
      var m__6857__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, p, v);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub(var_args) {
  var args12733 = [];
  var len__7263__auto___12858 = arguments.length;
  var i__7264__auto___12859 = 0;
  while (true) {
    if (i__7264__auto___12859 < len__7263__auto___12858) {
      args12733.push(arguments[i__7264__auto___12859]);
      var G__12860 = i__7264__auto___12859 + 1;
      i__7264__auto___12859 = G__12860;
      continue;
    } else {
    }
    break;
  }
  var G__12735 = args12733.length;
  switch(G__12735) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12733.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__6193__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__6193__auto__)) {
        return or__6193__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__6193__auto__, mults) {
          return function(p1__12732_SHARP_) {
            if (cljs.core.truth_(p1__12732_SHARP_.call(null, topic))) {
              return p1__12732_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__12732_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__6193__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t_cljs$core$async12736 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async12736 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta12737) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta12737 = meta12737;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_12738, meta12737__$1) {
          var self__ = this;
          var _12738__$1 = this;
          return new cljs.core.async.t_cljs$core$async12736(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta12737__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_12738) {
          var self__ = this;
          var _12738__$1 = this;
          return self__.meta12737;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4425__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4425__auto__)) {
            var m = temp__4425__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta12737", "meta12737", -2045186398, 
          null)], null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async12736.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async12736.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async12736";
      cljs.core.async.t_cljs$core$async12736.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
          return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async12736");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t_cljs$core$async12736 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t_cljs$core$async12736(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta12737) {
          return new cljs.core.async.t_cljs$core$async12736(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta12737);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t_cljs$core$async12736(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__9573__auto___12862 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___12862, mults, ensure_mult, p) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___12862, mults, ensure_mult, p) {
          return function(state_12810) {
            var state_val_12811 = state_12810[1];
            if (state_val_12811 === 7) {
              var inst_12806 = state_12810[2];
              var state_12810__$1 = state_12810;
              var statearr_12812_12863 = state_12810__$1;
              statearr_12812_12863[2] = inst_12806;
              statearr_12812_12863[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12811 === 20) {
                var state_12810__$1 = state_12810;
                var statearr_12813_12864 = state_12810__$1;
                statearr_12813_12864[2] = null;
                statearr_12813_12864[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12811 === 1) {
                  var state_12810__$1 = state_12810;
                  var statearr_12814_12865 = state_12810__$1;
                  statearr_12814_12865[2] = null;
                  statearr_12814_12865[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12811 === 24) {
                    var inst_12789 = state_12810[7];
                    var inst_12798 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_12789);
                    var state_12810__$1 = state_12810;
                    var statearr_12815_12866 = state_12810__$1;
                    statearr_12815_12866[2] = inst_12798;
                    statearr_12815_12866[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12811 === 4) {
                      var inst_12741 = state_12810[8];
                      var inst_12741__$1 = state_12810[2];
                      var inst_12742 = inst_12741__$1 == null;
                      var state_12810__$1 = function() {
                        var statearr_12816 = state_12810;
                        statearr_12816[8] = inst_12741__$1;
                        return statearr_12816;
                      }();
                      if (cljs.core.truth_(inst_12742)) {
                        var statearr_12817_12867 = state_12810__$1;
                        statearr_12817_12867[1] = 5;
                      } else {
                        var statearr_12818_12868 = state_12810__$1;
                        statearr_12818_12868[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12811 === 15) {
                        var inst_12783 = state_12810[2];
                        var state_12810__$1 = state_12810;
                        var statearr_12819_12869 = state_12810__$1;
                        statearr_12819_12869[2] = inst_12783;
                        statearr_12819_12869[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12811 === 21) {
                          var inst_12803 = state_12810[2];
                          var state_12810__$1 = function() {
                            var statearr_12820 = state_12810;
                            statearr_12820[9] = inst_12803;
                            return statearr_12820;
                          }();
                          var statearr_12821_12870 = state_12810__$1;
                          statearr_12821_12870[2] = null;
                          statearr_12821_12870[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12811 === 13) {
                            var inst_12765 = state_12810[10];
                            var inst_12767 = cljs.core.chunked_seq_QMARK_.call(null, inst_12765);
                            var state_12810__$1 = state_12810;
                            if (inst_12767) {
                              var statearr_12822_12871 = state_12810__$1;
                              statearr_12822_12871[1] = 16;
                            } else {
                              var statearr_12823_12872 = state_12810__$1;
                              statearr_12823_12872[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12811 === 22) {
                              var inst_12795 = state_12810[2];
                              var state_12810__$1 = state_12810;
                              if (cljs.core.truth_(inst_12795)) {
                                var statearr_12824_12873 = state_12810__$1;
                                statearr_12824_12873[1] = 23;
                              } else {
                                var statearr_12825_12874 = state_12810__$1;
                                statearr_12825_12874[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12811 === 6) {
                                var inst_12741 = state_12810[8];
                                var inst_12791 = state_12810[11];
                                var inst_12789 = state_12810[7];
                                var inst_12789__$1 = topic_fn.call(null, inst_12741);
                                var inst_12790 = cljs.core.deref.call(null, mults);
                                var inst_12791__$1 = cljs.core.get.call(null, inst_12790, inst_12789__$1);
                                var state_12810__$1 = function() {
                                  var statearr_12826 = state_12810;
                                  statearr_12826[11] = inst_12791__$1;
                                  statearr_12826[7] = inst_12789__$1;
                                  return statearr_12826;
                                }();
                                if (cljs.core.truth_(inst_12791__$1)) {
                                  var statearr_12827_12875 = state_12810__$1;
                                  statearr_12827_12875[1] = 19;
                                } else {
                                  var statearr_12828_12876 = state_12810__$1;
                                  statearr_12828_12876[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12811 === 25) {
                                  var inst_12800 = state_12810[2];
                                  var state_12810__$1 = state_12810;
                                  var statearr_12829_12877 = state_12810__$1;
                                  statearr_12829_12877[2] = inst_12800;
                                  statearr_12829_12877[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12811 === 17) {
                                    var inst_12765 = state_12810[10];
                                    var inst_12774 = cljs.core.first.call(null, inst_12765);
                                    var inst_12775 = cljs.core.async.muxch_STAR_.call(null, inst_12774);
                                    var inst_12776 = cljs.core.async.close_BANG_.call(null, inst_12775);
                                    var inst_12777 = cljs.core.next.call(null, inst_12765);
                                    var inst_12751 = inst_12777;
                                    var inst_12752 = null;
                                    var inst_12753 = 0;
                                    var inst_12754 = 0;
                                    var state_12810__$1 = function() {
                                      var statearr_12830 = state_12810;
                                      statearr_12830[12] = inst_12754;
                                      statearr_12830[13] = inst_12776;
                                      statearr_12830[14] = inst_12752;
                                      statearr_12830[15] = inst_12751;
                                      statearr_12830[16] = inst_12753;
                                      return statearr_12830;
                                    }();
                                    var statearr_12831_12878 = state_12810__$1;
                                    statearr_12831_12878[2] = null;
                                    statearr_12831_12878[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12811 === 3) {
                                      var inst_12808 = state_12810[2];
                                      var state_12810__$1 = state_12810;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12810__$1, inst_12808);
                                    } else {
                                      if (state_val_12811 === 12) {
                                        var inst_12785 = state_12810[2];
                                        var state_12810__$1 = state_12810;
                                        var statearr_12832_12879 = state_12810__$1;
                                        statearr_12832_12879[2] = inst_12785;
                                        statearr_12832_12879[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12811 === 2) {
                                          var state_12810__$1 = state_12810;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12810__$1, 4, ch);
                                        } else {
                                          if (state_val_12811 === 23) {
                                            var state_12810__$1 = state_12810;
                                            var statearr_12833_12880 = state_12810__$1;
                                            statearr_12833_12880[2] = null;
                                            statearr_12833_12880[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12811 === 19) {
                                              var inst_12741 = state_12810[8];
                                              var inst_12791 = state_12810[11];
                                              var inst_12793 = cljs.core.async.muxch_STAR_.call(null, inst_12791);
                                              var state_12810__$1 = state_12810;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12810__$1, 22, inst_12793, inst_12741);
                                            } else {
                                              if (state_val_12811 === 11) {
                                                var inst_12765 = state_12810[10];
                                                var inst_12751 = state_12810[15];
                                                var inst_12765__$1 = cljs.core.seq.call(null, inst_12751);
                                                var state_12810__$1 = function() {
                                                  var statearr_12834 = state_12810;
                                                  statearr_12834[10] = inst_12765__$1;
                                                  return statearr_12834;
                                                }();
                                                if (inst_12765__$1) {
                                                  var statearr_12835_12881 = state_12810__$1;
                                                  statearr_12835_12881[1] = 13;
                                                } else {
                                                  var statearr_12836_12882 = state_12810__$1;
                                                  statearr_12836_12882[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12811 === 9) {
                                                  var inst_12787 = state_12810[2];
                                                  var state_12810__$1 = state_12810;
                                                  var statearr_12837_12883 = state_12810__$1;
                                                  statearr_12837_12883[2] = inst_12787;
                                                  statearr_12837_12883[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12811 === 5) {
                                                    var inst_12748 = cljs.core.deref.call(null, mults);
                                                    var inst_12749 = cljs.core.vals.call(null, inst_12748);
                                                    var inst_12750 = cljs.core.seq.call(null, inst_12749);
                                                    var inst_12751 = inst_12750;
                                                    var inst_12752 = null;
                                                    var inst_12753 = 0;
                                                    var inst_12754 = 0;
                                                    var state_12810__$1 = function() {
                                                      var statearr_12838 = state_12810;
                                                      statearr_12838[12] = inst_12754;
                                                      statearr_12838[14] = inst_12752;
                                                      statearr_12838[15] = inst_12751;
                                                      statearr_12838[16] = inst_12753;
                                                      return statearr_12838;
                                                    }();
                                                    var statearr_12839_12884 = state_12810__$1;
                                                    statearr_12839_12884[2] = null;
                                                    statearr_12839_12884[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12811 === 14) {
                                                      var state_12810__$1 = state_12810;
                                                      var statearr_12843_12885 = state_12810__$1;
                                                      statearr_12843_12885[2] = null;
                                                      statearr_12843_12885[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12811 === 16) {
                                                        var inst_12765 = state_12810[10];
                                                        var inst_12769 = cljs.core.chunk_first.call(null, inst_12765);
                                                        var inst_12770 = cljs.core.chunk_rest.call(null, inst_12765);
                                                        var inst_12771 = cljs.core.count.call(null, inst_12769);
                                                        var inst_12751 = inst_12770;
                                                        var inst_12752 = inst_12769;
                                                        var inst_12753 = inst_12771;
                                                        var inst_12754 = 0;
                                                        var state_12810__$1 = function() {
                                                          var statearr_12844 = state_12810;
                                                          statearr_12844[12] = inst_12754;
                                                          statearr_12844[14] = inst_12752;
                                                          statearr_12844[15] = inst_12751;
                                                          statearr_12844[16] = inst_12753;
                                                          return statearr_12844;
                                                        }();
                                                        var statearr_12845_12886 = state_12810__$1;
                                                        statearr_12845_12886[2] = null;
                                                        statearr_12845_12886[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12811 === 10) {
                                                          var inst_12754 = state_12810[12];
                                                          var inst_12752 = state_12810[14];
                                                          var inst_12751 = state_12810[15];
                                                          var inst_12753 = state_12810[16];
                                                          var inst_12759 = cljs.core._nth.call(null, inst_12752, inst_12754);
                                                          var inst_12760 = cljs.core.async.muxch_STAR_.call(null, inst_12759);
                                                          var inst_12761 = cljs.core.async.close_BANG_.call(null, inst_12760);
                                                          var inst_12762 = inst_12754 + 1;
                                                          var tmp12840 = inst_12752;
                                                          var tmp12841 = inst_12751;
                                                          var tmp12842 = inst_12753;
                                                          var inst_12751__$1 = tmp12841;
                                                          var inst_12752__$1 = tmp12840;
                                                          var inst_12753__$1 = tmp12842;
                                                          var inst_12754__$1 = inst_12762;
                                                          var state_12810__$1 = function() {
                                                            var statearr_12846 = state_12810;
                                                            statearr_12846[12] = inst_12754__$1;
                                                            statearr_12846[14] = inst_12752__$1;
                                                            statearr_12846[15] = inst_12751__$1;
                                                            statearr_12846[17] = inst_12761;
                                                            statearr_12846[16] = inst_12753__$1;
                                                            return statearr_12846;
                                                          }();
                                                          var statearr_12847_12887 = state_12810__$1;
                                                          statearr_12847_12887[2] = null;
                                                          statearr_12847_12887[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12811 === 18) {
                                                            var inst_12780 = state_12810[2];
                                                            var state_12810__$1 = state_12810;
                                                            var statearr_12848_12888 = state_12810__$1;
                                                            statearr_12848_12888[2] = inst_12780;
                                                            statearr_12848_12888[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12811 === 8) {
                                                              var inst_12754 = state_12810[12];
                                                              var inst_12753 = state_12810[16];
                                                              var inst_12756 = inst_12754 < inst_12753;
                                                              var inst_12757 = inst_12756;
                                                              var state_12810__$1 = state_12810;
                                                              if (cljs.core.truth_(inst_12757)) {
                                                                var statearr_12849_12889 = state_12810__$1;
                                                                statearr_12849_12889[1] = 10;
                                                              } else {
                                                                var statearr_12850_12890 = state_12810__$1;
                                                                statearr_12850_12890[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___12862, mults, ensure_mult, p);
        return function(switch__9558__auto__, c__9573__auto___12862, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_12854 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12854[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_12854[1] = 1;
              return statearr_12854;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_12810) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_12810);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e12855) {
                    if (e12855 instanceof Object) {
                      var ex__9562__auto__ = e12855;
                      var statearr_12856_12891 = state_12810;
                      statearr_12856_12891[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12810);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12855;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12892 = state_12810;
                  state_12810 = G__12892;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_12810) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_12810);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___12862, mults, ensure_mult, p);
      }();
      var state__9575__auto__ = function() {
        var statearr_12857 = f__9574__auto__.call(null);
        statearr_12857[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___12862;
        return statearr_12857;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___12862, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub(var_args) {
  var args12893 = [];
  var len__7263__auto___12896 = arguments.length;
  var i__7264__auto___12897 = 0;
  while (true) {
    if (i__7264__auto___12897 < len__7263__auto___12896) {
      args12893.push(arguments[i__7264__auto___12897]);
      var G__12898 = i__7264__auto___12897 + 1;
      i__7264__auto___12897 = G__12898;
      continue;
    } else {
    }
    break;
  }
  var G__12895 = args12893.length;
  switch(G__12895) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12893.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all(var_args) {
  var args12900 = [];
  var len__7263__auto___12903 = arguments.length;
  var i__7264__auto___12904 = 0;
  while (true) {
    if (i__7264__auto___12904 < len__7263__auto___12903) {
      args12900.push(arguments[i__7264__auto___12904]);
      var G__12905 = i__7264__auto___12904 + 1;
      i__7264__auto___12904 = G__12905;
      continue;
    } else {
    }
    break;
  }
  var G__12902 = args12900.length;
  switch(G__12902) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12900.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map(var_args) {
  var args12907 = [];
  var len__7263__auto___12978 = arguments.length;
  var i__7264__auto___12979 = 0;
  while (true) {
    if (i__7264__auto___12979 < len__7263__auto___12978) {
      args12907.push(arguments[i__7264__auto___12979]);
      var G__12980 = i__7264__auto___12979 + 1;
      i__7264__auto___12979 = G__12980;
      continue;
    } else {
    }
    break;
  }
  var G__12909 = args12907.length;
  switch(G__12909) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args12907.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__9573__auto___12982 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_12948) {
            var state_val_12949 = state_12948[1];
            if (state_val_12949 === 7) {
              var state_12948__$1 = state_12948;
              var statearr_12950_12983 = state_12948__$1;
              statearr_12950_12983[2] = null;
              statearr_12950_12983[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12949 === 1) {
                var state_12948__$1 = state_12948;
                var statearr_12951_12984 = state_12948__$1;
                statearr_12951_12984[2] = null;
                statearr_12951_12984[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12949 === 4) {
                  var inst_12912 = state_12948[7];
                  var inst_12914 = inst_12912 < cnt;
                  var state_12948__$1 = state_12948;
                  if (cljs.core.truth_(inst_12914)) {
                    var statearr_12952_12985 = state_12948__$1;
                    statearr_12952_12985[1] = 6;
                  } else {
                    var statearr_12953_12986 = state_12948__$1;
                    statearr_12953_12986[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12949 === 15) {
                    var inst_12944 = state_12948[2];
                    var state_12948__$1 = state_12948;
                    var statearr_12954_12987 = state_12948__$1;
                    statearr_12954_12987[2] = inst_12944;
                    statearr_12954_12987[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12949 === 13) {
                      var inst_12937 = cljs.core.async.close_BANG_.call(null, out);
                      var state_12948__$1 = state_12948;
                      var statearr_12955_12988 = state_12948__$1;
                      statearr_12955_12988[2] = inst_12937;
                      statearr_12955_12988[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12949 === 6) {
                        var state_12948__$1 = state_12948;
                        var statearr_12956_12989 = state_12948__$1;
                        statearr_12956_12989[2] = null;
                        statearr_12956_12989[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12949 === 3) {
                          var inst_12946 = state_12948[2];
                          var state_12948__$1 = state_12948;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12948__$1, inst_12946);
                        } else {
                          if (state_val_12949 === 12) {
                            var inst_12934 = state_12948[8];
                            var inst_12934__$1 = state_12948[2];
                            var inst_12935 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_12934__$1);
                            var state_12948__$1 = function() {
                              var statearr_12957 = state_12948;
                              statearr_12957[8] = inst_12934__$1;
                              return statearr_12957;
                            }();
                            if (cljs.core.truth_(inst_12935)) {
                              var statearr_12958_12990 = state_12948__$1;
                              statearr_12958_12990[1] = 13;
                            } else {
                              var statearr_12959_12991 = state_12948__$1;
                              statearr_12959_12991[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12949 === 2) {
                              var inst_12911 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_12912 = 0;
                              var state_12948__$1 = function() {
                                var statearr_12960 = state_12948;
                                statearr_12960[9] = inst_12911;
                                statearr_12960[7] = inst_12912;
                                return statearr_12960;
                              }();
                              var statearr_12961_12992 = state_12948__$1;
                              statearr_12961_12992[2] = null;
                              statearr_12961_12992[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12949 === 11) {
                                var inst_12912 = state_12948[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_12948, 10, Object, null, 9);
                                var inst_12921 = chs__$1.call(null, inst_12912);
                                var inst_12922 = done.call(null, inst_12912);
                                var inst_12923 = cljs.core.async.take_BANG_.call(null, inst_12921, inst_12922);
                                var state_12948__$1 = state_12948;
                                var statearr_12962_12993 = state_12948__$1;
                                statearr_12962_12993[2] = inst_12923;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12948__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12949 === 9) {
                                  var inst_12912 = state_12948[7];
                                  var inst_12925 = state_12948[2];
                                  var inst_12926 = inst_12912 + 1;
                                  var inst_12912__$1 = inst_12926;
                                  var state_12948__$1 = function() {
                                    var statearr_12963 = state_12948;
                                    statearr_12963[7] = inst_12912__$1;
                                    statearr_12963[10] = inst_12925;
                                    return statearr_12963;
                                  }();
                                  var statearr_12964_12994 = state_12948__$1;
                                  statearr_12964_12994[2] = null;
                                  statearr_12964_12994[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12949 === 5) {
                                    var inst_12932 = state_12948[2];
                                    var state_12948__$1 = function() {
                                      var statearr_12965 = state_12948;
                                      statearr_12965[11] = inst_12932;
                                      return statearr_12965;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12948__$1, 12, dchan);
                                  } else {
                                    if (state_val_12949 === 14) {
                                      var inst_12934 = state_12948[8];
                                      var inst_12939 = cljs.core.apply.call(null, f, inst_12934);
                                      var state_12948__$1 = state_12948;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12948__$1, 16, out, inst_12939);
                                    } else {
                                      if (state_val_12949 === 16) {
                                        var inst_12941 = state_12948[2];
                                        var state_12948__$1 = function() {
                                          var statearr_12966 = state_12948;
                                          statearr_12966[12] = inst_12941;
                                          return statearr_12966;
                                        }();
                                        var statearr_12967_12995 = state_12948__$1;
                                        statearr_12967_12995[2] = null;
                                        statearr_12967_12995[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12949 === 10) {
                                          var inst_12916 = state_12948[2];
                                          var inst_12917 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_12948__$1 = function() {
                                            var statearr_12968 = state_12948;
                                            statearr_12968[13] = inst_12916;
                                            return statearr_12968;
                                          }();
                                          var statearr_12969_12996 = state_12948__$1;
                                          statearr_12969_12996[2] = inst_12917;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12948__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12949 === 8) {
                                            var inst_12930 = state_12948[2];
                                            var state_12948__$1 = state_12948;
                                            var statearr_12970_12997 = state_12948__$1;
                                            statearr_12970_12997[2] = inst_12930;
                                            statearr_12970_12997[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__9558__auto__, c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_12974 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12974[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_12974[1] = 1;
              return statearr_12974;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_12948) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_12948);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e12975) {
                    if (e12975 instanceof Object) {
                      var ex__9562__auto__ = e12975;
                      var statearr_12976_12998 = state_12948;
                      statearr_12976_12998[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12948);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12975;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12999 = state_12948;
                  state_12948 = G__12999;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_12948) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_12948);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__9575__auto__ = function() {
        var statearr_12977 = f__9574__auto__.call(null);
        statearr_12977[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___12982;
        return statearr_12977;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___12982, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge(var_args) {
  var args13001 = [];
  var len__7263__auto___13057 = arguments.length;
  var i__7264__auto___13058 = 0;
  while (true) {
    if (i__7264__auto___13058 < len__7263__auto___13057) {
      args13001.push(arguments[i__7264__auto___13058]);
      var G__13059 = i__7264__auto___13058 + 1;
      i__7264__auto___13058 = G__13059;
      continue;
    } else {
    }
    break;
  }
  var G__13003 = args13001.length;
  switch(G__13003) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13001.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13061 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13061, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13061, out) {
          return function(state_13033) {
            var state_val_13034 = state_13033[1];
            if (state_val_13034 === 7) {
              var inst_13012 = state_13033[7];
              var inst_13013 = state_13033[8];
              var inst_13012__$1 = state_13033[2];
              var inst_13013__$1 = cljs.core.nth.call(null, inst_13012__$1, 0, null);
              var inst_13014 = cljs.core.nth.call(null, inst_13012__$1, 1, null);
              var inst_13015 = inst_13013__$1 == null;
              var state_13033__$1 = function() {
                var statearr_13035 = state_13033;
                statearr_13035[7] = inst_13012__$1;
                statearr_13035[8] = inst_13013__$1;
                statearr_13035[9] = inst_13014;
                return statearr_13035;
              }();
              if (cljs.core.truth_(inst_13015)) {
                var statearr_13036_13062 = state_13033__$1;
                statearr_13036_13062[1] = 8;
              } else {
                var statearr_13037_13063 = state_13033__$1;
                statearr_13037_13063[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13034 === 1) {
                var inst_13004 = cljs.core.vec.call(null, chs);
                var inst_13005 = inst_13004;
                var state_13033__$1 = function() {
                  var statearr_13038 = state_13033;
                  statearr_13038[10] = inst_13005;
                  return statearr_13038;
                }();
                var statearr_13039_13064 = state_13033__$1;
                statearr_13039_13064[2] = null;
                statearr_13039_13064[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13034 === 4) {
                  var inst_13005 = state_13033[10];
                  var state_13033__$1 = state_13033;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_13033__$1, 7, inst_13005);
                } else {
                  if (state_val_13034 === 6) {
                    var inst_13029 = state_13033[2];
                    var state_13033__$1 = state_13033;
                    var statearr_13040_13065 = state_13033__$1;
                    statearr_13040_13065[2] = inst_13029;
                    statearr_13040_13065[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13034 === 3) {
                      var inst_13031 = state_13033[2];
                      var state_13033__$1 = state_13033;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13033__$1, inst_13031);
                    } else {
                      if (state_val_13034 === 2) {
                        var inst_13005 = state_13033[10];
                        var inst_13007 = cljs.core.count.call(null, inst_13005);
                        var inst_13008 = inst_13007 > 0;
                        var state_13033__$1 = state_13033;
                        if (cljs.core.truth_(inst_13008)) {
                          var statearr_13042_13066 = state_13033__$1;
                          statearr_13042_13066[1] = 4;
                        } else {
                          var statearr_13043_13067 = state_13033__$1;
                          statearr_13043_13067[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13034 === 11) {
                          var inst_13005 = state_13033[10];
                          var inst_13022 = state_13033[2];
                          var tmp13041 = inst_13005;
                          var inst_13005__$1 = tmp13041;
                          var state_13033__$1 = function() {
                            var statearr_13044 = state_13033;
                            statearr_13044[10] = inst_13005__$1;
                            statearr_13044[11] = inst_13022;
                            return statearr_13044;
                          }();
                          var statearr_13045_13068 = state_13033__$1;
                          statearr_13045_13068[2] = null;
                          statearr_13045_13068[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13034 === 9) {
                            var inst_13013 = state_13033[8];
                            var state_13033__$1 = state_13033;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13033__$1, 11, out, inst_13013);
                          } else {
                            if (state_val_13034 === 5) {
                              var inst_13027 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13033__$1 = state_13033;
                              var statearr_13046_13069 = state_13033__$1;
                              statearr_13046_13069[2] = inst_13027;
                              statearr_13046_13069[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13034 === 10) {
                                var inst_13025 = state_13033[2];
                                var state_13033__$1 = state_13033;
                                var statearr_13047_13070 = state_13033__$1;
                                statearr_13047_13070[2] = inst_13025;
                                statearr_13047_13070[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13034 === 8) {
                                  var inst_13005 = state_13033[10];
                                  var inst_13012 = state_13033[7];
                                  var inst_13013 = state_13033[8];
                                  var inst_13014 = state_13033[9];
                                  var inst_13017 = function() {
                                    var cs = inst_13005;
                                    var vec__13010 = inst_13012;
                                    var v = inst_13013;
                                    var c = inst_13014;
                                    return function(cs, vec__13010, v, c, inst_13005, inst_13012, inst_13013, inst_13014, state_val_13034, c__9573__auto___13061, out) {
                                      return function(p1__13000_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__13000_SHARP_);
                                      };
                                    }(cs, vec__13010, v, c, inst_13005, inst_13012, inst_13013, inst_13014, state_val_13034, c__9573__auto___13061, out);
                                  }();
                                  var inst_13018 = cljs.core.filterv.call(null, inst_13017, inst_13005);
                                  var inst_13005__$1 = inst_13018;
                                  var state_13033__$1 = function() {
                                    var statearr_13048 = state_13033;
                                    statearr_13048[10] = inst_13005__$1;
                                    return statearr_13048;
                                  }();
                                  var statearr_13049_13071 = state_13033__$1;
                                  statearr_13049_13071[2] = null;
                                  statearr_13049_13071[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13061, out);
        return function(switch__9558__auto__, c__9573__auto___13061, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13053 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13053[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13053[1] = 1;
              return statearr_13053;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13033) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13033);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13054) {
                    if (e13054 instanceof Object) {
                      var ex__9562__auto__ = e13054;
                      var statearr_13055_13072 = state_13033;
                      statearr_13055_13072[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13033);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13054;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13073 = state_13033;
                  state_13033 = G__13073;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13033) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13033);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13061, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13056 = f__9574__auto__.call(null);
        statearr_13056[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13061;
        return statearr_13056;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13061, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take(var_args) {
  var args13074 = [];
  var len__7263__auto___13123 = arguments.length;
  var i__7264__auto___13124 = 0;
  while (true) {
    if (i__7264__auto___13124 < len__7263__auto___13123) {
      args13074.push(arguments[i__7264__auto___13124]);
      var G__13125 = i__7264__auto___13124 + 1;
      i__7264__auto___13124 = G__13125;
      continue;
    } else {
    }
    break;
  }
  var G__13076 = args13074.length;
  switch(G__13076) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13074.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13127 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13127, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13127, out) {
          return function(state_13100) {
            var state_val_13101 = state_13100[1];
            if (state_val_13101 === 7) {
              var inst_13082 = state_13100[7];
              var inst_13082__$1 = state_13100[2];
              var inst_13083 = inst_13082__$1 == null;
              var inst_13084 = cljs.core.not.call(null, inst_13083);
              var state_13100__$1 = function() {
                var statearr_13102 = state_13100;
                statearr_13102[7] = inst_13082__$1;
                return statearr_13102;
              }();
              if (inst_13084) {
                var statearr_13103_13128 = state_13100__$1;
                statearr_13103_13128[1] = 8;
              } else {
                var statearr_13104_13129 = state_13100__$1;
                statearr_13104_13129[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13101 === 1) {
                var inst_13077 = 0;
                var state_13100__$1 = function() {
                  var statearr_13105 = state_13100;
                  statearr_13105[8] = inst_13077;
                  return statearr_13105;
                }();
                var statearr_13106_13130 = state_13100__$1;
                statearr_13106_13130[2] = null;
                statearr_13106_13130[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13101 === 4) {
                  var state_13100__$1 = state_13100;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13100__$1, 7, ch);
                } else {
                  if (state_val_13101 === 6) {
                    var inst_13095 = state_13100[2];
                    var state_13100__$1 = state_13100;
                    var statearr_13107_13131 = state_13100__$1;
                    statearr_13107_13131[2] = inst_13095;
                    statearr_13107_13131[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13101 === 3) {
                      var inst_13097 = state_13100[2];
                      var inst_13098 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13100__$1 = function() {
                        var statearr_13108 = state_13100;
                        statearr_13108[9] = inst_13097;
                        return statearr_13108;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13100__$1, inst_13098);
                    } else {
                      if (state_val_13101 === 2) {
                        var inst_13077 = state_13100[8];
                        var inst_13079 = inst_13077 < n;
                        var state_13100__$1 = state_13100;
                        if (cljs.core.truth_(inst_13079)) {
                          var statearr_13109_13132 = state_13100__$1;
                          statearr_13109_13132[1] = 4;
                        } else {
                          var statearr_13110_13133 = state_13100__$1;
                          statearr_13110_13133[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13101 === 11) {
                          var inst_13077 = state_13100[8];
                          var inst_13087 = state_13100[2];
                          var inst_13088 = inst_13077 + 1;
                          var inst_13077__$1 = inst_13088;
                          var state_13100__$1 = function() {
                            var statearr_13111 = state_13100;
                            statearr_13111[8] = inst_13077__$1;
                            statearr_13111[10] = inst_13087;
                            return statearr_13111;
                          }();
                          var statearr_13112_13134 = state_13100__$1;
                          statearr_13112_13134[2] = null;
                          statearr_13112_13134[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13101 === 9) {
                            var state_13100__$1 = state_13100;
                            var statearr_13113_13135 = state_13100__$1;
                            statearr_13113_13135[2] = null;
                            statearr_13113_13135[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13101 === 5) {
                              var state_13100__$1 = state_13100;
                              var statearr_13114_13136 = state_13100__$1;
                              statearr_13114_13136[2] = null;
                              statearr_13114_13136[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13101 === 10) {
                                var inst_13092 = state_13100[2];
                                var state_13100__$1 = state_13100;
                                var statearr_13115_13137 = state_13100__$1;
                                statearr_13115_13137[2] = inst_13092;
                                statearr_13115_13137[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13101 === 8) {
                                  var inst_13082 = state_13100[7];
                                  var state_13100__$1 = state_13100;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13100__$1, 11, out, inst_13082);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13127, out);
        return function(switch__9558__auto__, c__9573__auto___13127, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13119 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13119[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13119[1] = 1;
              return statearr_13119;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13100) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13100);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13120) {
                    if (e13120 instanceof Object) {
                      var ex__9562__auto__ = e13120;
                      var statearr_13121_13138 = state_13100;
                      statearr_13121_13138[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13100);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13120;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13139 = state_13100;
                  state_13100 = G__13139;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13100) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13100);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13127, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13122 = f__9574__auto__.call(null);
        statearr_13122[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13127;
        return statearr_13122;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13127, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13147 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13147 = function(map_LT_, f, ch, meta13148) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta13148 = meta13148;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13149, meta13148__$1) {
      var self__ = this;
      var _13149__$1 = this;
      return new cljs.core.async.t_cljs$core$async13147(self__.map_LT_, self__.f, self__.ch, meta13148__$1);
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13149) {
      var self__ = this;
      var _13149__$1 = this;
      return self__.meta13148;
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t_cljs$core$async13150 !== "undefined") {
        } else {
          cljs.core.async.t_cljs$core$async13150 = function(map_LT_, f, ch, meta13148, _, fn1, meta13151) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta13148 = meta13148;
            this._ = _;
            this.fn1 = fn1;
            this.meta13151 = meta13151;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_13152, meta13151__$1) {
              var self__ = this;
              var _13152__$1 = this;
              return new cljs.core.async.t_cljs$core$async13150(self__.map_LT_, self__.f, self__.ch, self__.meta13148, self__._, self__.fn1, meta13151__$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_13152) {
              var self__ = this;
              var _13152__$1 = this;
              return self__.meta13151;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return true;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__13140_SHARP_) {
                  return f1.call(null, p1__13140_SHARP_ == null ? null : self__.f.call(null, p1__13140_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
              "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13148", "meta13148", 160718914, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_", "_", -1201019570, null), 
              new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core.async", "t_cljs$core$async13147", "cljs.core.async/t_cljs$core$async13147", -153274369, null)], null)), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta13151", "meta13151", 603160574, null)], null);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13150.cljs$lang$type = true;
          cljs.core.async.t_cljs$core$async13150.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13150";
          cljs.core.async.t_cljs$core$async13150.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
              return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async13150");
            };
          }(___$1);
          cljs.core.async.__GT_t_cljs$core$async13150 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t_cljs$core$async13150(map_LT___$1, f__$1, ch__$1, meta13148__$1, ___$2, fn1__$1, meta13151) {
              return new cljs.core.async.t_cljs$core$async13150(map_LT___$1, f__$1, ch__$1, meta13148__$1, ___$2, fn1__$1, meta13151);
            };
          }(___$1);
        }
        return new cljs.core.async.t_cljs$core$async13150(self__.map_LT_, self__.f, self__.ch, self__.meta13148, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__6181__auto__ = ret;
        if (cljs.core.truth_(and__6181__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__6181__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async13147.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t_cljs$core$async13147.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13148", "meta13148", 160718914, null)], null);
    };
    cljs.core.async.t_cljs$core$async13147.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13147.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13147";
    cljs.core.async.t_cljs$core$async13147.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async13147");
    };
    cljs.core.async.__GT_t_cljs$core$async13147 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async13147(map_LT___$1, f__$1, ch__$1, meta13148) {
      return new cljs.core.async.t_cljs$core$async13147(map_LT___$1, f__$1, ch__$1, meta13148);
    };
  }
  return new cljs.core.async.t_cljs$core$async13147(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13156 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13156 = function(map_GT_, f, ch, meta13157) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta13157 = meta13157;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13158, meta13157__$1) {
      var self__ = this;
      var _13158__$1 = this;
      return new cljs.core.async.t_cljs$core$async13156(self__.map_GT_, self__.f, self__.ch, meta13157__$1);
    };
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13158) {
      var self__ = this;
      var _13158__$1 = this;
      return self__.meta13157;
    };
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async13156.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t_cljs$core$async13156.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13157", "meta13157", -1137614752, null)], null);
    };
    cljs.core.async.t_cljs$core$async13156.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13156.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13156";
    cljs.core.async.t_cljs$core$async13156.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async13156");
    };
    cljs.core.async.__GT_t_cljs$core$async13156 = function cljs$core$async$map_GT__$___GT_t_cljs$core$async13156(map_GT___$1, f__$1, ch__$1, meta13157) {
      return new cljs.core.async.t_cljs$core$async13156(map_GT___$1, f__$1, ch__$1, meta13157);
    };
  }
  return new cljs.core.async.t_cljs$core$async13156(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13162 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13162 = function(filter_GT_, p, ch, meta13163) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta13163 = meta13163;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13164, meta13163__$1) {
      var self__ = this;
      var _13164__$1 = this;
      return new cljs.core.async.t_cljs$core$async13162(self__.filter_GT_, self__.p, self__.ch, meta13163__$1);
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13164) {
      var self__ = this;
      var _13164__$1 = this;
      return self__.meta13163;
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async13162.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t_cljs$core$async13162.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
      "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13163", "meta13163", 978822438, null)], null);
    };
    cljs.core.async.t_cljs$core$async13162.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13162.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13162";
    cljs.core.async.t_cljs$core$async13162.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "cljs.core.async/t_cljs$core$async13162");
    };
    cljs.core.async.__GT_t_cljs$core$async13162 = function cljs$core$async$filter_GT__$___GT_t_cljs$core$async13162(filter_GT___$1, p__$1, ch__$1, meta13163) {
      return new cljs.core.async.t_cljs$core$async13162(filter_GT___$1, p__$1, ch__$1, meta13163);
    };
  }
  return new cljs.core.async.t_cljs$core$async13162(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_(var_args) {
  var args13165 = [];
  var len__7263__auto___13209 = arguments.length;
  var i__7264__auto___13210 = 0;
  while (true) {
    if (i__7264__auto___13210 < len__7263__auto___13209) {
      args13165.push(arguments[i__7264__auto___13210]);
      var G__13211 = i__7264__auto___13210 + 1;
      i__7264__auto___13210 = G__13211;
      continue;
    } else {
    }
    break;
  }
  var G__13167 = args13165.length;
  switch(G__13167) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13165.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13213 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13213, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13213, out) {
          return function(state_13188) {
            var state_val_13189 = state_13188[1];
            if (state_val_13189 === 7) {
              var inst_13184 = state_13188[2];
              var state_13188__$1 = state_13188;
              var statearr_13190_13214 = state_13188__$1;
              statearr_13190_13214[2] = inst_13184;
              statearr_13190_13214[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13189 === 1) {
                var state_13188__$1 = state_13188;
                var statearr_13191_13215 = state_13188__$1;
                statearr_13191_13215[2] = null;
                statearr_13191_13215[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13189 === 4) {
                  var inst_13170 = state_13188[7];
                  var inst_13170__$1 = state_13188[2];
                  var inst_13171 = inst_13170__$1 == null;
                  var state_13188__$1 = function() {
                    var statearr_13192 = state_13188;
                    statearr_13192[7] = inst_13170__$1;
                    return statearr_13192;
                  }();
                  if (cljs.core.truth_(inst_13171)) {
                    var statearr_13193_13216 = state_13188__$1;
                    statearr_13193_13216[1] = 5;
                  } else {
                    var statearr_13194_13217 = state_13188__$1;
                    statearr_13194_13217[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13189 === 6) {
                    var inst_13170 = state_13188[7];
                    var inst_13175 = p.call(null, inst_13170);
                    var state_13188__$1 = state_13188;
                    if (cljs.core.truth_(inst_13175)) {
                      var statearr_13195_13218 = state_13188__$1;
                      statearr_13195_13218[1] = 8;
                    } else {
                      var statearr_13196_13219 = state_13188__$1;
                      statearr_13196_13219[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13189 === 3) {
                      var inst_13186 = state_13188[2];
                      var state_13188__$1 = state_13188;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13188__$1, inst_13186);
                    } else {
                      if (state_val_13189 === 2) {
                        var state_13188__$1 = state_13188;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13188__$1, 4, ch);
                      } else {
                        if (state_val_13189 === 11) {
                          var inst_13178 = state_13188[2];
                          var state_13188__$1 = state_13188;
                          var statearr_13197_13220 = state_13188__$1;
                          statearr_13197_13220[2] = inst_13178;
                          statearr_13197_13220[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13189 === 9) {
                            var state_13188__$1 = state_13188;
                            var statearr_13198_13221 = state_13188__$1;
                            statearr_13198_13221[2] = null;
                            statearr_13198_13221[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13189 === 5) {
                              var inst_13173 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13188__$1 = state_13188;
                              var statearr_13199_13222 = state_13188__$1;
                              statearr_13199_13222[2] = inst_13173;
                              statearr_13199_13222[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13189 === 10) {
                                var inst_13181 = state_13188[2];
                                var state_13188__$1 = function() {
                                  var statearr_13200 = state_13188;
                                  statearr_13200[8] = inst_13181;
                                  return statearr_13200;
                                }();
                                var statearr_13201_13223 = state_13188__$1;
                                statearr_13201_13223[2] = null;
                                statearr_13201_13223[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13189 === 8) {
                                  var inst_13170 = state_13188[7];
                                  var state_13188__$1 = state_13188;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13188__$1, 11, out, inst_13170);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13213, out);
        return function(switch__9558__auto__, c__9573__auto___13213, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13205 = [null, null, null, null, null, null, null, null, null];
              statearr_13205[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13205[1] = 1;
              return statearr_13205;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13188) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13188);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13206) {
                    if (e13206 instanceof Object) {
                      var ex__9562__auto__ = e13206;
                      var statearr_13207_13224 = state_13188;
                      statearr_13207_13224[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13188);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13206;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13225 = state_13188;
                  state_13188 = G__13225;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13188) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13188);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13213, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13208 = f__9574__auto__.call(null);
        statearr_13208[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13213;
        return statearr_13208;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13213, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_(var_args) {
  var args13226 = [];
  var len__7263__auto___13229 = arguments.length;
  var i__7264__auto___13230 = 0;
  while (true) {
    if (i__7264__auto___13230 < len__7263__auto___13229) {
      args13226.push(arguments[i__7264__auto___13230]);
      var G__13231 = i__7264__auto___13230 + 1;
      i__7264__auto___13230 = G__13231;
      continue;
    } else {
    }
    break;
  }
  var G__13228 = args13226.length;
  switch(G__13228) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13226.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__9573__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto__) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto__) {
          return function(state_13398) {
            var state_val_13399 = state_13398[1];
            if (state_val_13399 === 7) {
              var inst_13394 = state_13398[2];
              var state_13398__$1 = state_13398;
              var statearr_13400_13441 = state_13398__$1;
              statearr_13400_13441[2] = inst_13394;
              statearr_13400_13441[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13399 === 20) {
                var inst_13364 = state_13398[7];
                var inst_13375 = state_13398[2];
                var inst_13376 = cljs.core.next.call(null, inst_13364);
                var inst_13350 = inst_13376;
                var inst_13351 = null;
                var inst_13352 = 0;
                var inst_13353 = 0;
                var state_13398__$1 = function() {
                  var statearr_13401 = state_13398;
                  statearr_13401[8] = inst_13351;
                  statearr_13401[9] = inst_13350;
                  statearr_13401[10] = inst_13375;
                  statearr_13401[11] = inst_13353;
                  statearr_13401[12] = inst_13352;
                  return statearr_13401;
                }();
                var statearr_13402_13442 = state_13398__$1;
                statearr_13402_13442[2] = null;
                statearr_13402_13442[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13399 === 1) {
                  var state_13398__$1 = state_13398;
                  var statearr_13403_13443 = state_13398__$1;
                  statearr_13403_13443[2] = null;
                  statearr_13403_13443[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13399 === 4) {
                    var inst_13339 = state_13398[13];
                    var inst_13339__$1 = state_13398[2];
                    var inst_13340 = inst_13339__$1 == null;
                    var state_13398__$1 = function() {
                      var statearr_13404 = state_13398;
                      statearr_13404[13] = inst_13339__$1;
                      return statearr_13404;
                    }();
                    if (cljs.core.truth_(inst_13340)) {
                      var statearr_13405_13444 = state_13398__$1;
                      statearr_13405_13444[1] = 5;
                    } else {
                      var statearr_13406_13445 = state_13398__$1;
                      statearr_13406_13445[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13399 === 15) {
                      var state_13398__$1 = state_13398;
                      var statearr_13410_13446 = state_13398__$1;
                      statearr_13410_13446[2] = null;
                      statearr_13410_13446[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13399 === 21) {
                        var state_13398__$1 = state_13398;
                        var statearr_13411_13447 = state_13398__$1;
                        statearr_13411_13447[2] = null;
                        statearr_13411_13447[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13399 === 13) {
                          var inst_13351 = state_13398[8];
                          var inst_13350 = state_13398[9];
                          var inst_13353 = state_13398[11];
                          var inst_13352 = state_13398[12];
                          var inst_13360 = state_13398[2];
                          var inst_13361 = inst_13353 + 1;
                          var tmp13407 = inst_13351;
                          var tmp13408 = inst_13350;
                          var tmp13409 = inst_13352;
                          var inst_13350__$1 = tmp13408;
                          var inst_13351__$1 = tmp13407;
                          var inst_13352__$1 = tmp13409;
                          var inst_13353__$1 = inst_13361;
                          var state_13398__$1 = function() {
                            var statearr_13412 = state_13398;
                            statearr_13412[8] = inst_13351__$1;
                            statearr_13412[9] = inst_13350__$1;
                            statearr_13412[11] = inst_13353__$1;
                            statearr_13412[12] = inst_13352__$1;
                            statearr_13412[14] = inst_13360;
                            return statearr_13412;
                          }();
                          var statearr_13413_13448 = state_13398__$1;
                          statearr_13413_13448[2] = null;
                          statearr_13413_13448[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13399 === 22) {
                            var state_13398__$1 = state_13398;
                            var statearr_13414_13449 = state_13398__$1;
                            statearr_13414_13449[2] = null;
                            statearr_13414_13449[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13399 === 6) {
                              var inst_13339 = state_13398[13];
                              var inst_13348 = f.call(null, inst_13339);
                              var inst_13349 = cljs.core.seq.call(null, inst_13348);
                              var inst_13350 = inst_13349;
                              var inst_13351 = null;
                              var inst_13352 = 0;
                              var inst_13353 = 0;
                              var state_13398__$1 = function() {
                                var statearr_13415 = state_13398;
                                statearr_13415[8] = inst_13351;
                                statearr_13415[9] = inst_13350;
                                statearr_13415[11] = inst_13353;
                                statearr_13415[12] = inst_13352;
                                return statearr_13415;
                              }();
                              var statearr_13416_13450 = state_13398__$1;
                              statearr_13416_13450[2] = null;
                              statearr_13416_13450[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13399 === 17) {
                                var inst_13364 = state_13398[7];
                                var inst_13368 = cljs.core.chunk_first.call(null, inst_13364);
                                var inst_13369 = cljs.core.chunk_rest.call(null, inst_13364);
                                var inst_13370 = cljs.core.count.call(null, inst_13368);
                                var inst_13350 = inst_13369;
                                var inst_13351 = inst_13368;
                                var inst_13352 = inst_13370;
                                var inst_13353 = 0;
                                var state_13398__$1 = function() {
                                  var statearr_13417 = state_13398;
                                  statearr_13417[8] = inst_13351;
                                  statearr_13417[9] = inst_13350;
                                  statearr_13417[11] = inst_13353;
                                  statearr_13417[12] = inst_13352;
                                  return statearr_13417;
                                }();
                                var statearr_13418_13451 = state_13398__$1;
                                statearr_13418_13451[2] = null;
                                statearr_13418_13451[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13399 === 3) {
                                  var inst_13396 = state_13398[2];
                                  var state_13398__$1 = state_13398;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13398__$1, inst_13396);
                                } else {
                                  if (state_val_13399 === 12) {
                                    var inst_13384 = state_13398[2];
                                    var state_13398__$1 = state_13398;
                                    var statearr_13419_13452 = state_13398__$1;
                                    statearr_13419_13452[2] = inst_13384;
                                    statearr_13419_13452[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13399 === 2) {
                                      var state_13398__$1 = state_13398;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13398__$1, 4, in$);
                                    } else {
                                      if (state_val_13399 === 23) {
                                        var inst_13392 = state_13398[2];
                                        var state_13398__$1 = state_13398;
                                        var statearr_13420_13453 = state_13398__$1;
                                        statearr_13420_13453[2] = inst_13392;
                                        statearr_13420_13453[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13399 === 19) {
                                          var inst_13379 = state_13398[2];
                                          var state_13398__$1 = state_13398;
                                          var statearr_13421_13454 = state_13398__$1;
                                          statearr_13421_13454[2] = inst_13379;
                                          statearr_13421_13454[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13399 === 11) {
                                            var inst_13350 = state_13398[9];
                                            var inst_13364 = state_13398[7];
                                            var inst_13364__$1 = cljs.core.seq.call(null, inst_13350);
                                            var state_13398__$1 = function() {
                                              var statearr_13422 = state_13398;
                                              statearr_13422[7] = inst_13364__$1;
                                              return statearr_13422;
                                            }();
                                            if (inst_13364__$1) {
                                              var statearr_13423_13455 = state_13398__$1;
                                              statearr_13423_13455[1] = 14;
                                            } else {
                                              var statearr_13424_13456 = state_13398__$1;
                                              statearr_13424_13456[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13399 === 9) {
                                              var inst_13386 = state_13398[2];
                                              var inst_13387 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_13398__$1 = function() {
                                                var statearr_13425 = state_13398;
                                                statearr_13425[15] = inst_13386;
                                                return statearr_13425;
                                              }();
                                              if (cljs.core.truth_(inst_13387)) {
                                                var statearr_13426_13457 = state_13398__$1;
                                                statearr_13426_13457[1] = 21;
                                              } else {
                                                var statearr_13427_13458 = state_13398__$1;
                                                statearr_13427_13458[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13399 === 5) {
                                                var inst_13342 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_13398__$1 = state_13398;
                                                var statearr_13428_13459 = state_13398__$1;
                                                statearr_13428_13459[2] = inst_13342;
                                                statearr_13428_13459[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13399 === 14) {
                                                  var inst_13364 = state_13398[7];
                                                  var inst_13366 = cljs.core.chunked_seq_QMARK_.call(null, inst_13364);
                                                  var state_13398__$1 = state_13398;
                                                  if (inst_13366) {
                                                    var statearr_13429_13460 = state_13398__$1;
                                                    statearr_13429_13460[1] = 17;
                                                  } else {
                                                    var statearr_13430_13461 = state_13398__$1;
                                                    statearr_13430_13461[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13399 === 16) {
                                                    var inst_13382 = state_13398[2];
                                                    var state_13398__$1 = state_13398;
                                                    var statearr_13431_13462 = state_13398__$1;
                                                    statearr_13431_13462[2] = inst_13382;
                                                    statearr_13431_13462[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13399 === 10) {
                                                      var inst_13351 = state_13398[8];
                                                      var inst_13353 = state_13398[11];
                                                      var inst_13358 = cljs.core._nth.call(null, inst_13351, inst_13353);
                                                      var state_13398__$1 = state_13398;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13398__$1, 13, out, inst_13358);
                                                    } else {
                                                      if (state_val_13399 === 18) {
                                                        var inst_13364 = state_13398[7];
                                                        var inst_13373 = cljs.core.first.call(null, inst_13364);
                                                        var state_13398__$1 = state_13398;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13398__$1, 20, out, inst_13373);
                                                      } else {
                                                        if (state_val_13399 === 8) {
                                                          var inst_13353 = state_13398[11];
                                                          var inst_13352 = state_13398[12];
                                                          var inst_13355 = inst_13353 < inst_13352;
                                                          var inst_13356 = inst_13355;
                                                          var state_13398__$1 = state_13398;
                                                          if (cljs.core.truth_(inst_13356)) {
                                                            var statearr_13432_13463 = state_13398__$1;
                                                            statearr_13432_13463[1] = 10;
                                                          } else {
                                                            var statearr_13433_13464 = state_13398__$1;
                                                            statearr_13433_13464[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto__);
        return function(switch__9558__auto__, c__9573__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____0 = function() {
              var statearr_13437 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13437[0] = cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__;
              statearr_13437[1] = 1;
              return statearr_13437;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____1 = function(state_13398) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13398);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13438) {
                    if (e13438 instanceof Object) {
                      var ex__9562__auto__ = e13438;
                      var statearr_13439_13465 = state_13398;
                      statearr_13439_13465[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13398);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13438;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13466 = state_13398;
                  state_13398 = G__13466;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__ = function(state_13398) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____1.call(this, state_13398);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__9559__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto__);
      }();
      var state__9575__auto__ = function() {
        var statearr_13440 = f__9574__auto__.call(null);
        statearr_13440[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto__;
        return statearr_13440;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto__));
  return c__9573__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_(var_args) {
  var args13467 = [];
  var len__7263__auto___13470 = arguments.length;
  var i__7264__auto___13471 = 0;
  while (true) {
    if (i__7264__auto___13471 < len__7263__auto___13470) {
      args13467.push(arguments[i__7264__auto___13471]);
      var G__13472 = i__7264__auto___13471 + 1;
      i__7264__auto___13471 = G__13472;
      continue;
    } else {
    }
    break;
  }
  var G__13469 = args13467.length;
  switch(G__13469) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13467.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_(var_args) {
  var args13474 = [];
  var len__7263__auto___13477 = arguments.length;
  var i__7264__auto___13478 = 0;
  while (true) {
    if (i__7264__auto___13478 < len__7263__auto___13477) {
      args13474.push(arguments[i__7264__auto___13478]);
      var G__13479 = i__7264__auto___13478 + 1;
      i__7264__auto___13478 = G__13479;
      continue;
    } else {
    }
    break;
  }
  var G__13476 = args13474.length;
  switch(G__13476) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13474.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique(var_args) {
  var args13481 = [];
  var len__7263__auto___13532 = arguments.length;
  var i__7264__auto___13533 = 0;
  while (true) {
    if (i__7264__auto___13533 < len__7263__auto___13532) {
      args13481.push(arguments[i__7264__auto___13533]);
      var G__13534 = i__7264__auto___13533 + 1;
      i__7264__auto___13533 = G__13534;
      continue;
    } else {
    }
    break;
  }
  var G__13483 = args13481.length;
  switch(G__13483) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13481.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13536 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13536, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13536, out) {
          return function(state_13507) {
            var state_val_13508 = state_13507[1];
            if (state_val_13508 === 7) {
              var inst_13502 = state_13507[2];
              var state_13507__$1 = state_13507;
              var statearr_13509_13537 = state_13507__$1;
              statearr_13509_13537[2] = inst_13502;
              statearr_13509_13537[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13508 === 1) {
                var inst_13484 = null;
                var state_13507__$1 = function() {
                  var statearr_13510 = state_13507;
                  statearr_13510[7] = inst_13484;
                  return statearr_13510;
                }();
                var statearr_13511_13538 = state_13507__$1;
                statearr_13511_13538[2] = null;
                statearr_13511_13538[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13508 === 4) {
                  var inst_13487 = state_13507[8];
                  var inst_13487__$1 = state_13507[2];
                  var inst_13488 = inst_13487__$1 == null;
                  var inst_13489 = cljs.core.not.call(null, inst_13488);
                  var state_13507__$1 = function() {
                    var statearr_13512 = state_13507;
                    statearr_13512[8] = inst_13487__$1;
                    return statearr_13512;
                  }();
                  if (inst_13489) {
                    var statearr_13513_13539 = state_13507__$1;
                    statearr_13513_13539[1] = 5;
                  } else {
                    var statearr_13514_13540 = state_13507__$1;
                    statearr_13514_13540[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13508 === 6) {
                    var state_13507__$1 = state_13507;
                    var statearr_13515_13541 = state_13507__$1;
                    statearr_13515_13541[2] = null;
                    statearr_13515_13541[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13508 === 3) {
                      var inst_13504 = state_13507[2];
                      var inst_13505 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13507__$1 = function() {
                        var statearr_13516 = state_13507;
                        statearr_13516[9] = inst_13504;
                        return statearr_13516;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13507__$1, inst_13505);
                    } else {
                      if (state_val_13508 === 2) {
                        var state_13507__$1 = state_13507;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13507__$1, 4, ch);
                      } else {
                        if (state_val_13508 === 11) {
                          var inst_13487 = state_13507[8];
                          var inst_13496 = state_13507[2];
                          var inst_13484 = inst_13487;
                          var state_13507__$1 = function() {
                            var statearr_13517 = state_13507;
                            statearr_13517[7] = inst_13484;
                            statearr_13517[10] = inst_13496;
                            return statearr_13517;
                          }();
                          var statearr_13518_13542 = state_13507__$1;
                          statearr_13518_13542[2] = null;
                          statearr_13518_13542[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13508 === 9) {
                            var inst_13487 = state_13507[8];
                            var state_13507__$1 = state_13507;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13507__$1, 11, out, inst_13487);
                          } else {
                            if (state_val_13508 === 5) {
                              var inst_13484 = state_13507[7];
                              var inst_13487 = state_13507[8];
                              var inst_13491 = cljs.core._EQ_.call(null, inst_13487, inst_13484);
                              var state_13507__$1 = state_13507;
                              if (inst_13491) {
                                var statearr_13520_13543 = state_13507__$1;
                                statearr_13520_13543[1] = 8;
                              } else {
                                var statearr_13521_13544 = state_13507__$1;
                                statearr_13521_13544[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13508 === 10) {
                                var inst_13499 = state_13507[2];
                                var state_13507__$1 = state_13507;
                                var statearr_13522_13545 = state_13507__$1;
                                statearr_13522_13545[2] = inst_13499;
                                statearr_13522_13545[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13508 === 8) {
                                  var inst_13484 = state_13507[7];
                                  var tmp13519 = inst_13484;
                                  var inst_13484__$1 = tmp13519;
                                  var state_13507__$1 = function() {
                                    var statearr_13523 = state_13507;
                                    statearr_13523[7] = inst_13484__$1;
                                    return statearr_13523;
                                  }();
                                  var statearr_13524_13546 = state_13507__$1;
                                  statearr_13524_13546[2] = null;
                                  statearr_13524_13546[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13536, out);
        return function(switch__9558__auto__, c__9573__auto___13536, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13528 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13528[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13528[1] = 1;
              return statearr_13528;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13507) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13507);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13529) {
                    if (e13529 instanceof Object) {
                      var ex__9562__auto__ = e13529;
                      var statearr_13530_13547 = state_13507;
                      statearr_13530_13547[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13507);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13529;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13548 = state_13507;
                  state_13507 = G__13548;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13507) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13507);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13536, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13531 = f__9574__auto__.call(null);
        statearr_13531[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13536;
        return statearr_13531;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13536, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition(var_args) {
  var args13549 = [];
  var len__7263__auto___13619 = arguments.length;
  var i__7264__auto___13620 = 0;
  while (true) {
    if (i__7264__auto___13620 < len__7263__auto___13619) {
      args13549.push(arguments[i__7264__auto___13620]);
      var G__13621 = i__7264__auto___13620 + 1;
      i__7264__auto___13620 = G__13621;
      continue;
    } else {
    }
    break;
  }
  var G__13551 = args13549.length;
  switch(G__13551) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13549.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13623 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13623, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13623, out) {
          return function(state_13589) {
            var state_val_13590 = state_13589[1];
            if (state_val_13590 === 7) {
              var inst_13585 = state_13589[2];
              var state_13589__$1 = state_13589;
              var statearr_13591_13624 = state_13589__$1;
              statearr_13591_13624[2] = inst_13585;
              statearr_13591_13624[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13590 === 1) {
                var inst_13552 = new Array(n);
                var inst_13553 = inst_13552;
                var inst_13554 = 0;
                var state_13589__$1 = function() {
                  var statearr_13592 = state_13589;
                  statearr_13592[7] = inst_13553;
                  statearr_13592[8] = inst_13554;
                  return statearr_13592;
                }();
                var statearr_13593_13625 = state_13589__$1;
                statearr_13593_13625[2] = null;
                statearr_13593_13625[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13590 === 4) {
                  var inst_13557 = state_13589[9];
                  var inst_13557__$1 = state_13589[2];
                  var inst_13558 = inst_13557__$1 == null;
                  var inst_13559 = cljs.core.not.call(null, inst_13558);
                  var state_13589__$1 = function() {
                    var statearr_13594 = state_13589;
                    statearr_13594[9] = inst_13557__$1;
                    return statearr_13594;
                  }();
                  if (inst_13559) {
                    var statearr_13595_13626 = state_13589__$1;
                    statearr_13595_13626[1] = 5;
                  } else {
                    var statearr_13596_13627 = state_13589__$1;
                    statearr_13596_13627[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13590 === 15) {
                    var inst_13579 = state_13589[2];
                    var state_13589__$1 = state_13589;
                    var statearr_13597_13628 = state_13589__$1;
                    statearr_13597_13628[2] = inst_13579;
                    statearr_13597_13628[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13590 === 13) {
                      var state_13589__$1 = state_13589;
                      var statearr_13598_13629 = state_13589__$1;
                      statearr_13598_13629[2] = null;
                      statearr_13598_13629[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13590 === 6) {
                        var inst_13554 = state_13589[8];
                        var inst_13575 = inst_13554 > 0;
                        var state_13589__$1 = state_13589;
                        if (cljs.core.truth_(inst_13575)) {
                          var statearr_13599_13630 = state_13589__$1;
                          statearr_13599_13630[1] = 12;
                        } else {
                          var statearr_13600_13631 = state_13589__$1;
                          statearr_13600_13631[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13590 === 3) {
                          var inst_13587 = state_13589[2];
                          var state_13589__$1 = state_13589;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13589__$1, inst_13587);
                        } else {
                          if (state_val_13590 === 12) {
                            var inst_13553 = state_13589[7];
                            var inst_13577 = cljs.core.vec.call(null, inst_13553);
                            var state_13589__$1 = state_13589;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13589__$1, 15, out, inst_13577);
                          } else {
                            if (state_val_13590 === 2) {
                              var state_13589__$1 = state_13589;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13589__$1, 4, ch);
                            } else {
                              if (state_val_13590 === 11) {
                                var inst_13569 = state_13589[2];
                                var inst_13570 = new Array(n);
                                var inst_13553 = inst_13570;
                                var inst_13554 = 0;
                                var state_13589__$1 = function() {
                                  var statearr_13601 = state_13589;
                                  statearr_13601[10] = inst_13569;
                                  statearr_13601[7] = inst_13553;
                                  statearr_13601[8] = inst_13554;
                                  return statearr_13601;
                                }();
                                var statearr_13602_13632 = state_13589__$1;
                                statearr_13602_13632[2] = null;
                                statearr_13602_13632[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13590 === 9) {
                                  var inst_13553 = state_13589[7];
                                  var inst_13567 = cljs.core.vec.call(null, inst_13553);
                                  var state_13589__$1 = state_13589;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13589__$1, 11, out, inst_13567);
                                } else {
                                  if (state_val_13590 === 5) {
                                    var inst_13553 = state_13589[7];
                                    var inst_13554 = state_13589[8];
                                    var inst_13562 = state_13589[11];
                                    var inst_13557 = state_13589[9];
                                    var inst_13561 = inst_13553[inst_13554] = inst_13557;
                                    var inst_13562__$1 = inst_13554 + 1;
                                    var inst_13563 = inst_13562__$1 < n;
                                    var state_13589__$1 = function() {
                                      var statearr_13603 = state_13589;
                                      statearr_13603[11] = inst_13562__$1;
                                      statearr_13603[12] = inst_13561;
                                      return statearr_13603;
                                    }();
                                    if (cljs.core.truth_(inst_13563)) {
                                      var statearr_13604_13633 = state_13589__$1;
                                      statearr_13604_13633[1] = 8;
                                    } else {
                                      var statearr_13605_13634 = state_13589__$1;
                                      statearr_13605_13634[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13590 === 14) {
                                      var inst_13582 = state_13589[2];
                                      var inst_13583 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13589__$1 = function() {
                                        var statearr_13607 = state_13589;
                                        statearr_13607[13] = inst_13582;
                                        return statearr_13607;
                                      }();
                                      var statearr_13608_13635 = state_13589__$1;
                                      statearr_13608_13635[2] = inst_13583;
                                      statearr_13608_13635[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13590 === 10) {
                                        var inst_13573 = state_13589[2];
                                        var state_13589__$1 = state_13589;
                                        var statearr_13609_13636 = state_13589__$1;
                                        statearr_13609_13636[2] = inst_13573;
                                        statearr_13609_13636[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13590 === 8) {
                                          var inst_13553 = state_13589[7];
                                          var inst_13562 = state_13589[11];
                                          var tmp13606 = inst_13553;
                                          var inst_13553__$1 = tmp13606;
                                          var inst_13554 = inst_13562;
                                          var state_13589__$1 = function() {
                                            var statearr_13610 = state_13589;
                                            statearr_13610[7] = inst_13553__$1;
                                            statearr_13610[8] = inst_13554;
                                            return statearr_13610;
                                          }();
                                          var statearr_13611_13637 = state_13589__$1;
                                          statearr_13611_13637[2] = null;
                                          statearr_13611_13637[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13623, out);
        return function(switch__9558__auto__, c__9573__auto___13623, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13615 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13615[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13615[1] = 1;
              return statearr_13615;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13589) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13589);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13616) {
                    if (e13616 instanceof Object) {
                      var ex__9562__auto__ = e13616;
                      var statearr_13617_13638 = state_13589;
                      statearr_13617_13638[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13589);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13616;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13639 = state_13589;
                  state_13589 = G__13639;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13589) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13589);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13623, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13618 = f__9574__auto__.call(null);
        statearr_13618[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13623;
        return statearr_13618;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13623, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by(var_args) {
  var args13640 = [];
  var len__7263__auto___13714 = arguments.length;
  var i__7264__auto___13715 = 0;
  while (true) {
    if (i__7264__auto___13715 < len__7263__auto___13714) {
      args13640.push(arguments[i__7264__auto___13715]);
      var G__13716 = i__7264__auto___13715 + 1;
      i__7264__auto___13715 = G__13716;
      continue;
    } else {
    }
    break;
  }
  var G__13642 = args13640.length;
  switch(G__13642) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13640.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__9573__auto___13718 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13718, out) {
    return function() {
      var f__9574__auto__ = function() {
        var switch__9558__auto__ = function(c__9573__auto___13718, out) {
          return function(state_13684) {
            var state_val_13685 = state_13684[1];
            if (state_val_13685 === 7) {
              var inst_13680 = state_13684[2];
              var state_13684__$1 = state_13684;
              var statearr_13686_13719 = state_13684__$1;
              statearr_13686_13719[2] = inst_13680;
              statearr_13686_13719[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13685 === 1) {
                var inst_13643 = [];
                var inst_13644 = inst_13643;
                var inst_13645 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_13684__$1 = function() {
                  var statearr_13687 = state_13684;
                  statearr_13687[7] = inst_13645;
                  statearr_13687[8] = inst_13644;
                  return statearr_13687;
                }();
                var statearr_13688_13720 = state_13684__$1;
                statearr_13688_13720[2] = null;
                statearr_13688_13720[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13685 === 4) {
                  var inst_13648 = state_13684[9];
                  var inst_13648__$1 = state_13684[2];
                  var inst_13649 = inst_13648__$1 == null;
                  var inst_13650 = cljs.core.not.call(null, inst_13649);
                  var state_13684__$1 = function() {
                    var statearr_13689 = state_13684;
                    statearr_13689[9] = inst_13648__$1;
                    return statearr_13689;
                  }();
                  if (inst_13650) {
                    var statearr_13690_13721 = state_13684__$1;
                    statearr_13690_13721[1] = 5;
                  } else {
                    var statearr_13691_13722 = state_13684__$1;
                    statearr_13691_13722[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13685 === 15) {
                    var inst_13674 = state_13684[2];
                    var state_13684__$1 = state_13684;
                    var statearr_13692_13723 = state_13684__$1;
                    statearr_13692_13723[2] = inst_13674;
                    statearr_13692_13723[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13685 === 13) {
                      var state_13684__$1 = state_13684;
                      var statearr_13693_13724 = state_13684__$1;
                      statearr_13693_13724[2] = null;
                      statearr_13693_13724[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13685 === 6) {
                        var inst_13644 = state_13684[8];
                        var inst_13669 = inst_13644.length;
                        var inst_13670 = inst_13669 > 0;
                        var state_13684__$1 = state_13684;
                        if (cljs.core.truth_(inst_13670)) {
                          var statearr_13694_13725 = state_13684__$1;
                          statearr_13694_13725[1] = 12;
                        } else {
                          var statearr_13695_13726 = state_13684__$1;
                          statearr_13695_13726[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13685 === 3) {
                          var inst_13682 = state_13684[2];
                          var state_13684__$1 = state_13684;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13684__$1, inst_13682);
                        } else {
                          if (state_val_13685 === 12) {
                            var inst_13644 = state_13684[8];
                            var inst_13672 = cljs.core.vec.call(null, inst_13644);
                            var state_13684__$1 = state_13684;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13684__$1, 15, out, inst_13672);
                          } else {
                            if (state_val_13685 === 2) {
                              var state_13684__$1 = state_13684;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13684__$1, 4, ch);
                            } else {
                              if (state_val_13685 === 11) {
                                var inst_13648 = state_13684[9];
                                var inst_13652 = state_13684[10];
                                var inst_13662 = state_13684[2];
                                var inst_13663 = [];
                                var inst_13664 = inst_13663.push(inst_13648);
                                var inst_13644 = inst_13663;
                                var inst_13645 = inst_13652;
                                var state_13684__$1 = function() {
                                  var statearr_13696 = state_13684;
                                  statearr_13696[7] = inst_13645;
                                  statearr_13696[11] = inst_13662;
                                  statearr_13696[12] = inst_13664;
                                  statearr_13696[8] = inst_13644;
                                  return statearr_13696;
                                }();
                                var statearr_13697_13727 = state_13684__$1;
                                statearr_13697_13727[2] = null;
                                statearr_13697_13727[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13685 === 9) {
                                  var inst_13644 = state_13684[8];
                                  var inst_13660 = cljs.core.vec.call(null, inst_13644);
                                  var state_13684__$1 = state_13684;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13684__$1, 11, out, inst_13660);
                                } else {
                                  if (state_val_13685 === 5) {
                                    var inst_13645 = state_13684[7];
                                    var inst_13648 = state_13684[9];
                                    var inst_13652 = state_13684[10];
                                    var inst_13652__$1 = f.call(null, inst_13648);
                                    var inst_13653 = cljs.core._EQ_.call(null, inst_13652__$1, inst_13645);
                                    var inst_13654 = cljs.core.keyword_identical_QMARK_.call(null, inst_13645, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_13655 = inst_13653 || inst_13654;
                                    var state_13684__$1 = function() {
                                      var statearr_13698 = state_13684;
                                      statearr_13698[10] = inst_13652__$1;
                                      return statearr_13698;
                                    }();
                                    if (cljs.core.truth_(inst_13655)) {
                                      var statearr_13699_13728 = state_13684__$1;
                                      statearr_13699_13728[1] = 8;
                                    } else {
                                      var statearr_13700_13729 = state_13684__$1;
                                      statearr_13700_13729[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13685 === 14) {
                                      var inst_13677 = state_13684[2];
                                      var inst_13678 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13684__$1 = function() {
                                        var statearr_13702 = state_13684;
                                        statearr_13702[13] = inst_13677;
                                        return statearr_13702;
                                      }();
                                      var statearr_13703_13730 = state_13684__$1;
                                      statearr_13703_13730[2] = inst_13678;
                                      statearr_13703_13730[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13685 === 10) {
                                        var inst_13667 = state_13684[2];
                                        var state_13684__$1 = state_13684;
                                        var statearr_13704_13731 = state_13684__$1;
                                        statearr_13704_13731[2] = inst_13667;
                                        statearr_13704_13731[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13685 === 8) {
                                          var inst_13648 = state_13684[9];
                                          var inst_13644 = state_13684[8];
                                          var inst_13652 = state_13684[10];
                                          var inst_13657 = inst_13644.push(inst_13648);
                                          var tmp13701 = inst_13644;
                                          var inst_13644__$1 = tmp13701;
                                          var inst_13645 = inst_13652;
                                          var state_13684__$1 = function() {
                                            var statearr_13705 = state_13684;
                                            statearr_13705[7] = inst_13645;
                                            statearr_13705[14] = inst_13657;
                                            statearr_13705[8] = inst_13644__$1;
                                            return statearr_13705;
                                          }();
                                          var statearr_13706_13732 = state_13684__$1;
                                          statearr_13706_13732[2] = null;
                                          statearr_13706_13732[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__9573__auto___13718, out);
        return function(switch__9558__auto__, c__9573__auto___13718, out) {
          return function() {
            var cljs$core$async$state_machine__9559__auto__ = null;
            var cljs$core$async$state_machine__9559__auto____0 = function() {
              var statearr_13710 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13710[0] = cljs$core$async$state_machine__9559__auto__;
              statearr_13710[1] = 1;
              return statearr_13710;
            };
            var cljs$core$async$state_machine__9559__auto____1 = function(state_13684) {
              while (true) {
                var ret_value__9560__auto__ = function() {
                  try {
                    while (true) {
                      var result__9561__auto__ = switch__9558__auto__.call(null, state_13684);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__9561__auto__;
                      }
                      break;
                    }
                  } catch (e13711) {
                    if (e13711 instanceof Object) {
                      var ex__9562__auto__ = e13711;
                      var statearr_13712_13733 = state_13684;
                      statearr_13712_13733[5] = ex__9562__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13684);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13711;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13734 = state_13684;
                  state_13684 = G__13734;
                  continue;
                } else {
                  return ret_value__9560__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__9559__auto__ = function(state_13684) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__9559__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__9559__auto____1.call(this, state_13684);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9559__auto____0;
            cljs$core$async$state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9559__auto____1;
            return cljs$core$async$state_machine__9559__auto__;
          }();
        }(switch__9558__auto__, c__9573__auto___13718, out);
      }();
      var state__9575__auto__ = function() {
        var statearr_13713 = f__9574__auto__.call(null);
        statearr_13713[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13718;
        return statearr_13713;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
    };
  }(c__9573__auto___13718, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("cljs.core.async");
goog.require("cljs_http.util");
goog.require("goog.net.Jsonp");
goog.require("clojure.string");
goog.require("goog.net.XhrIo");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function cljs_http$core$abort_BANG_(channel) {
  var temp__4425__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var req = temp__4425__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    if (cljs.core.truth_(req.hasOwnProperty("abort"))) {
      return req.abort();
    } else {
      return (new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588)).cljs$core$IFn$_invoke$arity$1(req).cancel((new cljs.core.Keyword(null, "request", "request", 1772954723)).cljs$core$IFn$_invoke$arity$1(req));
    }
  } else {
    return null;
  }
};
cljs_http.core.aborted_QMARK_ = function cljs_http$core$aborted_QMARK_(xhr) {
  return cljs.core._EQ_.call(null, xhr.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
cljs_http.core.apply_default_headers_BANG_ = function cljs_http$core$apply_default_headers_BANG_(xhr, headers) {
  var formatted_h = cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, headers)), cljs.core.vals.call(null, headers));
  return cljs.core.dorun.call(null, cljs.core.map.call(null, function(formatted_h) {
    return function(p__13739) {
      var vec__13740 = p__13739;
      var k = cljs.core.nth.call(null, vec__13740, 0, null);
      var v = cljs.core.nth.call(null, vec__13740, 1, null);
      return xhr.headers.set(k, v);
    };
  }(formatted_h), formatted_h));
};
cljs_http.core.apply_response_type_BANG_ = function cljs_http$core$apply_response_type_BANG_(xhr, response_type) {
  return xhr.setResponseType(function() {
    var G__13742 = response_type;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "array-buffer", "array-buffer", 519008380), G__13742)) {
      return goog.net.XhrIo.ResponseType.ARRAY_BUFFER;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "blob", "blob", 1636965233), G__13742)) {
        return goog.net.XhrIo.ResponseType.BLOB;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "document", "document", -1329188687), G__13742)) {
          return goog.net.XhrIo.ResponseType.DOCUMENT;
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), G__13742)) {
            return goog.net.XhrIo.ResponseType.TEXT;
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), G__13742)) {
              return goog.net.XhrIo.ResponseType.DEFAULT;
            } else {
              if (cljs.core._EQ_.call(null, null, G__13742)) {
                return goog.net.XhrIo.ResponseType.DEFAULT;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(response_type)].join(""));
              }
            }
          }
        }
      }
    }
  }());
};
cljs_http.core.build_xhr = function cljs_http$core$build_xhr(p__13743) {
  var map__13747 = p__13743;
  var map__13747__$1 = (!(map__13747 == null) ? map__13747.cljs$lang$protocol_mask$partition0$ & 64 || map__13747.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13747) : map__13747;
  var request = map__13747__$1;
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__13747__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var default_headers = cljs.core.get.call(null, map__13747__$1, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094));
  var response_type = cljs.core.get.call(null, map__13747__$1, new cljs.core.Keyword(null, "response-type", "response-type", -1493770458));
  var timeout = function() {
    var or__6193__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return 0;
    }
  }();
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var G__13749 = new goog.net.XhrIo;
  cljs_http.core.apply_default_headers_BANG_.call(null, G__13749, default_headers);
  cljs_http.core.apply_response_type_BANG_.call(null, G__13749, response_type);
  G__13749.setTimeoutInterval(timeout);
  G__13749.setWithCredentials(send_credentials);
  return G__13749;
};
cljs_http.core.error_kw = cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 9, 5, 8], [new cljs.core.Keyword(null, "no-error", "no-error", 1984610064), new cljs.core.Keyword(null, "abort", "abort", 521193198), new cljs.core.Keyword(null, "access-denied", "access-denied", 959449406), new cljs.core.Keyword(null, "custom-error", "custom-error", -1565161123), new cljs.core.Keyword(null, "http-error", "http-error", -1040049553), new cljs.core.Keyword(null, "ff-silent-error", "ff-silent-error", 
189390514), new cljs.core.Keyword(null, "file-not-found", "file-not-found", -65398940), new cljs.core.Keyword(null, "offline", "offline", -107631935), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "timeout", "timeout", -318625318)]);
cljs_http.core.xhr = function cljs_http$core$xhr(p__13750) {
  var map__13777 = p__13750;
  var map__13777__$1 = (!(map__13777 == null) ? map__13777.cljs$lang$protocol_mask$partition0$ & 64 || map__13777.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13777) : map__13777;
  var request = map__13777__$1;
  var request_method = cljs.core.get.call(null, map__13777__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var headers = cljs.core.get.call(null, map__13777__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var body = cljs.core.get.call(null, map__13777__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__13777__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var cancel = cljs.core.get.call(null, map__13777__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var channel = cljs.core.async.chan.call(null);
  var request_url = cljs_http.util.build_url.call(null, request);
  var method = cljs.core.name.call(null, function() {
    var or__6193__auto__ = request_method;
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var xhr__$1 = cljs_http.core.build_xhr.call(null, request);
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr__$1);
  xhr__$1.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
    return function(evt) {
      var target = evt.target;
      var response = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponse(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, "trace-redirects", "trace-redirects", 
      -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null), new cljs.core.Keyword(null, "error-code", "error-code", 180497232), cljs_http.core.error_kw.call(null, target.getLastErrorCode()), new cljs.core.Keyword(null, "error-text", "error-text", 2021893718), target.getLastError()], null);
      if (cljs.core.not.call(null, cljs_http.core.aborted_QMARK_.call(null, xhr__$1))) {
        cljs.core.async.put_BANG_.call(null, channel, response);
      } else {
      }
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  xhr__$1.send(request_url, method, body, headers__$1);
  if (cljs.core.truth_(cancel)) {
    var c__9573__auto___13803 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
      return function() {
        var f__9574__auto__ = function() {
          var switch__9558__auto__ = function(c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function(state_13789) {
              var state_val_13790 = state_13789[1];
              if (state_val_13790 === 1) {
                var state_13789__$1 = state_13789;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13789__$1, 2, cancel);
              } else {
                if (state_val_13790 === 2) {
                  var inst_13780 = state_13789[2];
                  var inst_13781 = xhr__$1.isComplete();
                  var inst_13782 = cljs.core.not.call(null, inst_13781);
                  var state_13789__$1 = function() {
                    var statearr_13791 = state_13789;
                    statearr_13791[7] = inst_13780;
                    return statearr_13791;
                  }();
                  if (inst_13782) {
                    var statearr_13792_13804 = state_13789__$1;
                    statearr_13792_13804[1] = 3;
                  } else {
                    var statearr_13793_13805 = state_13789__$1;
                    statearr_13793_13805[1] = 4;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13790 === 3) {
                    var inst_13784 = xhr__$1.abort();
                    var state_13789__$1 = state_13789;
                    var statearr_13794_13806 = state_13789__$1;
                    statearr_13794_13806[2] = inst_13784;
                    statearr_13794_13806[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13790 === 4) {
                      var state_13789__$1 = state_13789;
                      var statearr_13795_13807 = state_13789__$1;
                      statearr_13795_13807[2] = null;
                      statearr_13795_13807[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13790 === 5) {
                        var inst_13787 = state_13789[2];
                        var state_13789__$1 = state_13789;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13789__$1, inst_13787);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
          return function(switch__9558__auto__, c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function() {
              var cljs_http$core$xhr_$_state_machine__9559__auto__ = null;
              var cljs_http$core$xhr_$_state_machine__9559__auto____0 = function() {
                var statearr_13799 = [null, null, null, null, null, null, null, null];
                statearr_13799[0] = cljs_http$core$xhr_$_state_machine__9559__auto__;
                statearr_13799[1] = 1;
                return statearr_13799;
              };
              var cljs_http$core$xhr_$_state_machine__9559__auto____1 = function(state_13789) {
                while (true) {
                  var ret_value__9560__auto__ = function() {
                    try {
                      while (true) {
                        var result__9561__auto__ = switch__9558__auto__.call(null, state_13789);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__9561__auto__;
                        }
                        break;
                      }
                    } catch (e13800) {
                      if (e13800 instanceof Object) {
                        var ex__9562__auto__ = e13800;
                        var statearr_13801_13808 = state_13789;
                        statearr_13801_13808[5] = ex__9562__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13789);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13800;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13809 = state_13789;
                    state_13789 = G__13809;
                    continue;
                  } else {
                    return ret_value__9560__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$xhr_$_state_machine__9559__auto__ = function(state_13789) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$xhr_$_state_machine__9559__auto____0.call(this);
                  case 1:
                    return cljs_http$core$xhr_$_state_machine__9559__auto____1.call(this, state_13789);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$xhr_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$xhr_$_state_machine__9559__auto____0;
              cljs_http$core$xhr_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$xhr_$_state_machine__9559__auto____1;
              return cljs_http$core$xhr_$_state_machine__9559__auto__;
            }();
          }(switch__9558__auto__, c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
        }();
        var state__9575__auto__ = function() {
          var statearr_13802 = f__9574__auto__.call(null);
          statearr_13802[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13803;
          return statearr_13802;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
      };
    }(c__9573__auto___13803, channel, request_url, method, headers__$1, xhr__$1, map__13777, map__13777__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  } else {
  }
  return channel;
};
cljs_http.core.jsonp = function cljs_http$core$jsonp(p__13810) {
  var map__13827 = p__13810;
  var map__13827__$1 = (!(map__13827 == null) ? map__13827.cljs$lang$protocol_mask$partition0$ & 64 || map__13827.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13827) : map__13827;
  var request = map__13827__$1;
  var timeout = cljs.core.get.call(null, map__13827__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var callback_name = cljs.core.get.call(null, map__13827__$1, new cljs.core.Keyword(null, "callback-name", "callback-name", 336964714));
  var cancel = cljs.core.get.call(null, map__13827__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var keywordize_keys_QMARK_ = cljs.core.get.call(null, map__13827__$1, new cljs.core.Keyword(null, "keywordize-keys?", "keywordize-keys?", -254545987), true);
  var channel = cljs.core.async.chan.call(null);
  var jsonp__$1 = new goog.net.Jsonp(cljs_http.util.build_url.call(null, request), callback_name);
  jsonp__$1.setRequestTimeout(timeout);
  var req_13843 = jsonp__$1.send(null, function(channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_success_callback(data) {
      var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), 200, new cljs.core.Keyword(null, "success", "success", 1890645906), true, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.js__GT_clj.call(null, data, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywordize_keys_QMARK_)], null);
      cljs.core.async.put_BANG_.call(null, channel, response);
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_), function(channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_error_callback() {
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), jsonp__$1, new cljs.core.Keyword(null, "request", "request", 1772954723), req_13843], null));
  if (cljs.core.truth_(cancel)) {
    var c__9573__auto___13844 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
      return function() {
        var f__9574__auto__ = function() {
          var switch__9558__auto__ = function(c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function(state_13833) {
              var state_val_13834 = state_13833[1];
              if (state_val_13834 === 1) {
                var state_13833__$1 = state_13833;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13833__$1, 2, cancel);
              } else {
                if (state_val_13834 === 2) {
                  var inst_13830 = state_13833[2];
                  var inst_13831 = jsonp__$1.cancel(req_13843);
                  var state_13833__$1 = function() {
                    var statearr_13835 = state_13833;
                    statearr_13835[7] = inst_13830;
                    return statearr_13835;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13833__$1, inst_13831);
                } else {
                  return null;
                }
              }
            };
          }(c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
          return function(switch__9558__auto__, c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function() {
              var cljs_http$core$jsonp_$_state_machine__9559__auto__ = null;
              var cljs_http$core$jsonp_$_state_machine__9559__auto____0 = function() {
                var statearr_13839 = [null, null, null, null, null, null, null, null];
                statearr_13839[0] = cljs_http$core$jsonp_$_state_machine__9559__auto__;
                statearr_13839[1] = 1;
                return statearr_13839;
              };
              var cljs_http$core$jsonp_$_state_machine__9559__auto____1 = function(state_13833) {
                while (true) {
                  var ret_value__9560__auto__ = function() {
                    try {
                      while (true) {
                        var result__9561__auto__ = switch__9558__auto__.call(null, state_13833);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__9561__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__9561__auto__;
                        }
                        break;
                      }
                    } catch (e13840) {
                      if (e13840 instanceof Object) {
                        var ex__9562__auto__ = e13840;
                        var statearr_13841_13845 = state_13833;
                        statearr_13841_13845[5] = ex__9562__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13833);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e13840;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__9560__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__13846 = state_13833;
                    state_13833 = G__13846;
                    continue;
                  } else {
                    return ret_value__9560__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$jsonp_$_state_machine__9559__auto__ = function(state_13833) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$jsonp_$_state_machine__9559__auto____0.call(this);
                  case 1:
                    return cljs_http$core$jsonp_$_state_machine__9559__auto____1.call(this, state_13833);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$jsonp_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$jsonp_$_state_machine__9559__auto____0;
              cljs_http$core$jsonp_$_state_machine__9559__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$jsonp_$_state_machine__9559__auto____1;
              return cljs_http$core$jsonp_$_state_machine__9559__auto__;
            }();
          }(switch__9558__auto__, c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
        }();
        var state__9575__auto__ = function() {
          var statearr_13842 = f__9574__auto__.call(null);
          statearr_13842[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__9573__auto___13844;
          return statearr_13842;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__9575__auto__);
      };
    }(c__9573__auto___13844, req_13843, channel, jsonp__$1, map__13827, map__13827__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  } else {
  }
  return channel;
};
cljs_http.core.request = function cljs_http$core$request(p__13847) {
  var map__13850 = p__13847;
  var map__13850__$1 = (!(map__13850 == null) ? map__13850.cljs$lang$protocol_mask$partition0$ & 64 || map__13850.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13850) : map__13850;
  var request__$1 = map__13850__$1;
  var request_method = cljs.core.get.call(null, map__13850__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  if (cljs.core._EQ_.call(null, request_method, new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588))) {
    return cljs_http.core.jsonp.call(null, request__$1);
  } else {
    return cljs_http.core.xhr.call(null, request__$1);
  }
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cljs_http.core");
goog.require("cljs.core.async");
goog.require("no.en.core");
goog.require("cljs_http.util");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs_http.client.if_pos = function cljs_http$client$if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = v;
    if (cljs.core.truth_(and__6181__auto__)) {
      return v > 0;
    } else {
      return and__6181__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function cljs_http$client$parse_query_params(s) {
  if (!clojure.string.blank_QMARK_.call(null, s)) {
    return cljs.core.reduce.call(null, function(p1__13855_SHARP_, p2__13854_SHARP_) {
      var vec__13857 = clojure.string.split.call(null, p2__13854_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__13857, 0, null);
      var v = cljs.core.nth.call(null, vec__13857, 1, null);
      return cljs.core.assoc.call(null, p1__13855_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function cljs_http$client$parse_url(url) {
  if (!clojure.string.blank_QMARK_.call(null, url)) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function cljs_http$client$encode_val(k, v) {
  return [cljs.core.str(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(no.en.core.url_encode.call(null, [cljs.core.str(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function cljs_http$client$encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__13858_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__13858_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function cljs_http$client$encode_param(p__13859) {
  var vec__13861 = p__13859;
  var k = cljs.core.nth.call(null, vec__13861, 0, null);
  var v = cljs.core.nth.call(null, vec__13861, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function cljs_http$client$generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__13862_SHARP_) {
      return [cljs.core.str("\\"), cljs.core.str(p1__13862_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function cljs_http$client$escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function cljs_http$client$decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__6181__auto__) {
      var and__6181__auto____$1 = cljs.core.not_EQ_.call(null, 204, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response));
      if (and__6181__auto____$1) {
        return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("(?i)"), cljs.core.str(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
      } else {
        return and__6181__auto____$1;
      }
    } else {
      return and__6181__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function cljs_http$client$wrap_edn_params(client) {
  return function(request) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var params = temp__4423__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/edn"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function cljs_http$client$wrap_edn_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__13863_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__13863_SHARP_, cljs.reader.read_string, "application/edn", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_default_headers = function cljs_http$client$wrap_default_headers(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13868 = arguments.length;
  var i__7264__auto___13869 = 0;
  while (true) {
    if (i__7264__auto___13869 < len__7263__auto___13868) {
      args__7270__auto__.push(arguments[i__7264__auto___13869]);
      var G__13870 = i__7264__auto___13869 + 1;
      i__7264__auto___13869 = G__13870;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic = function(client, p__13866) {
  var vec__13867 = p__13866;
  var default_headers = cljs.core.nth.call(null, vec__13867, 0, null);
  return function(vec__13867, default_headers) {
    return function(request) {
      var temp__4423__auto__ = function() {
        var or__6193__auto__ = (new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return default_headers;
        }
      }();
      if (cljs.core.truth_(temp__4423__auto__)) {
        var default_headers__$1 = temp__4423__auto__;
        return client.call(null, cljs.core.assoc.call(null, request, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094), default_headers__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__13867, default_headers);
};
cljs_http.client.wrap_default_headers.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_default_headers.cljs$lang$applyTo = function(seq13864) {
  var G__13865 = cljs.core.first.call(null, seq13864);
  var seq13864__$1 = cljs.core.next.call(null, seq13864);
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(G__13865, seq13864__$1);
};
cljs_http.client.wrap_accept = function cljs_http$client$wrap_accept(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13875 = arguments.length;
  var i__7264__auto___13876 = 0;
  while (true) {
    if (i__7264__auto___13876 < len__7263__auto___13875) {
      args__7270__auto__.push(arguments[i__7264__auto___13876]);
      var G__13877 = i__7264__auto___13876 + 1;
      i__7264__auto___13876 = G__13877;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic = function(client, p__13873) {
  var vec__13874 = p__13873;
  var accept = cljs.core.nth.call(null, vec__13874, 0, null);
  return function(vec__13874, accept) {
    return function(request) {
      var temp__4423__auto__ = function() {
        var or__6193__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return accept;
        }
      }();
      if (cljs.core.truth_(temp__4423__auto__)) {
        var accept__$1 = temp__4423__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__13874, accept);
};
cljs_http.client.wrap_accept.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_accept.cljs$lang$applyTo = function(seq13871) {
  var G__13872 = cljs.core.first.call(null, seq13871);
  var seq13871__$1 = cljs.core.next.call(null, seq13871);
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(G__13872, seq13871__$1);
};
cljs_http.client.wrap_content_type = function cljs_http$client$wrap_content_type(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13882 = arguments.length;
  var i__7264__auto___13883 = 0;
  while (true) {
    if (i__7264__auto___13883 < len__7263__auto___13882) {
      args__7270__auto__.push(arguments[i__7264__auto___13883]);
      var G__13884 = i__7264__auto___13883 + 1;
      i__7264__auto___13883 = G__13884;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = function(client, p__13880) {
  var vec__13881 = p__13880;
  var content_type = cljs.core.nth.call(null, vec__13881, 0, null);
  return function(vec__13881, content_type) {
    return function(request) {
      var temp__4423__auto__ = function() {
        var or__6193__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return content_type;
        }
      }();
      if (cljs.core.truth_(temp__4423__auto__)) {
        var content_type__$1 = temp__4423__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__13881, content_type);
};
cljs_http.client.wrap_content_type.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_content_type.cljs$lang$applyTo = function(seq13878) {
  var G__13879 = cljs.core.first.call(null, seq13878);
  var seq13878__$1 = cljs.core.next.call(null, seq13878);
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(G__13879, seq13878__$1);
};
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function cljs_http$client$wrap_transit_params(client) {
  return function(request) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var params = temp__4423__auto__;
      var map__13887 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__13887__$1 = (!(map__13887 == null) ? map__13887.cljs$lang$protocol_mask$partition0$ & 64 || map__13887.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13887) : map__13887;
      var encoding = cljs.core.get.call(null, map__13887__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      var encoding_opts = cljs.core.get.call(null, map__13887__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/transit+json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function cljs_http$client$wrap_transit_response(client) {
  return function(request) {
    var map__13893 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__13893__$1 = (!(map__13893 == null) ? map__13893.cljs$lang$protocol_mask$partition0$ & 64 || map__13893.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13893) : map__13893;
    var decoding = cljs.core.get.call(null, map__13893__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var decoding_opts = cljs.core.get.call(null, map__13893__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var transit_decode = function(map__13893, map__13893__$1, decoding, decoding_opts) {
      return function(p1__13889_SHARP_) {
        return cljs_http.util.transit_decode.call(null, p1__13889_SHARP_, decoding, decoding_opts);
      };
    }(map__13893, map__13893__$1, decoding, decoding_opts);
    return cljs.core.async.map.call(null, function(map__13893, map__13893__$1, decoding, decoding_opts, transit_decode) {
      return function(p1__13890_SHARP_) {
        return cljs_http.client.decode_body.call(null, p1__13890_SHARP_, transit_decode, "application/transit+json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
      };
    }(map__13893, map__13893__$1, decoding, decoding_opts, transit_decode), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_json_params = function cljs_http$client$wrap_json_params(client) {
  return function(request) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var params = temp__4423__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function cljs_http$client$wrap_json_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__13895_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__13895_SHARP_, cljs_http.util.json_decode, "application/json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_query_params = function cljs_http$client$wrap_query_params(client) {
  return function(p__13899) {
    var map__13900 = p__13899;
    var map__13900__$1 = (!(map__13900 == null) ? map__13900.cljs$lang$protocol_mask$partition0$ & 64 || map__13900.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13900) : map__13900;
    var req = map__13900__$1;
    var query_params = cljs.core.get.call(null, map__13900__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function cljs_http$client$wrap_form_params(client) {
  return function(p__13905) {
    var map__13906 = p__13905;
    var map__13906__$1 = (!(map__13906 == null) ? map__13906.cljs$lang$protocol_mask$partition0$ & 64 || map__13906.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13906) : map__13906;
    var request = map__13906__$1;
    var form_params = cljs.core.get.call(null, map__13906__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    var request_method = cljs.core.get.call(null, map__13906__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var headers = cljs.core.get.call(null, map__13906__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = form_params;
      if (cljs.core.truth_(and__6181__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__6181__auto__;
      }
    }())) {
      var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/x-www-form-urlencoded"], null), headers);
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers__$1));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.generate_form_data = function cljs_http$client$generate_form_data(params) {
  var form_data = new FormData;
  var seq__13914_13920 = cljs.core.seq.call(null, params);
  var chunk__13915_13921 = null;
  var count__13916_13922 = 0;
  var i__13917_13923 = 0;
  while (true) {
    if (i__13917_13923 < count__13916_13922) {
      var vec__13918_13924 = cljs.core._nth.call(null, chunk__13915_13921, i__13917_13923);
      var k_13925 = cljs.core.nth.call(null, vec__13918_13924, 0, null);
      var v_13926 = cljs.core.nth.call(null, vec__13918_13924, 1, null);
      if (cljs.core.coll_QMARK_.call(null, v_13926)) {
        form_data.append(cljs.core.name.call(null, k_13925), cljs.core.first.call(null, v_13926), cljs.core.second.call(null, v_13926));
      } else {
        form_data.append(cljs.core.name.call(null, k_13925), v_13926);
      }
      var G__13927 = seq__13914_13920;
      var G__13928 = chunk__13915_13921;
      var G__13929 = count__13916_13922;
      var G__13930 = i__13917_13923 + 1;
      seq__13914_13920 = G__13927;
      chunk__13915_13921 = G__13928;
      count__13916_13922 = G__13929;
      i__13917_13923 = G__13930;
      continue;
    } else {
      var temp__4425__auto___13931 = cljs.core.seq.call(null, seq__13914_13920);
      if (temp__4425__auto___13931) {
        var seq__13914_13932__$1 = temp__4425__auto___13931;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13914_13932__$1)) {
          var c__7004__auto___13933 = cljs.core.chunk_first.call(null, seq__13914_13932__$1);
          var G__13934 = cljs.core.chunk_rest.call(null, seq__13914_13932__$1);
          var G__13935 = c__7004__auto___13933;
          var G__13936 = cljs.core.count.call(null, c__7004__auto___13933);
          var G__13937 = 0;
          seq__13914_13920 = G__13934;
          chunk__13915_13921 = G__13935;
          count__13916_13922 = G__13936;
          i__13917_13923 = G__13937;
          continue;
        } else {
          var vec__13919_13938 = cljs.core.first.call(null, seq__13914_13932__$1);
          var k_13939 = cljs.core.nth.call(null, vec__13919_13938, 0, null);
          var v_13940 = cljs.core.nth.call(null, vec__13919_13938, 1, null);
          if (cljs.core.coll_QMARK_.call(null, v_13940)) {
            form_data.append(cljs.core.name.call(null, k_13939), cljs.core.first.call(null, v_13940), cljs.core.second.call(null, v_13940));
          } else {
            form_data.append(cljs.core.name.call(null, k_13939), v_13940);
          }
          var G__13941 = cljs.core.next.call(null, seq__13914_13932__$1);
          var G__13942 = null;
          var G__13943 = 0;
          var G__13944 = 0;
          seq__13914_13920 = G__13941;
          chunk__13915_13921 = G__13942;
          count__13916_13922 = G__13943;
          i__13917_13923 = G__13944;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return form_data;
};
cljs_http.client.wrap_multipart_params = function cljs_http$client$wrap_multipart_params(client) {
  return function(p__13948) {
    var map__13949 = p__13948;
    var map__13949__$1 = (!(map__13949 == null) ? map__13949.cljs$lang$protocol_mask$partition0$ & 64 || map__13949.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13949) : map__13949;
    var request = map__13949__$1;
    var multipart_params = cljs.core.get.call(null, map__13949__$1, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707));
    var request_method = cljs.core.get.call(null, map__13949__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = multipart_params;
      if (cljs.core.truth_(and__6181__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__6181__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_form_data.call(null, multipart_params)));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_method = function cljs_http$client$wrap_method(client) {
  return function(req) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var m = temp__4423__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function cljs_http$client$wrap_server_name(client, server_name) {
  return function(p1__13951_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__13951_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function cljs_http$client$wrap_url(client) {
  return function(p__13956) {
    var map__13957 = p__13956;
    var map__13957__$1 = (!(map__13957 == null) ? map__13957.cljs$lang$protocol_mask$partition0$ & 64 || map__13957.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13957) : map__13957;
    var req = map__13957__$1;
    var query_params = cljs.core.get.call(null, map__13957__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4423__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4423__auto__)) {
      var spec = temp__4423__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4423__auto__, map__13957, map__13957__$1, req, query_params) {
        return function(p1__13952_SHARP_) {
          return cljs.core.merge.call(null, p1__13952_SHARP_, query_params);
        };
      }(spec, temp__4423__auto__, map__13957, map__13957__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function cljs_http$client$wrap_basic_auth(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13963 = arguments.length;
  var i__7264__auto___13964 = 0;
  while (true) {
    if (i__7264__auto___13964 < len__7263__auto___13963) {
      args__7270__auto__.push(arguments[i__7264__auto___13964]);
      var G__13965 = i__7264__auto___13964 + 1;
      i__7264__auto___13964 = G__13965;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = function(client, p__13961) {
  var vec__13962 = p__13961;
  var credentials = cljs.core.nth.call(null, vec__13962, 0, null);
  return function(vec__13962, credentials) {
    return function(req) {
      var credentials__$1 = function() {
        var or__6193__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return credentials;
        }
      }();
      if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
        return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
      } else {
        return client.call(null, req);
      }
    };
  }(vec__13962, credentials);
};
cljs_http.client.wrap_basic_auth.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_basic_auth.cljs$lang$applyTo = function(seq13959) {
  var G__13960 = cljs.core.first.call(null, seq13959);
  var seq13959__$1 = cljs.core.next.call(null, seq13959);
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(G__13960, seq13959__$1);
};
cljs_http.client.wrap_oauth = function cljs_http$client$wrap_oauth(client) {
  return function(req) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var oauth_token = temp__4423__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str("Bearer "), cljs.core.str(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_channel_from_request_map = function cljs_http$client$wrap_channel_from_request_map(client) {
  return function(request) {
    var temp__4423__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var custom_channel = temp__4423__auto__;
      return cljs.core.async.pipe.call(null, client.call(null, request), custom_channel);
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_request = function cljs_http$client$wrap_request(request) {
  return cljs_http.client.wrap_default_headers.call(null, cljs_http.client.wrap_channel_from_request_map.call(null, cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, 
  cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_multipart_params.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request)))))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function cljs_http$client$delete(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13970 = arguments.length;
  var i__7264__auto___13971 = 0;
  while (true) {
    if (i__7264__auto___13971 < len__7263__auto___13970) {
      args__7270__auto__.push(arguments[i__7264__auto___13971]);
      var G__13972 = i__7264__auto___13971 + 1;
      i__7264__auto___13971 = G__13972;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic = function(url, p__13968) {
  var vec__13969 = p__13968;
  var req = cljs.core.nth.call(null, vec__13969, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.delete$.cljs$lang$maxFixedArity = 1;
cljs_http.client.delete$.cljs$lang$applyTo = function(seq13966) {
  var G__13967 = cljs.core.first.call(null, seq13966);
  var seq13966__$1 = cljs.core.next.call(null, seq13966);
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(G__13967, seq13966__$1);
};
cljs_http.client.get = function cljs_http$client$get(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13977 = arguments.length;
  var i__7264__auto___13978 = 0;
  while (true) {
    if (i__7264__auto___13978 < len__7263__auto___13977) {
      args__7270__auto__.push(arguments[i__7264__auto___13978]);
      var G__13979 = i__7264__auto___13978 + 1;
      i__7264__auto___13978 = G__13979;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__13975) {
  var vec__13976 = p__13975;
  var req = cljs.core.nth.call(null, vec__13976, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.get.cljs$lang$maxFixedArity = 1;
cljs_http.client.get.cljs$lang$applyTo = function(seq13973) {
  var G__13974 = cljs.core.first.call(null, seq13973);
  var seq13973__$1 = cljs.core.next.call(null, seq13973);
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(G__13974, seq13973__$1);
};
cljs_http.client.head = function cljs_http$client$head(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13984 = arguments.length;
  var i__7264__auto___13985 = 0;
  while (true) {
    if (i__7264__auto___13985 < len__7263__auto___13984) {
      args__7270__auto__.push(arguments[i__7264__auto___13985]);
      var G__13986 = i__7264__auto___13985 + 1;
      i__7264__auto___13985 = G__13986;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic = function(url, p__13982) {
  var vec__13983 = p__13982;
  var req = cljs.core.nth.call(null, vec__13983, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.head.cljs$lang$maxFixedArity = 1;
cljs_http.client.head.cljs$lang$applyTo = function(seq13980) {
  var G__13981 = cljs.core.first.call(null, seq13980);
  var seq13980__$1 = cljs.core.next.call(null, seq13980);
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(G__13981, seq13980__$1);
};
cljs_http.client.jsonp = function cljs_http$client$jsonp(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13991 = arguments.length;
  var i__7264__auto___13992 = 0;
  while (true) {
    if (i__7264__auto___13992 < len__7263__auto___13991) {
      args__7270__auto__.push(arguments[i__7264__auto___13992]);
      var G__13993 = i__7264__auto___13992 + 1;
      i__7264__auto___13992 = G__13993;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic = function(url, p__13989) {
  var vec__13990 = p__13989;
  var req = cljs.core.nth.call(null, vec__13990, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.jsonp.cljs$lang$maxFixedArity = 1;
cljs_http.client.jsonp.cljs$lang$applyTo = function(seq13987) {
  var G__13988 = cljs.core.first.call(null, seq13987);
  var seq13987__$1 = cljs.core.next.call(null, seq13987);
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(G__13988, seq13987__$1);
};
cljs_http.client.move = function cljs_http$client$move(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___13998 = arguments.length;
  var i__7264__auto___13999 = 0;
  while (true) {
    if (i__7264__auto___13999 < len__7263__auto___13998) {
      args__7270__auto__.push(arguments[i__7264__auto___13999]);
      var G__14000 = i__7264__auto___13999 + 1;
      i__7264__auto___13999 = G__14000;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic = function(url, p__13996) {
  var vec__13997 = p__13996;
  var req = cljs.core.nth.call(null, vec__13997, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.move.cljs$lang$maxFixedArity = 1;
cljs_http.client.move.cljs$lang$applyTo = function(seq13994) {
  var G__13995 = cljs.core.first.call(null, seq13994);
  var seq13994__$1 = cljs.core.next.call(null, seq13994);
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(G__13995, seq13994__$1);
};
cljs_http.client.options = function cljs_http$client$options(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___14005 = arguments.length;
  var i__7264__auto___14006 = 0;
  while (true) {
    if (i__7264__auto___14006 < len__7263__auto___14005) {
      args__7270__auto__.push(arguments[i__7264__auto___14006]);
      var G__14007 = i__7264__auto___14006 + 1;
      i__7264__auto___14006 = G__14007;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14003) {
  var vec__14004 = p__14003;
  var req = cljs.core.nth.call(null, vec__14004, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.options.cljs$lang$maxFixedArity = 1;
cljs_http.client.options.cljs$lang$applyTo = function(seq14001) {
  var G__14002 = cljs.core.first.call(null, seq14001);
  var seq14001__$1 = cljs.core.next.call(null, seq14001);
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(G__14002, seq14001__$1);
};
cljs_http.client.patch = function cljs_http$client$patch(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___14012 = arguments.length;
  var i__7264__auto___14013 = 0;
  while (true) {
    if (i__7264__auto___14013 < len__7263__auto___14012) {
      args__7270__auto__.push(arguments[i__7264__auto___14013]);
      var G__14014 = i__7264__auto___14013 + 1;
      i__7264__auto___14013 = G__14014;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14010) {
  var vec__14011 = p__14010;
  var req = cljs.core.nth.call(null, vec__14011, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.patch.cljs$lang$maxFixedArity = 1;
cljs_http.client.patch.cljs$lang$applyTo = function(seq14008) {
  var G__14009 = cljs.core.first.call(null, seq14008);
  var seq14008__$1 = cljs.core.next.call(null, seq14008);
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(G__14009, seq14008__$1);
};
cljs_http.client.post = function cljs_http$client$post(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___14019 = arguments.length;
  var i__7264__auto___14020 = 0;
  while (true) {
    if (i__7264__auto___14020 < len__7263__auto___14019) {
      args__7270__auto__.push(arguments[i__7264__auto___14020]);
      var G__14021 = i__7264__auto___14020 + 1;
      i__7264__auto___14020 = G__14021;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14017) {
  var vec__14018 = p__14017;
  var req = cljs.core.nth.call(null, vec__14018, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.post.cljs$lang$maxFixedArity = 1;
cljs_http.client.post.cljs$lang$applyTo = function(seq14015) {
  var G__14016 = cljs.core.first.call(null, seq14015);
  var seq14015__$1 = cljs.core.next.call(null, seq14015);
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(G__14016, seq14015__$1);
};
cljs_http.client.put = function cljs_http$client$put(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___14026 = arguments.length;
  var i__7264__auto___14027 = 0;
  while (true) {
    if (i__7264__auto___14027 < len__7263__auto___14026) {
      args__7270__auto__.push(arguments[i__7264__auto___14027]);
      var G__14028 = i__7264__auto___14027 + 1;
      i__7264__auto___14027 = G__14028;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14024) {
  var vec__14025 = p__14024;
  var req = cljs.core.nth.call(null, vec__14025, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.put.cljs$lang$maxFixedArity = 1;
cljs_http.client.put.cljs$lang$applyTo = function(seq14022) {
  var G__14023 = cljs.core.first.call(null, seq14022);
  var seq14022__$1 = cljs.core.next.call(null, seq14022);
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(G__14023, seq14022__$1);
};
goog.provide("goog.dom.InputType");
goog.dom.InputType = {BUTTON:"button", CHECKBOX:"checkbox", COLOR:"color", DATE:"date", DATETIME:"datetime", DATETIME_LOCAL:"datetime-local", EMAIL:"email", FILE:"file", HIDDEN:"hidden", IMAGE:"image", MENU:"menu", MONTH:"month", NUMBER:"number", PASSWORD:"password", RADIO:"radio", RANGE:"range", RESET:"reset", SEARCH:"search", SELECT_MULTIPLE:"select-multiple", SELECT_ONE:"select-one", SUBMIT:"submit", TEL:"tel", TEXT:"text", TEXTAREA:"textarea", TIME:"time", URL:"url", WEEK:"week"};
goog.provide("goog.dom.forms");
goog.require("goog.dom.InputType");
goog.require("goog.dom.TagName");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName == goog.dom.TagName.FIELDSET) {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case goog.dom.InputType.FILE:
      ;
      case goog.dom.InputType.SUBMIT:
      ;
      case goog.dom.InputType.RESET:
      ;
      case goog.dom.InputType.BUTTON:
        break;
      case goog.dom.InputType.SELECT_MULTIPLE:
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName(goog.dom.TagName.INPUT);
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == goog.dom.InputType.IMAGE) {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == goog.dom.InputType.FILE) {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == goog.dom.TagName.FORM) {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return !!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return !!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case goog.dom.InputType.CHECKBOX:
    ;
    case goog.dom.InputType.RADIO:
      return goog.dom.forms.getInputChecked_(el);
    case goog.dom.InputType.SELECT_ONE:
      return goog.dom.forms.getSelectSingle_(el);
    case goog.dom.InputType.SELECT_MULTIPLE:
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case goog.dom.InputType.CHECKBOX:
      ;
      case goog.dom.InputType.RADIO:
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case goog.dom.InputType.SELECT_ONE:
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case goog.dom.InputType.SELECT_MULTIPLE:
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return !goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.events");
var div_8325 = document.createElement("div");
var test_html_8326 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_8325.innerHTML = test_html_8326;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_8325.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_8325.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_8325.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return !goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return (prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    box.expandToIncludeCoordinate(arguments[i]);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.prototype.expandToIncludeCoordinate = function(coord) {
  this.top = Math.min(this.top, coord.y);
  this.right = Math.max(this.right, coord.x);
  this.bottom = Math.max(this.bottom, coord.y);
  this.left = Math.min(this.left, coord.x);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromPositionAndSize = function(position, size) {
  return new goog.math.Rect(position.x, position.y, size.width, size.height);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return [a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.events.BrowserEvent");
goog.forwardDeclare("goog.events.Event");
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    for (var key in style) {
      goog.style.setStyle_(element, style[key], key);
    }
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.styleNameCache_ = {};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var propertyName = goog.style.styleNameCache_[style];
  if (!propertyName) {
    var camelStyle = goog.string.toCamelCase(style);
    propertyName = camelStyle;
    if (element.style[camelStyle] === undefined) {
      var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
      if (element.style[prefixedStyle] !== undefined) {
        propertyName = prefixedStyle;
      }
    }
    goog.style.styleNameCache_[style] = propertyName;
  }
  return propertyName;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), false);
  el.style.top = goog.style.getPixelStyleValue_((y), false);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate((element).offsetLeft, (element).offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return {"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return rect;
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    if (parent.nodeType == goog.dom.NodeType.DOCUMENT_FRAGMENT && parent.host) {
      parent = parent.host;
    }
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return (parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  if (container == goog.dom.getDocumentScrollElement()) {
    var relX = elementPos.x - container.scrollLeft;
    var relY = elementPos.y - container.scrollTop;
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(10)) {
      relX += containerBorder.left;
      relY += containerBorder.top;
    }
  } else {
    var relX = elementPos.x - containerPos.x - containerBorder.left;
    var relY = elementPos.y - containerPos.y - containerBorder.top;
  }
  var spaceX = container.clientWidth - (element).offsetWidth;
  var spaceY = container.clientHeight - (element).offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  goog.asserts.assertObject(el, "Parameter is required");
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  var box = goog.style.getBoundingClientRect_(el);
  var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
  pos.x = box.left + scrollCoord.x;
  pos.y = box.top + scrollCoord.y;
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && currentWin != currentWin.parent && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var box = goog.style.getBoundingClientRect_(el);
  return new goog.math.Coordinate(box.left, box.top);
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var targetEvent = el.changedTouches ? el.changedTouches[0] : el;
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, (el).offsetLeft + dx, (el).offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, h);
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = (element).offsetWidth;
  var offsetHeight = (element).offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];
      head = dh.createDom(goog.dom.TagName.HEAD);
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom(goog.dom.TagName.STYLE);
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    style.display = "inline-block";
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    if (el.style) {
      el.style[name] = value;
    }
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        if (descendant.style) {
          descendant.style[name] = value;
        }
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size((element).offsetWidth, (element).offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, stylePrefix + "Left");
    var right = goog.style.getComputedStyle(element, stylePrefix + "Right");
    var top = goog.style.getComputedStyle(element, stylePrefix + "Top");
    var bottom = goog.style.getComputedStyle(element, stylePrefix + "Bottom");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, "borderLeftWidth");
    var right = goog.style.getComputedStyle(element, "borderRightWidth");
    var top = goog.style.getComputedStyle(element, "borderTopWidth");
    var bottom = goog.style.getComputedStyle(element, "borderBottomWidth");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom(goog.dom.TagName.SPAN, {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.match(/\s*([\w-]+)\s*\:(.+)/);
    if (keyValue) {
      var styleName = keyValue[1];
      var styleValue = goog.string.trim(keyValue[2]);
      result[goog.string.toCamelCase(styleName.toLowerCase())] = styleValue;
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.userAgent");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.hasActiveXObjectSupport_ = function() {
  if (!goog.userAgent.IE) {
    return false;
  }
  try {
    new ActiveXObject("MSXML2.DOMDocument");
    return true;
  } catch (e) {
    return false;
  }
};
goog.dom.xml.ACTIVEX_SUPPORT = goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri, opt_preferActiveX) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (goog.dom.xml.ACTIVEX_SUPPORT) {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml, opt_preferActiveX) {
  if (typeof DOMParser != "undefined" && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {
    return (new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (goog.dom.xml.ACTIVEX_SUPPORT) {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  var text = xml.xml;
  if (text) {
    return text;
  }
  if (typeof XMLSerializer != "undefined") {
    return (new XMLSerializer).serializeToString(xml);
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return [];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.style");
goog.require("clojure.string");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_8362 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_8363 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_8364 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_8364, opt_wrapper_8362, table_section_wrapper_8363, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, 
cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_8362, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_8363, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_8363, cell_wrapper_8364, table_section_wrapper_8363, table_section_wrapper_8363]);
domina.remove_extraneous_tbody_BANG_ = function domina$remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__6181__auto__ = div.firstChild;
    if (cljs.core.truth_(and__6181__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__6181__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__8369 = cljs.core.seq.call(null, tbody);
  var chunk__8370 = null;
  var count__8371 = 0;
  var i__8372 = 0;
  while (true) {
    if (i__8372 < count__8371) {
      var child = cljs.core._nth.call(null, chunk__8370, i__8372);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__8373 = seq__8369;
      var G__8374 = chunk__8370;
      var G__8375 = count__8371;
      var G__8376 = i__8372 + 1;
      seq__8369 = G__8373;
      chunk__8370 = G__8374;
      count__8371 = G__8375;
      i__8372 = G__8376;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__8369);
      if (temp__4425__auto__) {
        var seq__8369__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8369__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__8369__$1);
          var G__8377 = cljs.core.chunk_rest.call(null, seq__8369__$1);
          var G__8378 = c__7004__auto__;
          var G__8379 = cljs.core.count.call(null, c__7004__auto__);
          var G__8380 = 0;
          seq__8369 = G__8377;
          chunk__8370 = G__8378;
          count__8371 = G__8379;
          i__8372 = G__8380;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__8369__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__8381 = cljs.core.next.call(null, seq__8369__$1);
          var G__8382 = null;
          var G__8383 = 0;
          var G__8384 = 0;
          seq__8369 = G__8381;
          chunk__8370 = G__8382;
          count__8371 = G__8383;
          i__8372 = G__8384;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function domina$restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function domina$html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__8386 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__8386, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__8386, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__8386, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__8387 = wrapper.lastChild;
        var G__8388 = level - 1;
        wrapper = G__8387;
        level = G__8388;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__6181__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__6181__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function domina$string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
};
domina.nodes = function domina$nodes(content) {
  if (!(content == null) && !(content.domina$DomContent$nodes$arity$1 == null)) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__6856__auto__ = content == null ? null : content;
    var m__6857__auto__ = domina.nodes[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, content);
    } else {
      var m__6857__auto____$1 = domina.nodes["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, content);
      } else {
        throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
      }
    }
  }
};
domina.single_node = function domina$single_node(nodeseq) {
  if (!(nodeseq == null) && !(nodeseq.domina$DomContent$single_node$arity$1 == null)) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__6856__auto__ = nodeseq == null ? null : nodeseq;
    var m__6857__auto__ = domina.single_node[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, nodeseq);
    } else {
      var m__6857__auto____$1 = domina.single_node["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, nodeseq);
      } else {
        throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
      }
    }
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function domina$log_debug(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8390 = arguments.length;
  var i__7264__auto___8391 = 0;
  while (true) {
    if (i__7264__auto___8391 < len__7263__auto___8390) {
      args__7270__auto__.push(arguments[i__7264__auto___8391]);
      var G__8392 = i__7264__auto___8391 + 1;
      i__7264__auto___8391 = G__8392;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return domina.log_debug.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
domina.log_debug.cljs$core$IFn$_invoke$arity$variadic = function(mesg) {
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = domina._STAR_debug_STAR_;
    if (cljs.core.truth_(and__6181__auto__)) {
      return !cljs.core._EQ_.call(null, window.console, undefined);
    } else {
      return and__6181__auto__;
    }
  }())) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
  } else {
    return null;
  }
};
domina.log_debug.cljs$lang$maxFixedArity = 0;
domina.log_debug.cljs$lang$applyTo = function(seq8389) {
  return domina.log_debug.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8389));
};
domina.log = function domina$log(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8394 = arguments.length;
  var i__7264__auto___8395 = 0;
  while (true) {
    if (i__7264__auto___8395 < len__7263__auto___8394) {
      args__7270__auto__.push(arguments[i__7264__auto___8395]);
      var G__8396 = i__7264__auto___8395 + 1;
      i__7264__auto___8395 = G__8396;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return domina.log.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
domina.log.cljs$core$IFn$_invoke$arity$variadic = function(mesg) {
  if (cljs.core.truth_(window.console)) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
  } else {
    return null;
  }
};
domina.log.cljs$lang$maxFixedArity = 0;
domina.log.cljs$lang$applyTo = function(seq8393) {
  return domina.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8393));
};
domina.by_id = function domina$by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function domina$by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function domina$children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function domina$common_ancestor(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8398 = arguments.length;
  var i__7264__auto___8399 = 0;
  while (true) {
    if (i__7264__auto___8399 < len__7263__auto___8398) {
      args__7270__auto__.push(arguments[i__7264__auto___8399]);
      var G__8400 = i__7264__auto___8399 + 1;
      i__7264__auto___8399 = G__8400;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic = function(contents) {
  return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
};
domina.common_ancestor.cljs$lang$maxFixedArity = 0;
domina.common_ancestor.cljs$lang$applyTo = function(seq8397) {
  return domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8397));
};
domina.ancestor_QMARK_ = function domina$ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function domina$clone(content) {
  return cljs.core.map.call(null, function(p1__8401_SHARP_) {
    return p1__8401_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function domina$append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function domina$insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__8402_SHARP_, p2__8403_SHARP_) {
    return goog.dom.insertChildAt(p1__8402_SHARP_, p2__8403_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function domina$prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function domina$insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__8405_SHARP_, p2__8404_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__8404_SHARP_, p1__8405_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function domina$insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__8407_SHARP_, p2__8406_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__8406_SHARP_, p1__8407_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function domina$swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__8409_SHARP_, p2__8408_SHARP_) {
    return goog.dom.replaceNode(p2__8408_SHARP_, p1__8409_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function domina$detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function domina$destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function domina$destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function domina$style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (clojure.string.blank_QMARK_.call(null, s)) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function domina$attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function domina$set_style_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8417 = arguments.length;
  var i__7264__auto___8418 = 0;
  while (true) {
    if (i__7264__auto___8418 < len__7263__auto___8417) {
      args__7270__auto__.push(arguments[i__7264__auto___8418]);
      var G__8419 = i__7264__auto___8418 + 1;
      i__7264__auto___8418 = G__8419;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 2 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(2), 0, null) : null;
  return domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7271__auto__);
};
domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(content, name, value) {
  var seq__8413_8420 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8414_8421 = null;
  var count__8415_8422 = 0;
  var i__8416_8423 = 0;
  while (true) {
    if (i__8416_8423 < count__8415_8422) {
      var n_8424 = cljs.core._nth.call(null, chunk__8414_8421, i__8416_8423);
      goog.style.setStyle(n_8424, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
      var G__8425 = seq__8413_8420;
      var G__8426 = chunk__8414_8421;
      var G__8427 = count__8415_8422;
      var G__8428 = i__8416_8423 + 1;
      seq__8413_8420 = G__8425;
      chunk__8414_8421 = G__8426;
      count__8415_8422 = G__8427;
      i__8416_8423 = G__8428;
      continue;
    } else {
      var temp__4425__auto___8429 = cljs.core.seq.call(null, seq__8413_8420);
      if (temp__4425__auto___8429) {
        var seq__8413_8430__$1 = temp__4425__auto___8429;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8413_8430__$1)) {
          var c__7004__auto___8431 = cljs.core.chunk_first.call(null, seq__8413_8430__$1);
          var G__8432 = cljs.core.chunk_rest.call(null, seq__8413_8430__$1);
          var G__8433 = c__7004__auto___8431;
          var G__8434 = cljs.core.count.call(null, c__7004__auto___8431);
          var G__8435 = 0;
          seq__8413_8420 = G__8432;
          chunk__8414_8421 = G__8433;
          count__8415_8422 = G__8434;
          i__8416_8423 = G__8435;
          continue;
        } else {
          var n_8436 = cljs.core.first.call(null, seq__8413_8430__$1);
          goog.style.setStyle(n_8436, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
          var G__8437 = cljs.core.next.call(null, seq__8413_8430__$1);
          var G__8438 = null;
          var G__8439 = 0;
          var G__8440 = 0;
          seq__8413_8420 = G__8437;
          chunk__8414_8421 = G__8438;
          count__8415_8422 = G__8439;
          i__8416_8423 = G__8440;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_style_BANG_.cljs$lang$maxFixedArity = 2;
domina.set_style_BANG_.cljs$lang$applyTo = function(seq8410) {
  var G__8411 = cljs.core.first.call(null, seq8410);
  var seq8410__$1 = cljs.core.next.call(null, seq8410);
  var G__8412 = cljs.core.first.call(null, seq8410__$1);
  var seq8410__$2 = cljs.core.next.call(null, seq8410__$1);
  return domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8411, G__8412, seq8410__$2);
};
domina.set_attr_BANG_ = function domina$set_attr_BANG_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8448 = arguments.length;
  var i__7264__auto___8449 = 0;
  while (true) {
    if (i__7264__auto___8449 < len__7263__auto___8448) {
      args__7270__auto__.push(arguments[i__7264__auto___8449]);
      var G__8450 = i__7264__auto___8449 + 1;
      i__7264__auto___8449 = G__8450;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 2 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(2), 0, null) : null;
  return domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7271__auto__);
};
domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(content, name, value) {
  var seq__8444_8451 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8445_8452 = null;
  var count__8446_8453 = 0;
  var i__8447_8454 = 0;
  while (true) {
    if (i__8447_8454 < count__8446_8453) {
      var n_8455 = cljs.core._nth.call(null, chunk__8445_8452, i__8447_8454);
      n_8455.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
      var G__8456 = seq__8444_8451;
      var G__8457 = chunk__8445_8452;
      var G__8458 = count__8446_8453;
      var G__8459 = i__8447_8454 + 1;
      seq__8444_8451 = G__8456;
      chunk__8445_8452 = G__8457;
      count__8446_8453 = G__8458;
      i__8447_8454 = G__8459;
      continue;
    } else {
      var temp__4425__auto___8460 = cljs.core.seq.call(null, seq__8444_8451);
      if (temp__4425__auto___8460) {
        var seq__8444_8461__$1 = temp__4425__auto___8460;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8444_8461__$1)) {
          var c__7004__auto___8462 = cljs.core.chunk_first.call(null, seq__8444_8461__$1);
          var G__8463 = cljs.core.chunk_rest.call(null, seq__8444_8461__$1);
          var G__8464 = c__7004__auto___8462;
          var G__8465 = cljs.core.count.call(null, c__7004__auto___8462);
          var G__8466 = 0;
          seq__8444_8451 = G__8463;
          chunk__8445_8452 = G__8464;
          count__8446_8453 = G__8465;
          i__8447_8454 = G__8466;
          continue;
        } else {
          var n_8467 = cljs.core.first.call(null, seq__8444_8461__$1);
          n_8467.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
          var G__8468 = cljs.core.next.call(null, seq__8444_8461__$1);
          var G__8469 = null;
          var G__8470 = 0;
          var G__8471 = 0;
          seq__8444_8451 = G__8468;
          chunk__8445_8452 = G__8469;
          count__8446_8453 = G__8470;
          i__8447_8454 = G__8471;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attr_BANG_.cljs$lang$maxFixedArity = 2;
domina.set_attr_BANG_.cljs$lang$applyTo = function(seq8441) {
  var G__8442 = cljs.core.first.call(null, seq8441);
  var seq8441__$1 = cljs.core.next.call(null, seq8441);
  var G__8443 = cljs.core.first.call(null, seq8441__$1);
  var seq8441__$2 = cljs.core.next.call(null, seq8441__$1);
  return domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8442, G__8443, seq8441__$2);
};
domina.remove_attr_BANG_ = function domina$remove_attr_BANG_(content, name) {
  var seq__8476_8480 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8477_8481 = null;
  var count__8478_8482 = 0;
  var i__8479_8483 = 0;
  while (true) {
    if (i__8479_8483 < count__8478_8482) {
      var n_8484 = cljs.core._nth.call(null, chunk__8477_8481, i__8479_8483);
      n_8484.removeAttribute(cljs.core.name.call(null, name));
      var G__8485 = seq__8476_8480;
      var G__8486 = chunk__8477_8481;
      var G__8487 = count__8478_8482;
      var G__8488 = i__8479_8483 + 1;
      seq__8476_8480 = G__8485;
      chunk__8477_8481 = G__8486;
      count__8478_8482 = G__8487;
      i__8479_8483 = G__8488;
      continue;
    } else {
      var temp__4425__auto___8489 = cljs.core.seq.call(null, seq__8476_8480);
      if (temp__4425__auto___8489) {
        var seq__8476_8490__$1 = temp__4425__auto___8489;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8476_8490__$1)) {
          var c__7004__auto___8491 = cljs.core.chunk_first.call(null, seq__8476_8490__$1);
          var G__8492 = cljs.core.chunk_rest.call(null, seq__8476_8490__$1);
          var G__8493 = c__7004__auto___8491;
          var G__8494 = cljs.core.count.call(null, c__7004__auto___8491);
          var G__8495 = 0;
          seq__8476_8480 = G__8492;
          chunk__8477_8481 = G__8493;
          count__8478_8482 = G__8494;
          i__8479_8483 = G__8495;
          continue;
        } else {
          var n_8496 = cljs.core.first.call(null, seq__8476_8490__$1);
          n_8496.removeAttribute(cljs.core.name.call(null, name));
          var G__8497 = cljs.core.next.call(null, seq__8476_8490__$1);
          var G__8498 = null;
          var G__8499 = 0;
          var G__8500 = 0;
          seq__8476_8480 = G__8497;
          chunk__8477_8481 = G__8498;
          count__8478_8482 = G__8499;
          i__8479_8483 = G__8500;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function domina$parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__8502 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__8502, 0, null);
    var v = cljs.core.nth.call(null, vec__8502, 1, null);
    if (cljs.core.truth_(function() {
      var and__6181__auto__ = k;
      if (cljs.core.truth_(and__6181__auto__)) {
        return v;
      } else {
        return and__6181__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function domina$styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function domina$attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__8503_SHARP_) {
      var attr = attrs__$1.item(p1__8503_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function domina$set_styles_BANG_(content, styles) {
  var seq__8510_8516 = cljs.core.seq.call(null, styles);
  var chunk__8511_8517 = null;
  var count__8512_8518 = 0;
  var i__8513_8519 = 0;
  while (true) {
    if (i__8513_8519 < count__8512_8518) {
      var vec__8514_8520 = cljs.core._nth.call(null, chunk__8511_8517, i__8513_8519);
      var name_8521 = cljs.core.nth.call(null, vec__8514_8520, 0, null);
      var value_8522 = cljs.core.nth.call(null, vec__8514_8520, 1, null);
      domina.set_style_BANG_.call(null, content, name_8521, value_8522);
      var G__8523 = seq__8510_8516;
      var G__8524 = chunk__8511_8517;
      var G__8525 = count__8512_8518;
      var G__8526 = i__8513_8519 + 1;
      seq__8510_8516 = G__8523;
      chunk__8511_8517 = G__8524;
      count__8512_8518 = G__8525;
      i__8513_8519 = G__8526;
      continue;
    } else {
      var temp__4425__auto___8527 = cljs.core.seq.call(null, seq__8510_8516);
      if (temp__4425__auto___8527) {
        var seq__8510_8528__$1 = temp__4425__auto___8527;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8510_8528__$1)) {
          var c__7004__auto___8529 = cljs.core.chunk_first.call(null, seq__8510_8528__$1);
          var G__8530 = cljs.core.chunk_rest.call(null, seq__8510_8528__$1);
          var G__8531 = c__7004__auto___8529;
          var G__8532 = cljs.core.count.call(null, c__7004__auto___8529);
          var G__8533 = 0;
          seq__8510_8516 = G__8530;
          chunk__8511_8517 = G__8531;
          count__8512_8518 = G__8532;
          i__8513_8519 = G__8533;
          continue;
        } else {
          var vec__8515_8534 = cljs.core.first.call(null, seq__8510_8528__$1);
          var name_8535 = cljs.core.nth.call(null, vec__8515_8534, 0, null);
          var value_8536 = cljs.core.nth.call(null, vec__8515_8534, 1, null);
          domina.set_style_BANG_.call(null, content, name_8535, value_8536);
          var G__8537 = cljs.core.next.call(null, seq__8510_8528__$1);
          var G__8538 = null;
          var G__8539 = 0;
          var G__8540 = 0;
          seq__8510_8516 = G__8537;
          chunk__8511_8517 = G__8538;
          count__8512_8518 = G__8539;
          i__8513_8519 = G__8540;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function domina$set_attrs_BANG_(content, attrs) {
  var seq__8547_8553 = cljs.core.seq.call(null, attrs);
  var chunk__8548_8554 = null;
  var count__8549_8555 = 0;
  var i__8550_8556 = 0;
  while (true) {
    if (i__8550_8556 < count__8549_8555) {
      var vec__8551_8557 = cljs.core._nth.call(null, chunk__8548_8554, i__8550_8556);
      var name_8558 = cljs.core.nth.call(null, vec__8551_8557, 0, null);
      var value_8559 = cljs.core.nth.call(null, vec__8551_8557, 1, null);
      domina.set_attr_BANG_.call(null, content, name_8558, value_8559);
      var G__8560 = seq__8547_8553;
      var G__8561 = chunk__8548_8554;
      var G__8562 = count__8549_8555;
      var G__8563 = i__8550_8556 + 1;
      seq__8547_8553 = G__8560;
      chunk__8548_8554 = G__8561;
      count__8549_8555 = G__8562;
      i__8550_8556 = G__8563;
      continue;
    } else {
      var temp__4425__auto___8564 = cljs.core.seq.call(null, seq__8547_8553);
      if (temp__4425__auto___8564) {
        var seq__8547_8565__$1 = temp__4425__auto___8564;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8547_8565__$1)) {
          var c__7004__auto___8566 = cljs.core.chunk_first.call(null, seq__8547_8565__$1);
          var G__8567 = cljs.core.chunk_rest.call(null, seq__8547_8565__$1);
          var G__8568 = c__7004__auto___8566;
          var G__8569 = cljs.core.count.call(null, c__7004__auto___8566);
          var G__8570 = 0;
          seq__8547_8553 = G__8567;
          chunk__8548_8554 = G__8568;
          count__8549_8555 = G__8569;
          i__8550_8556 = G__8570;
          continue;
        } else {
          var vec__8552_8571 = cljs.core.first.call(null, seq__8547_8565__$1);
          var name_8572 = cljs.core.nth.call(null, vec__8552_8571, 0, null);
          var value_8573 = cljs.core.nth.call(null, vec__8552_8571, 1, null);
          domina.set_attr_BANG_.call(null, content, name_8572, value_8573);
          var G__8574 = cljs.core.next.call(null, seq__8547_8565__$1);
          var G__8575 = null;
          var G__8576 = 0;
          var G__8577 = 0;
          seq__8547_8553 = G__8574;
          chunk__8548_8554 = G__8575;
          count__8549_8555 = G__8576;
          i__8550_8556 = G__8577;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function domina$has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function domina$add_class_BANG_(content, class$) {
  var seq__8582_8586 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8583_8587 = null;
  var count__8584_8588 = 0;
  var i__8585_8589 = 0;
  while (true) {
    if (i__8585_8589 < count__8584_8588) {
      var node_8590 = cljs.core._nth.call(null, chunk__8583_8587, i__8585_8589);
      goog.dom.classes.add(node_8590, class$);
      var G__8591 = seq__8582_8586;
      var G__8592 = chunk__8583_8587;
      var G__8593 = count__8584_8588;
      var G__8594 = i__8585_8589 + 1;
      seq__8582_8586 = G__8591;
      chunk__8583_8587 = G__8592;
      count__8584_8588 = G__8593;
      i__8585_8589 = G__8594;
      continue;
    } else {
      var temp__4425__auto___8595 = cljs.core.seq.call(null, seq__8582_8586);
      if (temp__4425__auto___8595) {
        var seq__8582_8596__$1 = temp__4425__auto___8595;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8582_8596__$1)) {
          var c__7004__auto___8597 = cljs.core.chunk_first.call(null, seq__8582_8596__$1);
          var G__8598 = cljs.core.chunk_rest.call(null, seq__8582_8596__$1);
          var G__8599 = c__7004__auto___8597;
          var G__8600 = cljs.core.count.call(null, c__7004__auto___8597);
          var G__8601 = 0;
          seq__8582_8586 = G__8598;
          chunk__8583_8587 = G__8599;
          count__8584_8588 = G__8600;
          i__8585_8589 = G__8601;
          continue;
        } else {
          var node_8602 = cljs.core.first.call(null, seq__8582_8596__$1);
          goog.dom.classes.add(node_8602, class$);
          var G__8603 = cljs.core.next.call(null, seq__8582_8596__$1);
          var G__8604 = null;
          var G__8605 = 0;
          var G__8606 = 0;
          seq__8582_8586 = G__8603;
          chunk__8583_8587 = G__8604;
          count__8584_8588 = G__8605;
          i__8585_8589 = G__8606;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function domina$remove_class_BANG_(content, class$) {
  var seq__8611_8615 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8612_8616 = null;
  var count__8613_8617 = 0;
  var i__8614_8618 = 0;
  while (true) {
    if (i__8614_8618 < count__8613_8617) {
      var node_8619 = cljs.core._nth.call(null, chunk__8612_8616, i__8614_8618);
      goog.dom.classes.remove(node_8619, class$);
      var G__8620 = seq__8611_8615;
      var G__8621 = chunk__8612_8616;
      var G__8622 = count__8613_8617;
      var G__8623 = i__8614_8618 + 1;
      seq__8611_8615 = G__8620;
      chunk__8612_8616 = G__8621;
      count__8613_8617 = G__8622;
      i__8614_8618 = G__8623;
      continue;
    } else {
      var temp__4425__auto___8624 = cljs.core.seq.call(null, seq__8611_8615);
      if (temp__4425__auto___8624) {
        var seq__8611_8625__$1 = temp__4425__auto___8624;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8611_8625__$1)) {
          var c__7004__auto___8626 = cljs.core.chunk_first.call(null, seq__8611_8625__$1);
          var G__8627 = cljs.core.chunk_rest.call(null, seq__8611_8625__$1);
          var G__8628 = c__7004__auto___8626;
          var G__8629 = cljs.core.count.call(null, c__7004__auto___8626);
          var G__8630 = 0;
          seq__8611_8615 = G__8627;
          chunk__8612_8616 = G__8628;
          count__8613_8617 = G__8629;
          i__8614_8618 = G__8630;
          continue;
        } else {
          var node_8631 = cljs.core.first.call(null, seq__8611_8625__$1);
          goog.dom.classes.remove(node_8631, class$);
          var G__8632 = cljs.core.next.call(null, seq__8611_8625__$1);
          var G__8633 = null;
          var G__8634 = 0;
          var G__8635 = 0;
          seq__8611_8615 = G__8632;
          chunk__8612_8616 = G__8633;
          count__8613_8617 = G__8634;
          i__8614_8618 = G__8635;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function domina$toggle_class_BANG_(content, class$) {
  var seq__8640_8644 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8641_8645 = null;
  var count__8642_8646 = 0;
  var i__8643_8647 = 0;
  while (true) {
    if (i__8643_8647 < count__8642_8646) {
      var node_8648 = cljs.core._nth.call(null, chunk__8641_8645, i__8643_8647);
      goog.dom.classes.toggle(node_8648, class$);
      var G__8649 = seq__8640_8644;
      var G__8650 = chunk__8641_8645;
      var G__8651 = count__8642_8646;
      var G__8652 = i__8643_8647 + 1;
      seq__8640_8644 = G__8649;
      chunk__8641_8645 = G__8650;
      count__8642_8646 = G__8651;
      i__8643_8647 = G__8652;
      continue;
    } else {
      var temp__4425__auto___8653 = cljs.core.seq.call(null, seq__8640_8644);
      if (temp__4425__auto___8653) {
        var seq__8640_8654__$1 = temp__4425__auto___8653;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8640_8654__$1)) {
          var c__7004__auto___8655 = cljs.core.chunk_first.call(null, seq__8640_8654__$1);
          var G__8656 = cljs.core.chunk_rest.call(null, seq__8640_8654__$1);
          var G__8657 = c__7004__auto___8655;
          var G__8658 = cljs.core.count.call(null, c__7004__auto___8655);
          var G__8659 = 0;
          seq__8640_8644 = G__8656;
          chunk__8641_8645 = G__8657;
          count__8642_8646 = G__8658;
          i__8643_8647 = G__8659;
          continue;
        } else {
          var node_8660 = cljs.core.first.call(null, seq__8640_8654__$1);
          goog.dom.classes.toggle(node_8660, class$);
          var G__8661 = cljs.core.next.call(null, seq__8640_8654__$1);
          var G__8662 = null;
          var G__8663 = 0;
          var G__8664 = 0;
          seq__8640_8644 = G__8661;
          chunk__8641_8645 = G__8662;
          count__8642_8646 = G__8663;
          i__8643_8647 = G__8664;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function domina$classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function domina$set_classes_BANG_(content, classes) {
  var classes_8673__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__8669_8674 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8670_8675 = null;
  var count__8671_8676 = 0;
  var i__8672_8677 = 0;
  while (true) {
    if (i__8672_8677 < count__8671_8676) {
      var node_8678 = cljs.core._nth.call(null, chunk__8670_8675, i__8672_8677);
      goog.dom.classes.set(node_8678, classes_8673__$1);
      var G__8679 = seq__8669_8674;
      var G__8680 = chunk__8670_8675;
      var G__8681 = count__8671_8676;
      var G__8682 = i__8672_8677 + 1;
      seq__8669_8674 = G__8679;
      chunk__8670_8675 = G__8680;
      count__8671_8676 = G__8681;
      i__8672_8677 = G__8682;
      continue;
    } else {
      var temp__4425__auto___8683 = cljs.core.seq.call(null, seq__8669_8674);
      if (temp__4425__auto___8683) {
        var seq__8669_8684__$1 = temp__4425__auto___8683;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8669_8684__$1)) {
          var c__7004__auto___8685 = cljs.core.chunk_first.call(null, seq__8669_8684__$1);
          var G__8686 = cljs.core.chunk_rest.call(null, seq__8669_8684__$1);
          var G__8687 = c__7004__auto___8685;
          var G__8688 = cljs.core.count.call(null, c__7004__auto___8685);
          var G__8689 = 0;
          seq__8669_8674 = G__8686;
          chunk__8670_8675 = G__8687;
          count__8671_8676 = G__8688;
          i__8672_8677 = G__8689;
          continue;
        } else {
          var node_8690 = cljs.core.first.call(null, seq__8669_8684__$1);
          goog.dom.classes.set(node_8690, classes_8673__$1);
          var G__8691 = cljs.core.next.call(null, seq__8669_8684__$1);
          var G__8692 = null;
          var G__8693 = 0;
          var G__8694 = 0;
          seq__8669_8674 = G__8691;
          chunk__8670_8675 = G__8692;
          count__8671_8676 = G__8693;
          i__8672_8677 = G__8694;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function domina$text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function domina$set_text_BANG_(content, value) {
  var seq__8699_8703 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8700_8704 = null;
  var count__8701_8705 = 0;
  var i__8702_8706 = 0;
  while (true) {
    if (i__8702_8706 < count__8701_8705) {
      var node_8707 = cljs.core._nth.call(null, chunk__8700_8704, i__8702_8706);
      goog.dom.setTextContent(node_8707, value);
      var G__8708 = seq__8699_8703;
      var G__8709 = chunk__8700_8704;
      var G__8710 = count__8701_8705;
      var G__8711 = i__8702_8706 + 1;
      seq__8699_8703 = G__8708;
      chunk__8700_8704 = G__8709;
      count__8701_8705 = G__8710;
      i__8702_8706 = G__8711;
      continue;
    } else {
      var temp__4425__auto___8712 = cljs.core.seq.call(null, seq__8699_8703);
      if (temp__4425__auto___8712) {
        var seq__8699_8713__$1 = temp__4425__auto___8712;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8699_8713__$1)) {
          var c__7004__auto___8714 = cljs.core.chunk_first.call(null, seq__8699_8713__$1);
          var G__8715 = cljs.core.chunk_rest.call(null, seq__8699_8713__$1);
          var G__8716 = c__7004__auto___8714;
          var G__8717 = cljs.core.count.call(null, c__7004__auto___8714);
          var G__8718 = 0;
          seq__8699_8703 = G__8715;
          chunk__8700_8704 = G__8716;
          count__8701_8705 = G__8717;
          i__8702_8706 = G__8718;
          continue;
        } else {
          var node_8719 = cljs.core.first.call(null, seq__8699_8713__$1);
          goog.dom.setTextContent(node_8719, value);
          var G__8720 = cljs.core.next.call(null, seq__8699_8713__$1);
          var G__8721 = null;
          var G__8722 = 0;
          var G__8723 = 0;
          seq__8699_8703 = G__8720;
          chunk__8700_8704 = G__8721;
          count__8701_8705 = G__8722;
          i__8702_8706 = G__8723;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function domina$value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function domina$set_value_BANG_(content, value) {
  var seq__8728_8732 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__8729_8733 = null;
  var count__8730_8734 = 0;
  var i__8731_8735 = 0;
  while (true) {
    if (i__8731_8735 < count__8730_8734) {
      var node_8736 = cljs.core._nth.call(null, chunk__8729_8733, i__8731_8735);
      goog.dom.forms.setValue(node_8736, value);
      var G__8737 = seq__8728_8732;
      var G__8738 = chunk__8729_8733;
      var G__8739 = count__8730_8734;
      var G__8740 = i__8731_8735 + 1;
      seq__8728_8732 = G__8737;
      chunk__8729_8733 = G__8738;
      count__8730_8734 = G__8739;
      i__8731_8735 = G__8740;
      continue;
    } else {
      var temp__4425__auto___8741 = cljs.core.seq.call(null, seq__8728_8732);
      if (temp__4425__auto___8741) {
        var seq__8728_8742__$1 = temp__4425__auto___8741;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8728_8742__$1)) {
          var c__7004__auto___8743 = cljs.core.chunk_first.call(null, seq__8728_8742__$1);
          var G__8744 = cljs.core.chunk_rest.call(null, seq__8728_8742__$1);
          var G__8745 = c__7004__auto___8743;
          var G__8746 = cljs.core.count.call(null, c__7004__auto___8743);
          var G__8747 = 0;
          seq__8728_8732 = G__8744;
          chunk__8729_8733 = G__8745;
          count__8730_8734 = G__8746;
          i__8731_8735 = G__8747;
          continue;
        } else {
          var node_8748 = cljs.core.first.call(null, seq__8728_8742__$1);
          goog.dom.forms.setValue(node_8748, value);
          var G__8749 = cljs.core.next.call(null, seq__8728_8742__$1);
          var G__8750 = null;
          var G__8751 = 0;
          var G__8752 = 0;
          seq__8728_8732 = G__8749;
          chunk__8729_8733 = G__8750;
          count__8730_8734 = G__8751;
          i__8731_8735 = G__8752;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function domina$html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function domina$replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function domina$set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = allows_inner_html_QMARK_;
    if (and__6181__auto__) {
      var and__6181__auto____$1 = function() {
        var or__6193__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__6193__auto__)) {
          return or__6193__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__6181__auto____$1)) {
        return !special_tag_QMARK_;
      } else {
        return and__6181__auto____$1;
      }
    } else {
      return and__6181__auto__;
    }
  }())) {
    var value_8763 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__8759_8764 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__8760_8765 = null;
      var count__8761_8766 = 0;
      var i__8762_8767 = 0;
      while (true) {
        if (i__8762_8767 < count__8761_8766) {
          var node_8768 = cljs.core._nth.call(null, chunk__8760_8765, i__8762_8767);
          node_8768.innerHTML = value_8763;
          var G__8769 = seq__8759_8764;
          var G__8770 = chunk__8760_8765;
          var G__8771 = count__8761_8766;
          var G__8772 = i__8762_8767 + 1;
          seq__8759_8764 = G__8769;
          chunk__8760_8765 = G__8770;
          count__8761_8766 = G__8771;
          i__8762_8767 = G__8772;
          continue;
        } else {
          var temp__4425__auto___8773 = cljs.core.seq.call(null, seq__8759_8764);
          if (temp__4425__auto___8773) {
            var seq__8759_8774__$1 = temp__4425__auto___8773;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__8759_8774__$1)) {
              var c__7004__auto___8775 = cljs.core.chunk_first.call(null, seq__8759_8774__$1);
              var G__8776 = cljs.core.chunk_rest.call(null, seq__8759_8774__$1);
              var G__8777 = c__7004__auto___8775;
              var G__8778 = cljs.core.count.call(null, c__7004__auto___8775);
              var G__8779 = 0;
              seq__8759_8764 = G__8776;
              chunk__8760_8765 = G__8777;
              count__8761_8766 = G__8778;
              i__8762_8767 = G__8779;
              continue;
            } else {
              var node_8780 = cljs.core.first.call(null, seq__8759_8774__$1);
              node_8780.innerHTML = value_8763;
              var G__8781 = cljs.core.next.call(null, seq__8759_8774__$1);
              var G__8782 = null;
              var G__8783 = 0;
              var G__8784 = 0;
              seq__8759_8764 = G__8781;
              chunk__8760_8765 = G__8782;
              count__8761_8766 = G__8783;
              i__8762_8767 = G__8784;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e8758) {
      if (e8758 instanceof Error) {
        var e_8785 = e8758;
        domina.replace_children_BANG_.call(null, content, value_8763);
      } else {
        throw e8758;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function domina$set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function domina$get_data(var_args) {
  var args8786 = [];
  var len__7263__auto___8789 = arguments.length;
  var i__7264__auto___8790 = 0;
  while (true) {
    if (i__7264__auto___8790 < len__7263__auto___8789) {
      args8786.push(arguments[i__7264__auto___8790]);
      var G__8791 = i__7264__auto___8790 + 1;
      i__7264__auto___8790 = G__8791;
      continue;
    } else {
    }
    break;
  }
  var G__8788 = args8786.length;
  switch(G__8788) {
    case 2:
      return domina.get_data.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return domina.get_data.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8786.length)].join(""));;
  }
};
domina.get_data.cljs$core$IFn$_invoke$arity$2 = function(node, key) {
  return domina.get_data.call(null, node, key, false);
};
domina.get_data.cljs$core$IFn$_invoke$arity$3 = function(node, key, bubble) {
  var m = domina.single_node.call(null, node).__domina_data;
  var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = bubble;
    if (cljs.core.truth_(and__6181__auto__)) {
      return value == null;
    } else {
      return and__6181__auto__;
    }
  }())) {
    var temp__4425__auto__ = domina.single_node.call(null, node).parentNode;
    if (cljs.core.truth_(temp__4425__auto__)) {
      var parent = temp__4425__auto__;
      return domina.get_data.call(null, parent, key, true);
    } else {
      return null;
    }
  } else {
    return value;
  }
};
domina.get_data.cljs$lang$maxFixedArity = 3;
domina.set_data_BANG_ = function domina$set_data_BANG_(node, key, value) {
  var m = function() {
    var or__6193__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__6193__auto__)) {
      return or__6193__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function domina$apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__8799_8803 = cljs.core.seq.call(null, children);
    var chunk__8800_8804 = null;
    var count__8801_8805 = 0;
    var i__8802_8806 = 0;
    while (true) {
      if (i__8802_8806 < count__8801_8805) {
        var child_8807 = cljs.core._nth.call(null, chunk__8800_8804, i__8802_8806);
        frag.appendChild(child_8807);
        var G__8808 = seq__8799_8803;
        var G__8809 = chunk__8800_8804;
        var G__8810 = count__8801_8805;
        var G__8811 = i__8802_8806 + 1;
        seq__8799_8803 = G__8808;
        chunk__8800_8804 = G__8809;
        count__8801_8805 = G__8810;
        i__8802_8806 = G__8811;
        continue;
      } else {
        var temp__4425__auto___8812 = cljs.core.seq.call(null, seq__8799_8803);
        if (temp__4425__auto___8812) {
          var seq__8799_8813__$1 = temp__4425__auto___8812;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8799_8813__$1)) {
            var c__7004__auto___8814 = cljs.core.chunk_first.call(null, seq__8799_8813__$1);
            var G__8815 = cljs.core.chunk_rest.call(null, seq__8799_8813__$1);
            var G__8816 = c__7004__auto___8814;
            var G__8817 = cljs.core.count.call(null, c__7004__auto___8814);
            var G__8818 = 0;
            seq__8799_8803 = G__8815;
            chunk__8800_8804 = G__8816;
            count__8801_8805 = G__8817;
            i__8802_8806 = G__8818;
            continue;
          } else {
            var child_8819 = cljs.core.first.call(null, seq__8799_8813__$1);
            frag.appendChild(child_8819);
            var G__8820 = cljs.core.next.call(null, seq__8799_8813__$1);
            var G__8821 = null;
            var G__8822 = 0;
            var G__8823 = 0;
            seq__8799_8803 = G__8820;
            chunk__8800_8804 = G__8821;
            count__8801_8805 = G__8822;
            i__8802_8806 = G__8823;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__8793_SHARP_, p2__8794_SHARP_) {
        return f.call(null, p1__8793_SHARP_, p2__8794_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function domina$lazy_nl_via_item(var_args) {
  var args8824 = [];
  var len__7263__auto___8827 = arguments.length;
  var i__7264__auto___8828 = 0;
  while (true) {
    if (i__7264__auto___8828 < len__7263__auto___8827) {
      args8824.push(arguments[i__7264__auto___8828]);
      var G__8829 = i__7264__auto___8828 + 1;
      i__7264__auto___8828 = G__8829;
      continue;
    } else {
    }
    break;
  }
  var G__8826 = args8824.length;
  switch(G__8826) {
    case 1:
      return domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8824.length)].join(""));;
  }
};
domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = function(nl) {
  return domina.lazy_nl_via_item.call(null, nl, 0);
};
domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = function(nl, n) {
  if (n < nl.length) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, nl.item(n), domina.lazy_nl_via_item.call(null, nl, n + 1));
    }, null, null);
  } else {
    return null;
  }
};
domina.lazy_nl_via_item.cljs$lang$maxFixedArity = 2;
domina.lazy_nl_via_array_ref = function domina$lazy_nl_via_array_ref(var_args) {
  var args8831 = [];
  var len__7263__auto___8834 = arguments.length;
  var i__7264__auto___8835 = 0;
  while (true) {
    if (i__7264__auto___8835 < len__7263__auto___8834) {
      args8831.push(arguments[i__7264__auto___8835]);
      var G__8836 = i__7264__auto___8835 + 1;
      i__7264__auto___8835 = G__8836;
      continue;
    } else {
    }
    break;
  }
  var G__8833 = args8831.length;
  switch(G__8833) {
    case 1:
      return domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8831.length)].join(""));;
  }
};
domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = function(nl) {
  return domina.lazy_nl_via_array_ref.call(null, nl, 0);
};
domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = function(nl, n) {
  if (n < nl.length) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, nl[n], domina.lazy_nl_via_array_ref.call(null, nl, n + 1));
    }, null, null);
  } else {
    return null;
  }
};
domina.lazy_nl_via_array_ref.cljs$lang$maxFixedArity = 2;
domina.lazy_nodelist = function domina$lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function domina$array_like_QMARK_(obj) {
  var and__6181__auto__ = obj;
  if (cljs.core.truth_(and__6181__auto__)) {
    var and__6181__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__6181__auto____$1) {
      return obj.length;
    } else {
      return and__6181__auto____$1;
    }
  } else {
    return and__6181__auto__;
  }
};
domina.normalize_seq = function domina$normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (!(list_thing == null) ? list_thing.cljs$lang$protocol_mask$partition0$ & 8388608 || list_thing.cljs$core$ISeqable$ ? true : !list_thing.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, list_thing) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, list_thing)) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (!(content == null) ? content.cljs$lang$protocol_mask$partition0$ & 8388608 || content.cljs$core$ISeqable$ ? true : !content.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content)) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (!(content == null) ? content.cljs$lang$protocol_mask$partition0$ & 8388608 || content.cljs$core$ISeqable$ ? true : !content.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content)) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
} else {
}
;/*
 Portions of this code are from the Dojo Toolkit, received by
 The Closure Library Authors under the BSD license. All other code is
 Copyright 2005-2009 The Closure Library Authors. All Rights Reserved.

The "New" BSD License:

Copyright (c) 2005-2009, The Dojo Foundation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 Neither the name of the Dojo Foundation nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
goog.provide("goog.dom.query");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.functions");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.query = function() {
  var cssCaseBug = goog.userAgent.WEBKIT && goog.dom.getDocument().compatMode == "BackCompat";
  var legacyIE = goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9");
  var childNodesName = !!goog.dom.getDocument().firstChild["children"] ? "children" : "childNodes";
  var specials = "\x3e~+";
  var caseSensitive = false;
  var getQueryParts = function(query) {
    if (specials.indexOf(query.slice(-1)) >= 0) {
      query += " * ";
    } else {
      query += " ";
    }
    var ts = function(s, e) {
      return goog.string.trim(query.slice(s, e));
    };
    var queryParts = [];
    var inBrackets = -1, inParens = -1, inMatchFor = -1, inPseudo = -1, inClass = -1, inId = -1, inTag = -1, lc = "", cc = "", pStart;
    var x = 0, ql = query.length, currentPart = null, cp = null;
    var endTag = function() {
      if (inTag >= 0) {
        var tv = inTag == x ? null : ts(inTag, x);
        if (specials.indexOf(tv) < 0) {
          currentPart.tag = tv;
        } else {
          currentPart.oper = tv;
        }
        inTag = -1;
      }
    };
    var endId = function() {
      if (inId >= 0) {
        currentPart.id = ts(inId, x).replace(/\\/g, "");
        inId = -1;
      }
    };
    var endClass = function() {
      if (inClass >= 0) {
        currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
        inClass = -1;
      }
    };
    var endAll = function() {
      endId();
      endTag();
      endClass();
    };
    var endPart = function() {
      endAll();
      if (inPseudo >= 0) {
        currentPart.pseudos.push({name:ts(inPseudo + 1, x)});
      }
      currentPart.loops = currentPart.pseudos.length || currentPart.attrs.length || currentPart.classes.length;
      currentPart.oquery = currentPart.query = ts(pStart, x);
      currentPart.otag = currentPart.tag = currentPart.oper ? null : currentPart.tag || "*";
      if (currentPart.tag) {
        currentPart.tag = currentPart.tag.toUpperCase();
      }
      if (queryParts.length && queryParts[queryParts.length - 1].oper) {
        currentPart.infixOper = queryParts.pop();
        currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
      }
      queryParts.push(currentPart);
      currentPart = null;
    };
    for (;lc = cc, cc = query.charAt(x), x < ql;x++) {
      if (lc == "\\") {
        continue;
      }
      if (!currentPart) {
        pStart = x;
        currentPart = {query:null, pseudos:[], attrs:[], classes:[], tag:null, oper:null, id:null, getTag:function() {
          return caseSensitive ? this.otag : this.tag;
        }};
        inTag = x;
      }
      if (inBrackets >= 0) {
        if (cc == "]") {
          if (!cp.attr) {
            cp.attr = ts(inBrackets + 1, x);
          } else {
            cp.matchFor = ts(inMatchFor || inBrackets + 1, x);
          }
          var cmf = cp.matchFor;
          if (cmf) {
            if (cmf.charAt(0) == '"' || cmf.charAt(0) == "'") {
              cp.matchFor = cmf.slice(1, -1);
            }
          }
          currentPart.attrs.push(cp);
          cp = null;
          inBrackets = inMatchFor = -1;
        } else {
          if (cc == "\x3d") {
            var addToCc = "|~^$*".indexOf(lc) >= 0 ? lc : "";
            cp.type = addToCc + cc;
            cp.attr = ts(inBrackets + 1, x - addToCc.length);
            inMatchFor = x + 1;
          }
        }
      } else {
        if (inParens >= 0) {
          if (cc == ")") {
            if (inPseudo >= 0) {
              cp.value = ts(inParens + 1, x);
            }
            inPseudo = inParens = -1;
          }
        } else {
          if (cc == "#") {
            endAll();
            inId = x + 1;
          } else {
            if (cc == ".") {
              endAll();
              inClass = x;
            } else {
              if (cc == ":") {
                endAll();
                inPseudo = x;
              } else {
                if (cc == "[") {
                  endAll();
                  inBrackets = x;
                  cp = {};
                } else {
                  if (cc == "(") {
                    if (inPseudo >= 0) {
                      cp = {name:ts(inPseudo + 1, x), value:null};
                      currentPart.pseudos.push(cp);
                    }
                    inParens = x;
                  } else {
                    if (cc == " " && lc != cc) {
                      endPart();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return queryParts;
  };
  var agree = function(first, second) {
    if (!first) {
      return second;
    }
    if (!second) {
      return first;
    }
    return function() {
      return first.apply(window, arguments) && second.apply(window, arguments);
    };
  };
  function getArr(i, opt_arr) {
    var r = opt_arr || [];
    if (i) {
      r.push(i);
    }
    return r;
  }
  var isElement = function(n) {
    return 1 == n.nodeType;
  };
  var blank = "";
  var getAttr = function(elem, attr) {
    if (!elem) {
      return blank;
    }
    if (attr == "class") {
      return elem.className || blank;
    }
    if (attr == "for") {
      return elem.htmlFor || blank;
    }
    if (attr == "style") {
      return elem.style.cssText || blank;
    }
    return (caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
  };
  var attrs = {"*\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) >= 0;
    };
  }, "^\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) == 0;
    };
  }, "$\x3d":function(attr, value) {
    var tval = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea.lastIndexOf(value) == ea.length - value.length;
    };
  }, "~\x3d":function(attr, value) {
    var tval = " " + value + " ";
    return function(elem) {
      var ea = " " + getAttr(elem, attr) + " ";
      return ea.indexOf(tval) >= 0;
    };
  }, "|\x3d":function(attr, value) {
    value = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea == value || ea.indexOf(value + "-") == 0;
    };
  }, "\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr) == value;
    };
  }};
  var noNextElementSibling = typeof goog.dom.getDocument().firstChild.nextElementSibling == "undefined";
  var nSibling = !noNextElementSibling ? "nextElementSibling" : "nextSibling";
  var pSibling = !noNextElementSibling ? "previousElementSibling" : "previousSibling";
  var simpleNodeTest = noNextElementSibling ? isElement : goog.functions.TRUE;
  var _lookLeft = function(node) {
    while (node = node[pSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var _lookRight = function(node) {
    while (node = node[nSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var getNodeIndex = function(node) {
    var root = node.parentNode;
    var i = 0, tret = root[childNodesName], ci = node["_i"] || -1, cl = root["_l"] || -1;
    if (!tret) {
      return -1;
    }
    var l = tret.length;
    if (cl == l && ci >= 0 && cl >= 0) {
      return ci;
    }
    root["_l"] = l;
    ci = -1;
    var te = root["firstElementChild"] || root["firstChild"];
    for (;te;te = te[nSibling]) {
      if (simpleNodeTest(te)) {
        te["_i"] = ++i;
        if (node === te) {
          ci = i;
        }
      }
    }
    return ci;
  };
  var isEven = function(elem) {
    return !(getNodeIndex(elem) % 2);
  };
  var isOdd = function(elem) {
    return getNodeIndex(elem) % 2;
  };
  var pseudos = {"checked":function(name, condition) {
    return function(elem) {
      return elem.checked || elem.attributes["checked"];
    };
  }, "first-child":function() {
    return _lookLeft;
  }, "last-child":function() {
    return _lookRight;
  }, "only-child":function(name, condition) {
    return function(node) {
      if (!_lookLeft(node)) {
        return false;
      }
      if (!_lookRight(node)) {
        return false;
      }
      return true;
    };
  }, "empty":function(name, condition) {
    return function(elem) {
      var cn = elem.childNodes;
      var cnl = elem.childNodes.length;
      for (var x = cnl - 1;x >= 0;x--) {
        var nt = cn[x].nodeType;
        if (nt === 1 || nt == 3) {
          return false;
        }
      }
      return true;
    };
  }, "contains":function(name, condition) {
    var cz = condition.charAt(0);
    if (cz == '"' || cz == "'") {
      condition = condition.slice(1, -1);
    }
    return function(elem) {
      return elem.innerHTML.indexOf(condition) >= 0;
    };
  }, "not":function(name, condition) {
    var p = getQueryParts(condition)[0];
    var ignores = {el:1};
    if (p.tag != "*") {
      ignores.tag = 1;
    }
    if (!p.classes.length) {
      ignores.classes = 1;
    }
    var ntf = getSimpleFilterFunc(p, ignores);
    return function(elem) {
      return !ntf(elem);
    };
  }, "nth-child":function(name, condition) {
    function pi(n) {
      return parseInt(n, 10);
    }
    if (condition == "odd") {
      return isOdd;
    } else {
      if (condition == "even") {
        return isEven;
      }
    }
    if (condition.indexOf("n") != -1) {
      var tparts = condition.split("n", 2);
      var pred = tparts[0] ? tparts[0] == "-" ? -1 : pi(tparts[0]) : 1;
      var idx = tparts[1] ? pi(tparts[1]) : 0;
      var lb = 0, ub = -1;
      if (pred > 0) {
        if (idx < 0) {
          idx = idx % pred && pred + idx % pred;
        } else {
          if (idx > 0) {
            if (idx >= pred) {
              lb = idx - idx % pred;
            }
            idx = idx % pred;
          }
        }
      } else {
        if (pred < 0) {
          pred *= -1;
          if (idx > 0) {
            ub = idx;
            idx = idx % pred;
          }
        }
      }
      if (pred > 0) {
        return function(elem) {
          var i = getNodeIndex(elem);
          return i >= lb && (ub < 0 || i <= ub) && i % pred == idx;
        };
      } else {
        condition = idx;
      }
    }
    var ncount = pi(condition);
    return function(elem) {
      return getNodeIndex(elem) == ncount;
    };
  }};
  var defaultGetter = legacyIE ? function(cond) {
    var clc = cond.toLowerCase();
    if (clc == "class") {
      cond = "className";
    }
    return function(elem) {
      return caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc];
    };
  } : function(cond) {
    return function(elem) {
      return elem && elem.getAttribute && elem.hasAttribute(cond);
    };
  };
  var getSimpleFilterFunc = function(query, ignores) {
    if (!query) {
      return goog.functions.TRUE;
    }
    ignores = ignores || {};
    var ff = null;
    if (!ignores.el) {
      ff = agree(ff, isElement);
    }
    if (!ignores.tag) {
      if (query.tag != "*") {
        ff = agree(ff, function(elem) {
          return elem && elem.tagName == query.getTag();
        });
      }
    }
    if (!ignores.classes) {
      goog.array.forEach(query.classes, function(cname, idx, arr) {
        var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
        ff = agree(ff, function(elem) {
          return re.test(elem.className);
        });
        ff.count = idx;
      });
    }
    if (!ignores.pseudos) {
      goog.array.forEach(query.pseudos, function(pseudo) {
        var pn = pseudo.name;
        if (pseudos[pn]) {
          ff = agree(ff, pseudos[pn](pn, pseudo.value));
        }
      });
    }
    if (!ignores.attrs) {
      goog.array.forEach(query.attrs, function(attr) {
        var matcher;
        var a = attr.attr;
        if (attr.type && attrs[attr.type]) {
          matcher = attrs[attr.type](a, attr.matchFor);
        } else {
          if (a.length) {
            matcher = defaultGetter(a);
          }
        }
        if (matcher) {
          ff = agree(ff, matcher);
        }
      });
    }
    if (!ignores.id) {
      if (query.id) {
        ff = agree(ff, function(elem) {
          return !!elem && elem.id == query.id;
        });
      }
    }
    if (!ff) {
      if (!("default" in ignores)) {
        ff = goog.functions.TRUE;
      }
    }
    return ff;
  };
  var nextSiblingIterator = function(filterFunc) {
    return function(node, ret, bag) {
      while (node = node[nSibling]) {
        if (noNextElementSibling && !isElement(node)) {
          continue;
        }
        if ((!bag || _isUnique(node, bag)) && filterFunc(node)) {
          ret.push(node);
        }
        break;
      }
      return ret;
    };
  };
  var nextSiblingsIterator = function(filterFunc) {
    return function(root, ret, bag) {
      var te = root[nSibling];
      while (te) {
        if (simpleNodeTest(te)) {
          if (bag && !_isUnique(te, bag)) {
            break;
          }
          if (filterFunc(te)) {
            ret.push(te);
          }
        }
        te = te[nSibling];
      }
      return ret;
    };
  };
  var _childElements = function(filterFunc) {
    filterFunc = filterFunc || goog.functions.TRUE;
    return function(root, ret, bag) {
      var te, x = 0, tret = root[childNodesName];
      while (te = tret[x++]) {
        if (simpleNodeTest(te) && (!bag || _isUnique(te, bag)) && filterFunc(te, x)) {
          ret.push(te);
        }
      }
      return ret;
    };
  };
  var _isDescendant = function(node, root) {
    var pn = node.parentNode;
    while (pn) {
      if (pn == root) {
        break;
      }
      pn = pn.parentNode;
    }
    return !!pn;
  };
  var _getElementsFuncCache = {};
  var getElementsFunc = function(query) {
    var retFunc = _getElementsFuncCache[query.query];
    if (retFunc) {
      return retFunc;
    }
    var io = query.infixOper;
    var oper = io ? io.oper : "";
    var filterFunc = getSimpleFilterFunc(query, {el:1});
    var qt = query.tag;
    var wildcardTag = "*" == qt;
    var ecs = goog.dom.getDocument()["getElementsByClassName"];
    if (!oper) {
      if (query.id) {
        filterFunc = !query.loops && wildcardTag ? goog.functions.TRUE : getSimpleFilterFunc(query, {el:1, id:1});
        retFunc = function(root, arr) {
          var te = goog.dom.getDomHelper(root).getElement(query.id);
          if (!te || !filterFunc(te)) {
            return;
          }
          if (9 == root.nodeType) {
            return getArr(te, arr);
          } else {
            if (_isDescendant(te, root)) {
              return getArr(te, arr);
            }
          }
        };
      } else {
        if (ecs && /\{\s*\[native code\]\s*\}/.test(String(ecs)) && query.classes.length && !cssCaseBug) {
          filterFunc = getSimpleFilterFunc(query, {el:1, classes:1, id:1});
          var classesString = query.classes.join(" ");
          retFunc = function(root, arr) {
            var ret = getArr(0, arr), te, x = 0;
            var tret = root.getElementsByClassName(classesString);
            while (te = tret[x++]) {
              if (filterFunc(te, root)) {
                ret.push(te);
              }
            }
            return ret;
          };
        } else {
          if (!wildcardTag && !query.loops) {
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                ret.push(te);
              }
              return ret;
            };
          } else {
            filterFunc = getSimpleFilterFunc(query, {el:1, tag:1, id:1});
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                if (filterFunc(te, root)) {
                  ret.push(te);
                }
              }
              return ret;
            };
          }
        }
      }
    } else {
      var skipFilters = {el:1};
      if (wildcardTag) {
        skipFilters.tag = 1;
      }
      filterFunc = getSimpleFilterFunc(query, skipFilters);
      if ("+" == oper) {
        retFunc = nextSiblingIterator(filterFunc);
      } else {
        if ("~" == oper) {
          retFunc = nextSiblingsIterator(filterFunc);
        } else {
          if ("\x3e" == oper) {
            retFunc = _childElements(filterFunc);
          }
        }
      }
    }
    return _getElementsFuncCache[query.query] = retFunc;
  };
  var filterDown = function(root, queryParts) {
    var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;
    for (var i = 0;i < qpl;i++) {
      ret = [];
      qp = queryParts[i];
      x = candidates.length - 1;
      if (x > 0) {
        bag = {};
        ret.nozip = true;
      }
      var gef = getElementsFunc(qp);
      for (var j = 0;te = candidates[j];j++) {
        gef(te, ret, bag);
      }
      if (!ret.length) {
        break;
      }
      candidates = ret;
    }
    return ret;
  };
  var _queryFuncCacheDOM = {}, _queryFuncCacheQSA = {};
  var getStepQueryFunc = function(query) {
    var qparts = getQueryParts(goog.string.trim(query));
    if (qparts.length == 1) {
      var tef = getElementsFunc(qparts[0]);
      return function(root) {
        var r = tef(root, []);
        if (r) {
          r.nozip = true;
        }
        return r;
      };
    }
    return function(root) {
      return filterDown(root, qparts);
    };
  };
  var qsa = "querySelectorAll";
  var qsaAvail = !!goog.dom.getDocument()[qsa] && (!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("526"));
  var getQueryFunc = function(query, opt_forceDOM) {
    if (qsaAvail) {
      var qsaCached = _queryFuncCacheQSA[query];
      if (qsaCached && !opt_forceDOM) {
        return qsaCached;
      }
    }
    var domCached = _queryFuncCacheDOM[query];
    if (domCached) {
      return domCached;
    }
    var qcz = query.charAt(0);
    var nospace = -1 == query.indexOf(" ");
    if (query.indexOf("#") >= 0 && nospace) {
      opt_forceDOM = true;
    }
    var useQSA = qsaAvail && !opt_forceDOM && specials.indexOf(qcz) == -1 && (!legacyIE || query.indexOf(":") == -1) && !(cssCaseBug && query.indexOf(".") >= 0) && query.indexOf(":contains") == -1 && query.indexOf("|\x3d") == -1;
    if (useQSA) {
      var tq = specials.indexOf(query.charAt(query.length - 1)) >= 0 ? query + " *" : query;
      return _queryFuncCacheQSA[query] = function(root) {
        try {
          if (!(9 == root.nodeType || nospace)) {
            throw new Error("");
          }
          var r = root[qsa](tq);
          if (legacyIE) {
            r.commentStrip = true;
          } else {
            r.nozip = true;
          }
          return r;
        } catch (e) {
          return getQueryFunc(query, true)(root);
        }
      };
    } else {
      var parts = query.split(/\s*,\s*/);
      return _queryFuncCacheDOM[query] = parts.length < 2 ? getStepQueryFunc(query) : function(root) {
        var pindex = 0, ret = [], tp;
        while (tp = parts[pindex++]) {
          ret = ret.concat(getStepQueryFunc(tp)(root));
        }
        return ret;
      };
    }
  };
  var _zipIdx = 0;
  var _nodeUID = legacyIE ? function(node) {
    if (caseSensitive) {
      return node.getAttribute("_uid") || node.setAttribute("_uid", ++_zipIdx) || _zipIdx;
    } else {
      return node.uniqueID;
    }
  } : function(node) {
    return node["_uid"] || (node["_uid"] = ++_zipIdx);
  };
  var _isUnique = function(node, bag) {
    if (!bag) {
      return 1;
    }
    var id = _nodeUID(node);
    if (!bag[id]) {
      return bag[id] = 1;
    }
    return 0;
  };
  var _zipIdxName = "_zipIdx";
  var _zip = function(arr) {
    if (arr && arr.nozip) {
      return arr;
    }
    var ret = [];
    if (!arr || !arr.length) {
      return ret;
    }
    if (arr[0]) {
      ret.push(arr[0]);
    }
    if (arr.length < 2) {
      return ret;
    }
    _zipIdx++;
    if (legacyIE && caseSensitive) {
      var szidx = _zipIdx + "";
      arr[0].setAttribute(_zipIdxName, szidx);
      for (var x = 1, te;te = arr[x];x++) {
        if (arr[x].getAttribute(_zipIdxName) != szidx) {
          ret.push(te);
        }
        te.setAttribute(_zipIdxName, szidx);
      }
    } else {
      if (legacyIE && arr.commentStrip) {
        try {
          for (var x = 1, te;te = arr[x];x++) {
            if (isElement(te)) {
              ret.push(te);
            }
          }
        } catch (e) {
        }
      } else {
        if (arr[0]) {
          arr[0][_zipIdxName] = _zipIdx;
        }
        for (var x = 1, te;te = arr[x];x++) {
          if (arr[x][_zipIdxName] != _zipIdx) {
            ret.push(te);
          }
          te[_zipIdxName] = _zipIdx;
        }
      }
    }
    return ret;
  };
  var query = function(query, root) {
    if (!query) {
      return [];
    }
    if (query.constructor == Array) {
      return (query);
    }
    if (!goog.isString(query)) {
      return [query];
    }
    if (goog.isString(root)) {
      root = goog.dom.getElement(root);
      if (!root) {
        return [];
      }
    }
    root = root || goog.dom.getDocument();
    var od = root.ownerDocument || root.documentElement;
    caseSensitive = root.contentType && root.contentType == "application/xml" || goog.userAgent.OPERA && (root.doctype || od.toString() == "[object XMLDocument]") || !!od && (legacyIE ? od.xml : root.xmlVersion || od.xmlVersion);
    var r = getQueryFunc(query)(root);
    if (r && r.nozip) {
      return r;
    }
    return _zip(r);
  };
  query.pseudos = pseudos;
  return query;
}();
goog.exportSymbol("goog.dom.query", goog.dom.query);
goog.exportSymbol("goog.dom.query.pseudos", goog.dom.query.pseudos);
goog.provide("domina.css");
goog.require("cljs.core");
goog.require("domina");
goog.require("goog.dom");
goog.require("goog.dom.query");
domina.css.root_element = function domina$css$root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.css.sel = function domina$css$sel(var_args) {
  var args8846 = [];
  var len__7263__auto___8852 = arguments.length;
  var i__7264__auto___8853 = 0;
  while (true) {
    if (i__7264__auto___8853 < len__7263__auto___8852) {
      args8846.push(arguments[i__7264__auto___8853]);
      var G__8854 = i__7264__auto___8853 + 1;
      i__7264__auto___8853 = G__8854;
      continue;
    } else {
    }
    break;
  }
  var G__8848 = args8846.length;
  switch(G__8848) {
    case 1:
      return domina.css.sel.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.css.sel.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8846.length)].join(""));;
  }
};
domina.css.sel.cljs$core$IFn$_invoke$arity$1 = function(expr) {
  return domina.css.sel.call(null, domina.css.root_element.call(null), expr);
};
domina.css.sel.cljs$core$IFn$_invoke$arity$2 = function(base, expr) {
  if (typeof domina.css.t_domina$css8849 !== "undefined") {
  } else {
    domina.css.t_domina$css8849 = function(base, expr, meta8850) {
      this.base = base;
      this.expr = expr;
      this.meta8850 = meta8850;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    domina.css.t_domina$css8849.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8851, meta8850__$1) {
      var self__ = this;
      var _8851__$1 = this;
      return new domina.css.t_domina$css8849(self__.base, self__.expr, meta8850__$1);
    };
    domina.css.t_domina$css8849.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8851) {
      var self__ = this;
      var _8851__$1 = this;
      return self__.meta8850;
    };
    domina.css.t_domina$css8849.prototype.domina$DomContent$ = true;
    domina.css.t_domina$css8849.prototype.domina$DomContent$nodes$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.mapcat.call(null, function(___$1) {
        return function(p1__8844_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__8844_SHARP_));
        };
      }(___$1), domina.nodes.call(null, self__.base));
    };
    domina.css.t_domina$css8849.prototype.domina$DomContent$single_node$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.mapcat.call(null, function(___$1) {
        return function(p1__8845_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__8845_SHARP_));
        };
      }(___$1), domina.nodes.call(null, self__.base))));
    };
    domina.css.t_domina$css8849.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "expr", "expr", -1908713478, null), new cljs.core.Symbol(null, "meta8850", "meta8850", 259275353, null)], null);
    };
    domina.css.t_domina$css8849.cljs$lang$type = true;
    domina.css.t_domina$css8849.cljs$lang$ctorStr = "domina.css/t_domina$css8849";
    domina.css.t_domina$css8849.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "domina.css/t_domina$css8849");
    };
    domina.css.__GT_t_domina$css8849 = function domina$css$__GT_t_domina$css8849(base__$1, expr__$1, meta8850) {
      return new domina.css.t_domina$css8849(base__$1, expr__$1, meta8850);
    };
  }
  return new domina.css.t_domina$css8849(base, expr, cljs.core.PersistentArrayMap.EMPTY);
};
domina.css.sel.cljs$lang$maxFixedArity = 2;
goog.provide("goog.dom.ViewportSizeMonitor");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.math.Size");
goog.dom.ViewportSizeMonitor = function(opt_window) {
  goog.dom.ViewportSizeMonitor.base(this, "constructor");
  this.window_ = opt_window || window;
  this.listenerKey_ = goog.events.listen(this.window_, goog.events.EventType.RESIZE, this.handleResize_, false, this);
  this.size_ = goog.dom.getViewportSize(this.window_);
};
goog.inherits(goog.dom.ViewportSizeMonitor, goog.events.EventTarget);
goog.dom.ViewportSizeMonitor.getInstanceForWindow = function(opt_window) {
  var currentWindow = opt_window || window;
  var uid = goog.getUid(currentWindow);
  return goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] = goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] || new goog.dom.ViewportSizeMonitor(currentWindow);
};
goog.dom.ViewportSizeMonitor.removeInstanceForWindow = function(opt_window) {
  var uid = goog.getUid(opt_window || window);
  goog.dispose(goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid]);
  delete goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid];
};
goog.dom.ViewportSizeMonitor.windowInstanceMap_ = {};
goog.dom.ViewportSizeMonitor.prototype.getSize = function() {
  return this.size_ ? this.size_.clone() : null;
};
goog.dom.ViewportSizeMonitor.prototype.disposeInternal = function() {
  goog.dom.ViewportSizeMonitor.superClass_.disposeInternal.call(this);
  if (this.listenerKey_) {
    goog.events.unlistenByKey(this.listenerKey_);
    this.listenerKey_ = null;
  }
  this.window_ = null;
  this.size_ = null;
};
goog.dom.ViewportSizeMonitor.prototype.handleResize_ = function(event) {
  var size = goog.dom.getViewportSize(this.window_);
  if (!goog.math.Size.equals(size, this.size_)) {
    this.size_ = size;
    this.dispatchEvent(goog.events.EventType.RESIZE);
  }
};
goog.provide("domina.xpath");
goog.require("cljs.core");
goog.require("domina");
goog.require("goog.dom");
domina.xpath.select_node_STAR_ = function domina$xpath$select_node_STAR_(path, node, technique_1, technique_2) {
  var doc = goog.dom.getOwnerDocument(node);
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = node.selectSingleNode;
    if (cljs.core.truth_(and__6181__auto__)) {
      return doc.setProperty;
    } else {
      return and__6181__auto__;
    }
  }())) {
    doc.setProperty("SelectionLanguage", "XPath");
    return technique_1.call(null, node, path);
  } else {
    if (cljs.core.truth_(doc.evaluate)) {
      return technique_2.call(null, null, doc, node, path);
    } else {
      throw new Error("Could not find XPath support in this browser.");
    }
  }
};
domina.xpath.select_node = function domina$xpath$select_node(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectSingleNode(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    return result.singleNodeValue;
  });
};
domina.xpath.select_nodes = function domina$xpath$select_nodes(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectNodes(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    var num_results = result.snapshotLength;
    var i = 0;
    var acc = null;
    while (true) {
      if (i < num_results) {
        var G__8858 = i + 1;
        var G__8859 = cljs.core.cons.call(null, result.snapshotItem(i), acc);
        i = G__8858;
        acc = G__8859;
        continue;
      } else {
        return acc;
      }
      break;
    }
  });
};
domina.xpath.root_element = function domina$xpath$root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.xpath.xpath = function domina$xpath$xpath(var_args) {
  var args8860 = [];
  var len__7263__auto___8866 = arguments.length;
  var i__7264__auto___8867 = 0;
  while (true) {
    if (i__7264__auto___8867 < len__7263__auto___8866) {
      args8860.push(arguments[i__7264__auto___8867]);
      var G__8868 = i__7264__auto___8867 + 1;
      i__7264__auto___8867 = G__8868;
      continue;
    } else {
    }
    break;
  }
  var G__8862 = args8860.length;
  switch(G__8862) {
    case 1:
      return domina.xpath.xpath.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.xpath.xpath.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8860.length)].join(""));;
  }
};
domina.xpath.xpath.cljs$core$IFn$_invoke$arity$1 = function(expr) {
  return domina.xpath.xpath.call(null, domina.xpath.root_element.call(null), expr);
};
domina.xpath.xpath.cljs$core$IFn$_invoke$arity$2 = function(base, expr) {
  if (typeof domina.xpath.t_domina$xpath8863 !== "undefined") {
  } else {
    domina.xpath.t_domina$xpath8863 = function(base, expr, meta8864) {
      this.base = base;
      this.expr = expr;
      this.meta8864 = meta8864;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    domina.xpath.t_domina$xpath8863.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8865, meta8864__$1) {
      var self__ = this;
      var _8865__$1 = this;
      return new domina.xpath.t_domina$xpath8863(self__.base, self__.expr, meta8864__$1);
    };
    domina.xpath.t_domina$xpath8863.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8865) {
      var self__ = this;
      var _8865__$1 = this;
      return self__.meta8864;
    };
    domina.xpath.t_domina$xpath8863.prototype.domina$DomContent$ = true;
    domina.xpath.t_domina$xpath8863.prototype.domina$DomContent$nodes$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.mapcat.call(null, cljs.core.partial.call(null, domina.xpath.select_nodes, self__.expr), domina.nodes.call(null, self__.base));
    };
    domina.xpath.t_domina$xpath8863.prototype.domina$DomContent$single_node$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, cljs.core.partial.call(null, domina.xpath.select_node, self__.expr), domina.nodes.call(null, self__.base))));
    };
    domina.xpath.t_domina$xpath8863.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "expr", "expr", -1908713478, null), new cljs.core.Symbol(null, "meta8864", "meta8864", -324585114, null)], null);
    };
    domina.xpath.t_domina$xpath8863.cljs$lang$type = true;
    domina.xpath.t_domina$xpath8863.cljs$lang$ctorStr = "domina.xpath/t_domina$xpath8863";
    domina.xpath.t_domina$xpath8863.cljs$lang$ctorPrWriter = function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
      return cljs.core._write.call(null, writer__6800__auto__, "domina.xpath/t_domina$xpath8863");
    };
    domina.xpath.__GT_t_domina$xpath8863 = function domina$xpath$__GT_t_domina$xpath8863(base__$1, expr__$1, meta8864) {
      return new domina.xpath.t_domina$xpath8863(base__$1, expr__$1, meta8864);
    };
  }
  return new domina.xpath.t_domina$xpath8863(base, expr, cljs.core.PersistentArrayMap.EMPTY);
};
domina.xpath.xpath.cljs$lang$maxFixedArity = 2;
goog.provide("enfocus.enlive.syntax");
goog.require("cljs.core");
enfocus.enlive.syntax.sel_to_str = function enfocus$enlive$syntax$sel_to_str(input) {
  var item = cljs.core.first.call(null, input);
  var rest = cljs.core.rest.call(null, input);
  var end = cljs.core.empty_QMARK_.call(null, rest) ? cljs.core.list(cljs.core.List.EMPTY) : enfocus$enlive$syntax$sel_to_str.call(null, rest);
  if (item instanceof cljs.core.Keyword) {
    return cljs.core.map.call(null, function(item, rest, end) {
      return function(p1__8872_SHARP_) {
        return cljs.core.conj.call(null, p1__8872_SHARP_, cljs.core.name.call(null, item));
      };
    }(item, rest, end), end);
  } else {
    if (typeof item === "string") {
      return cljs.core.map.call(null, function(item, rest, end) {
        return function(p1__8873_SHARP_) {
          return cljs.core.conj.call(null, p1__8873_SHARP_, item);
        };
      }(item, rest, end), end);
    } else {
      if (cljs.core.set_QMARK_.call(null, item)) {
        return cljs.core.reduce.call(null, function(item, rest, end) {
          return function(r1, it) {
            return cljs.core.concat.call(null, r1, cljs.core.map.call(null, function(item, rest, end) {
              return function(p1__8874_SHARP_) {
                return cljs.core.conj.call(null, p1__8874_SHARP_, it);
              };
            }(item, rest, end), end));
          };
        }(item, rest, end), cljs.core.PersistentVector.EMPTY, cljs.core.flatten.call(null, enfocus$enlive$syntax$sel_to_str.call(null, item)));
      } else {
        if (cljs.core.coll_QMARK_.call(null, item)) {
          var x1 = enfocus$enlive$syntax$sel_to_str.call(null, item);
          var sub = cljs.core.map.call(null, function(x1, item, rest, end) {
            return function(p1__8875_SHARP_) {
              return cljs.core.apply.call(null, cljs.core.str, p1__8875_SHARP_);
            };
          }(x1, item, rest, end), enfocus$enlive$syntax$sel_to_str.call(null, item));
          var iter__6973__auto__ = function(x1, sub, item, rest, end) {
            return function enfocus$enlive$syntax$sel_to_str_$_iter__8882(s__8883) {
              return new cljs.core.LazySeq(null, function(x1, sub, item, rest, end) {
                return function() {
                  var s__8883__$1 = s__8883;
                  while (true) {
                    var temp__4425__auto__ = cljs.core.seq.call(null, s__8883__$1);
                    if (temp__4425__auto__) {
                      var xs__4977__auto__ = temp__4425__auto__;
                      var s = cljs.core.first.call(null, xs__4977__auto__);
                      var iterys__6969__auto__ = function(s__8883__$1, s, xs__4977__auto__, temp__4425__auto__, x1, sub, item, rest, end) {
                        return function enfocus$enlive$syntax$sel_to_str_$_iter__8882_$_iter__8884(s__8885) {
                          return new cljs.core.LazySeq(null, function(s__8883__$1, s, xs__4977__auto__, temp__4425__auto__, x1, sub, item, rest, end) {
                            return function() {
                              var s__8885__$1 = s__8885;
                              while (true) {
                                var temp__4425__auto____$1 = cljs.core.seq.call(null, s__8885__$1);
                                if (temp__4425__auto____$1) {
                                  var s__8885__$2 = temp__4425__auto____$1;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__8885__$2)) {
                                    var c__6971__auto__ = cljs.core.chunk_first.call(null, s__8885__$2);
                                    var size__6972__auto__ = cljs.core.count.call(null, c__6971__auto__);
                                    var b__8887 = cljs.core.chunk_buffer.call(null, size__6972__auto__);
                                    if (function() {
                                      var i__8886 = 0;
                                      while (true) {
                                        if (i__8886 < size__6972__auto__) {
                                          var e = cljs.core._nth.call(null, c__6971__auto__, i__8886);
                                          cljs.core.chunk_append.call(null, b__8887, function() {
                                            cljs.core.println.call(null, s, e);
                                            return cljs.core.conj.call(null, e, s);
                                          }());
                                          var G__8888 = i__8886 + 1;
                                          i__8886 = G__8888;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8887), enfocus$enlive$syntax$sel_to_str_$_iter__8882_$_iter__8884.call(null, cljs.core.chunk_rest.call(null, s__8885__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8887), null);
                                    }
                                  } else {
                                    var e = cljs.core.first.call(null, s__8885__$2);
                                    return cljs.core.cons.call(null, function() {
                                      cljs.core.println.call(null, s, e);
                                      return cljs.core.conj.call(null, e, s);
                                    }(), enfocus$enlive$syntax$sel_to_str_$_iter__8882_$_iter__8884.call(null, cljs.core.rest.call(null, s__8885__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(s__8883__$1, s, xs__4977__auto__, temp__4425__auto__, x1, sub, item, rest, end), null, null);
                        };
                      }(s__8883__$1, s, xs__4977__auto__, temp__4425__auto__, x1, sub, item, rest, end);
                      var fs__6970__auto__ = cljs.core.seq.call(null, iterys__6969__auto__.call(null, end));
                      if (fs__6970__auto__) {
                        return cljs.core.concat.call(null, fs__6970__auto__, enfocus$enlive$syntax$sel_to_str_$_iter__8882.call(null, cljs.core.rest.call(null, s__8883__$1)));
                      } else {
                        var G__8889 = cljs.core.rest.call(null, s__8883__$1);
                        s__8883__$1 = G__8889;
                        continue;
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(x1, sub, item, rest, end), null, null);
            };
          }(x1, sub, item, rest, end);
          return iter__6973__auto__.call(null, sub);
        } else {
          return input;
        }
      }
    }
  }
};
enfocus.enlive.syntax.convert = function enfocus$enlive$syntax$convert(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    var temp__4423__auto__ = enfocus.enlive.syntax.sel_to_str.call(null, sel);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var ors = temp__4423__auto__;
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.apply.call(null, cljs.core.concat, cljs.core.interpose.call(null, ",", ors))));
    } else {
      return null;
    }
  }
};
enfocus.enlive.syntax.attr_pairs = function enfocus$enlive$syntax$attr_pairs(op, elms) {
  var ts = function(p__8892) {
    var vec__8893 = p__8892;
    var x = cljs.core.nth.call(null, vec__8893, 0, null);
    var y = cljs.core.nth.call(null, vec__8893, 1, null);
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str(op), cljs.core.str("\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
  };
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, cljs.core.partition.call(null, 2, elms)));
};
enfocus.enlive.syntax.attr_QMARK_ = function enfocus$enlive$syntax$attr_QMARK_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8896 = arguments.length;
  var i__7264__auto___8897 = 0;
  while (true) {
    if (i__7264__auto___8897 < len__7263__auto___8896) {
      args__7270__auto__.push(arguments[i__7264__auto___8897]);
      var G__8898 = i__7264__auto___8897 + 1;
      i__7264__auto___8897 = G__8898;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__8894_SHARP_) {
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, p1__8894_SHARP_)), cljs.core.str("]")].join("");
  }, elms));
};
enfocus.enlive.syntax.attr_QMARK_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_QMARK_.cljs$lang$applyTo = function(seq8895) {
  return enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8895));
};
enfocus.enlive.syntax.attr_EQ_ = function enfocus$enlive$syntax$attr_EQ_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8900 = arguments.length;
  var i__7264__auto___8901 = 0;
  while (true) {
    if (i__7264__auto___8901 < len__7263__auto___8900) {
      args__7270__auto__.push(arguments[i__7264__auto___8901]);
      var G__8902 = i__7264__auto___8901 + 1;
      i__7264__auto___8901 = G__8902;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "", elms);
};
enfocus.enlive.syntax.attr_EQ_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_EQ_.cljs$lang$applyTo = function(seq8899) {
  return enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8899));
};
enfocus.enlive.syntax.attr_has = function enfocus$enlive$syntax$attr_has(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8905 = arguments.length;
  var i__7264__auto___8906 = 0;
  while (true) {
    if (i__7264__auto___8906 < len__7263__auto___8905) {
      args__7270__auto__.push(arguments[i__7264__auto___8906]);
      var G__8907 = i__7264__auto___8906 + 1;
      i__7264__auto___8906 = G__8907;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic = function(x, vals) {
  var ts = function(y) {
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str("~\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
  };
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, vals));
};
enfocus.enlive.syntax.attr_has.cljs$lang$maxFixedArity = 1;
enfocus.enlive.syntax.attr_has.cljs$lang$applyTo = function(seq8903) {
  var G__8904 = cljs.core.first.call(null, seq8903);
  var seq8903__$1 = cljs.core.next.call(null, seq8903);
  return enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic(G__8904, seq8903__$1);
};
enfocus.enlive.syntax.attr_starts = function enfocus$enlive$syntax$attr_starts(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8909 = arguments.length;
  var i__7264__auto___8910 = 0;
  while (true) {
    if (i__7264__auto___8910 < len__7263__auto___8909) {
      args__7270__auto__.push(arguments[i__7264__auto___8910]);
      var G__8911 = i__7264__auto___8910 + 1;
      i__7264__auto___8910 = G__8911;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "^", elms);
};
enfocus.enlive.syntax.attr_starts.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_starts.cljs$lang$applyTo = function(seq8908) {
  return enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8908));
};
enfocus.enlive.syntax.attr_ends = function enfocus$enlive$syntax$attr_ends(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8913 = arguments.length;
  var i__7264__auto___8914 = 0;
  while (true) {
    if (i__7264__auto___8914 < len__7263__auto___8913) {
      args__7270__auto__.push(arguments[i__7264__auto___8914]);
      var G__8915 = i__7264__auto___8914 + 1;
      i__7264__auto___8914 = G__8915;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "$", elms);
};
enfocus.enlive.syntax.attr_ends.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_ends.cljs$lang$applyTo = function(seq8912) {
  return enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8912));
};
enfocus.enlive.syntax.attr_contains = function enfocus$enlive$syntax$attr_contains(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8917 = arguments.length;
  var i__7264__auto___8918 = 0;
  while (true) {
    if (i__7264__auto___8918 < len__7263__auto___8917) {
      args__7270__auto__.push(arguments[i__7264__auto___8918]);
      var G__8919 = i__7264__auto___8918 + 1;
      i__7264__auto___8918 = G__8919;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "*", elms);
};
enfocus.enlive.syntax.attr_contains.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_contains.cljs$lang$applyTo = function(seq8916) {
  return enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8916));
};
enfocus.enlive.syntax.attr_BAR__EQ_ = function enfocus$enlive$syntax$attr_BAR__EQ_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8921 = arguments.length;
  var i__7264__auto___8922 = 0;
  while (true) {
    if (i__7264__auto___8922 < len__7263__auto___8921) {
      args__7270__auto__.push(arguments[i__7264__auto___8922]);
      var G__8923 = i__7264__auto___8922 + 1;
      i__7264__auto___8922 = G__8923;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "|", elms);
};
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$lang$applyTo = function(seq8920) {
  return enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8920));
};
enfocus.enlive.syntax.nth_op = function enfocus$enlive$syntax$nth_op(var_args) {
  var args8924 = [];
  var len__7263__auto___8927 = arguments.length;
  var i__7264__auto___8928 = 0;
  while (true) {
    if (i__7264__auto___8928 < len__7263__auto___8927) {
      args8924.push(arguments[i__7264__auto___8928]);
      var G__8929 = i__7264__auto___8928 + 1;
      i__7264__auto___8928 = G__8929;
      continue;
    } else {
    }
    break;
  }
  var G__8926 = args8924.length;
  switch(G__8926) {
    case 2:
      return enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8924.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$2 = function(op, x) {
  return [cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str(")")].join("");
};
enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$3 = function(op, x, y) {
  return [cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str("n"), cljs.core.str(y > 0 ? "+" : null), cljs.core.str(y)].join("");
};
enfocus.enlive.syntax.nth_op.cljs$lang$maxFixedArity = 3;
enfocus.enlive.syntax.nth_child = function enfocus$enlive$syntax$nth_child(var_args) {
  var args8931 = [];
  var len__7263__auto___8934 = arguments.length;
  var i__7264__auto___8935 = 0;
  while (true) {
    if (i__7264__auto___8935 < len__7263__auto___8934) {
      args8931.push(arguments[i__7264__auto___8935]);
      var G__8936 = i__7264__auto___8935 + 1;
      i__7264__auto___8935 = G__8936;
      continue;
    } else {
    }
    break;
  }
  var G__8933 = args8931.length;
  switch(G__8933) {
    case 1:
      return enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8931.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "child", x);
};
enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "child", x, y);
};
enfocus.enlive.syntax.nth_child.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_last_child = function enfocus$enlive$syntax$nth_last_child(var_args) {
  var args8938 = [];
  var len__7263__auto___8941 = arguments.length;
  var i__7264__auto___8942 = 0;
  while (true) {
    if (i__7264__auto___8942 < len__7263__auto___8941) {
      args8938.push(arguments[i__7264__auto___8942]);
      var G__8943 = i__7264__auto___8942 + 1;
      i__7264__auto___8942 = G__8943;
      continue;
    } else {
    }
    break;
  }
  var G__8940 = args8938.length;
  switch(G__8940) {
    case 1:
      return enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8938.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-child", x);
};
enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-child", x, y);
};
enfocus.enlive.syntax.nth_last_child.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_of_type = function enfocus$enlive$syntax$nth_of_type(var_args) {
  var args8945 = [];
  var len__7263__auto___8948 = arguments.length;
  var i__7264__auto___8949 = 0;
  while (true) {
    if (i__7264__auto___8949 < len__7263__auto___8948) {
      args8945.push(arguments[i__7264__auto___8949]);
      var G__8950 = i__7264__auto___8949 + 1;
      i__7264__auto___8949 = G__8950;
      continue;
    } else {
    }
    break;
  }
  var G__8947 = args8945.length;
  switch(G__8947) {
    case 1:
      return enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8945.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "of-type", x);
};
enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "of-type", x, y);
};
enfocus.enlive.syntax.nth_of_type.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_last_of_type = function enfocus$enlive$syntax$nth_last_of_type(var_args) {
  var args8952 = [];
  var len__7263__auto___8955 = arguments.length;
  var i__7264__auto___8956 = 0;
  while (true) {
    if (i__7264__auto___8956 < len__7263__auto___8955) {
      args8952.push(arguments[i__7264__auto___8956]);
      var G__8957 = i__7264__auto___8956 + 1;
      i__7264__auto___8956 = G__8957;
      continue;
    } else {
    }
    break;
  }
  var G__8954 = args8952.length;
  switch(G__8954) {
    case 1:
      return enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8952.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x);
};
enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x, y);
};
enfocus.enlive.syntax.nth_last_of_type.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.but = function enfocus$enlive$syntax$but(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___8960 = arguments.length;
  var i__7264__auto___8961 = 0;
  while (true) {
    if (i__7264__auto___8961 < len__7263__auto___8960) {
      args__7270__auto__.push(arguments[i__7264__auto___8961]);
      var G__8962 = i__7264__auto___8961 + 1;
      i__7264__auto___8961 = G__8962;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic = function(sel) {
  return [cljs.core.str("not("), cljs.core.str(enfocus.enlive.syntax.convert.call(null, sel)), cljs.core.str(")")].join("");
};
enfocus.enlive.syntax.but.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.but.cljs$lang$applyTo = function(seq8959) {
  return enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq8959));
};
goog.provide("enfocus.core");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("domina.css");
goog.require("goog.Timer");
goog.require("goog.net.XhrIo");
goog.require("goog.dom.ViewportSizeMonitor");
goog.require("domina");
goog.require("goog.async.Delay");
goog.require("goog.events");
goog.require("domina.xpath");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("enfocus.enlive.syntax");
enfocus.core.ISelector = function() {
};
enfocus.core.select = function enfocus$core$select(var_args) {
  var args9110 = [];
  var len__7263__auto___9113 = arguments.length;
  var i__7264__auto___9114 = 0;
  while (true) {
    if (i__7264__auto___9114 < len__7263__auto___9113) {
      args9110.push(arguments[i__7264__auto___9114]);
      var G__9115 = i__7264__auto___9114 + 1;
      i__7264__auto___9114 = G__9115;
      continue;
    } else {
    }
    break;
  }
  var G__9112 = args9110.length;
  switch(G__9112) {
    case 1:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9110.length)].join(""));;
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$1 == null)) {
    return this$.enfocus$core$ISelector$select$arity$1(this$);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = enfocus.core.select[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$);
    } else {
      var m__6857__auto____$1 = enfocus.core.select["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$2 = function(this$, root) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$2 == null)) {
    return this$.enfocus$core$ISelector$select$arity$2(this$, root);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = enfocus.core.select[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, root);
    } else {
      var m__6857__auto____$1 = enfocus.core.select["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, root);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$3 = function(this$, root, id_mask) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$3 == null)) {
    return this$.enfocus$core$ISelector$select$arity$3(this$, root, id_mask);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = enfocus.core.select[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, root, id_mask);
    } else {
      var m__6857__auto____$1 = enfocus.core.select["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, root, id_mask);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$lang$maxFixedArity = 3;
enfocus.core.ITransform = function() {
};
enfocus.core.apply_transform = function enfocus$core$apply_transform(var_args) {
  var args9117 = [];
  var len__7263__auto___9120 = arguments.length;
  var i__7264__auto___9121 = 0;
  while (true) {
    if (i__7264__auto___9121 < len__7263__auto___9120) {
      args9117.push(arguments[i__7264__auto___9121]);
      var G__9122 = i__7264__auto___9121 + 1;
      i__7264__auto___9121 = G__9122;
      continue;
    } else {
    }
    break;
  }
  var G__9119 = args9117.length;
  switch(G__9119) {
    case 2:
      return enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9117.length)].join(""));;
  }
};
enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$2 = function(this$, nodes) {
  if (!(this$ == null) && !(this$.enfocus$core$ITransform$apply_transform$arity$2 == null)) {
    return this$.enfocus$core$ITransform$apply_transform$arity$2(this$, nodes);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = enfocus.core.apply_transform[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, nodes);
    } else {
      var m__6857__auto____$1 = enfocus.core.apply_transform["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, nodes);
      } else {
        throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
      }
    }
  }
};
enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$3 = function(this$, nodes, callback) {
  if (!(this$ == null) && !(this$.enfocus$core$ITransform$apply_transform$arity$3 == null)) {
    return this$.enfocus$core$ITransform$apply_transform$arity$3(this$, nodes, callback);
  } else {
    var x__6856__auto__ = this$ == null ? null : this$;
    var m__6857__auto__ = enfocus.core.apply_transform[goog.typeOf(x__6856__auto__)];
    if (!(m__6857__auto__ == null)) {
      return m__6857__auto__.call(null, this$, nodes, callback);
    } else {
      var m__6857__auto____$1 = enfocus.core.apply_transform["_"];
      if (!(m__6857__auto____$1 == null)) {
        return m__6857__auto____$1.call(null, this$, nodes, callback);
      } else {
        throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
      }
    }
  }
};
enfocus.core.apply_transform.cljs$lang$maxFixedArity = 3;
enfocus.core.debug = false;
enfocus.core.log_debug = function enfocus$core$log_debug(mesg) {
  if (cljs.core.truth_(function() {
    var and__6181__auto__ = enfocus.core.debug;
    if (cljs.core.truth_(and__6181__auto__)) {
      return !cljs.core._EQ_.call(null, window.console, undefined);
    } else {
      return and__6181__auto__;
    }
  }())) {
    return console.log(mesg);
  } else {
    return null;
  }
};
enfocus.core.setTimeout = function enfocus$core$setTimeout(func, ttime) {
  return goog.Timer.callOnce(func, ttime);
};
enfocus.core.node_QMARK_ = function enfocus$core$node_QMARK_(tst) {
  return goog.dom.isNodeLike(tst);
};
enfocus.core.nodelist_QMARK_ = function enfocus$core$nodelist_QMARK_(tst) {
  return tst instanceof NodeList;
};
enfocus.core.nodes__GT_coll = function enfocus$core$nodes__GT_coll(nl) {
  if (nl === window) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [nl], null);
  } else {
    return domina.nodes.call(null, nl);
  }
};
enfocus.core.flatten_nodes_coll = function enfocus$core$flatten_nodes_coll(values) {
  return cljs.core.mapcat.call(null, function(p1__9124_SHARP_) {
    if (typeof p1__9124_SHARP_ === "string") {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [goog.dom.createTextNode(p1__9124_SHARP_)], null);
    } else {
      return enfocus.core.nodes__GT_coll.call(null, p1__9124_SHARP_);
    }
  }, values);
};
enfocus.core.style_set = function enfocus$core$style_set(obj, values) {
  var seq__9131_9137 = cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.hash_map, values));
  var chunk__9132_9138 = null;
  var count__9133_9139 = 0;
  var i__9134_9140 = 0;
  while (true) {
    if (i__9134_9140 < count__9133_9139) {
      var vec__9135_9141 = cljs.core._nth.call(null, chunk__9132_9138, i__9134_9140);
      var attr_9142 = cljs.core.nth.call(null, vec__9135_9141, 0, null);
      var value_9143 = cljs.core.nth.call(null, vec__9135_9141, 1, null);
      goog.style.setStyle(obj, cljs.core.name.call(null, attr_9142), value_9143);
      var G__9144 = seq__9131_9137;
      var G__9145 = chunk__9132_9138;
      var G__9146 = count__9133_9139;
      var G__9147 = i__9134_9140 + 1;
      seq__9131_9137 = G__9144;
      chunk__9132_9138 = G__9145;
      count__9133_9139 = G__9146;
      i__9134_9140 = G__9147;
      continue;
    } else {
      var temp__4425__auto___9148 = cljs.core.seq.call(null, seq__9131_9137);
      if (temp__4425__auto___9148) {
        var seq__9131_9149__$1 = temp__4425__auto___9148;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9131_9149__$1)) {
          var c__7004__auto___9150 = cljs.core.chunk_first.call(null, seq__9131_9149__$1);
          var G__9151 = cljs.core.chunk_rest.call(null, seq__9131_9149__$1);
          var G__9152 = c__7004__auto___9150;
          var G__9153 = cljs.core.count.call(null, c__7004__auto___9150);
          var G__9154 = 0;
          seq__9131_9137 = G__9151;
          chunk__9132_9138 = G__9152;
          count__9133_9139 = G__9153;
          i__9134_9140 = G__9154;
          continue;
        } else {
          var vec__9136_9155 = cljs.core.first.call(null, seq__9131_9149__$1);
          var attr_9156 = cljs.core.nth.call(null, vec__9136_9155, 0, null);
          var value_9157 = cljs.core.nth.call(null, vec__9136_9155, 1, null);
          goog.style.setStyle(obj, cljs.core.name.call(null, attr_9156), value_9157);
          var G__9158 = cljs.core.next.call(null, seq__9131_9149__$1);
          var G__9159 = null;
          var G__9160 = 0;
          var G__9161 = 0;
          seq__9131_9137 = G__9158;
          chunk__9132_9138 = G__9159;
          count__9133_9139 = G__9160;
          i__9134_9140 = G__9161;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
enfocus.core.style_remove = function enfocus$core$style_remove(obj, values) {
  var seq__9166 = cljs.core.seq.call(null, values);
  var chunk__9167 = null;
  var count__9168 = 0;
  var i__9169 = 0;
  while (true) {
    if (i__9169 < count__9168) {
      var attr = cljs.core._nth.call(null, chunk__9167, i__9169);
      if (cljs.core.truth_(goog.userAgent.IE)) {
        goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
      } else {
        obj.style.removeProperty(cljs.core.name.call(null, attr));
      }
      var G__9170 = seq__9166;
      var G__9171 = chunk__9167;
      var G__9172 = count__9168;
      var G__9173 = i__9169 + 1;
      seq__9166 = G__9170;
      chunk__9167 = G__9171;
      count__9168 = G__9172;
      i__9169 = G__9173;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq.call(null, seq__9166);
      if (temp__4425__auto__) {
        var seq__9166__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9166__$1)) {
          var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9166__$1);
          var G__9174 = cljs.core.chunk_rest.call(null, seq__9166__$1);
          var G__9175 = c__7004__auto__;
          var G__9176 = cljs.core.count.call(null, c__7004__auto__);
          var G__9177 = 0;
          seq__9166 = G__9174;
          chunk__9167 = G__9175;
          count__9168 = G__9176;
          i__9169 = G__9177;
          continue;
        } else {
          var attr = cljs.core.first.call(null, seq__9166__$1);
          if (cljs.core.truth_(goog.userAgent.IE)) {
            goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
          } else {
            obj.style.removeProperty(cljs.core.name.call(null, attr));
          }
          var G__9178 = cljs.core.next.call(null, seq__9166__$1);
          var G__9179 = null;
          var G__9180 = 0;
          var G__9181 = 0;
          seq__9166 = G__9178;
          chunk__9167 = G__9179;
          count__9168 = G__9180;
          i__9169 = G__9181;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
enfocus.core.get_eff_prop_name = function enfocus$core$get_eff_prop_name(etype) {
  return [cljs.core.str("__ef_effect_"), cljs.core.str(etype)].join("");
};
enfocus.core.get_mills = function enfocus$core$get_mills() {
  return (new Date).getMilliseconds();
};
enfocus.core.pix_round = function enfocus$core$pix_round(step) {
  if (step < 0) {
    return Math.floor(step);
  } else {
    return Math.ceil(step);
  }
};
enfocus.core.add_map_attrs = function enfocus$core$add_map_attrs(var_args) {
  var args9182 = [];
  var len__7263__auto___9191 = arguments.length;
  var i__7264__auto___9192 = 0;
  while (true) {
    if (i__7264__auto___9192 < len__7263__auto___9191) {
      args9182.push(arguments[i__7264__auto___9192]);
      var G__9193 = i__7264__auto___9192 + 1;
      i__7264__auto___9192 = G__9193;
      continue;
    } else {
    }
    break;
  }
  var G__9184 = args9182.length;
  switch(G__9184) {
    case 2:
      return enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9182.length)].join(""));;
  }
};
enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$2 = function(elem, ats) {
  if (cljs.core.truth_(elem)) {
    if (cljs.core.map_QMARK_.call(null, ats)) {
      var seq__9185_9195 = cljs.core.seq.call(null, ats);
      var chunk__9186_9196 = null;
      var count__9187_9197 = 0;
      var i__9188_9198 = 0;
      while (true) {
        if (i__9188_9198 < count__9187_9197) {
          var vec__9189_9199 = cljs.core._nth.call(null, chunk__9186_9196, i__9188_9198);
          var k_9200 = cljs.core.nth.call(null, vec__9189_9199, 0, null);
          var v_9201 = cljs.core.nth.call(null, vec__9189_9199, 1, null);
          enfocus.core.add_map_attrs.call(null, elem, k_9200, v_9201);
          var G__9202 = seq__9185_9195;
          var G__9203 = chunk__9186_9196;
          var G__9204 = count__9187_9197;
          var G__9205 = i__9188_9198 + 1;
          seq__9185_9195 = G__9202;
          chunk__9186_9196 = G__9203;
          count__9187_9197 = G__9204;
          i__9188_9198 = G__9205;
          continue;
        } else {
          var temp__4425__auto___9206 = cljs.core.seq.call(null, seq__9185_9195);
          if (temp__4425__auto___9206) {
            var seq__9185_9207__$1 = temp__4425__auto___9206;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9185_9207__$1)) {
              var c__7004__auto___9208 = cljs.core.chunk_first.call(null, seq__9185_9207__$1);
              var G__9209 = cljs.core.chunk_rest.call(null, seq__9185_9207__$1);
              var G__9210 = c__7004__auto___9208;
              var G__9211 = cljs.core.count.call(null, c__7004__auto___9208);
              var G__9212 = 0;
              seq__9185_9195 = G__9209;
              chunk__9186_9196 = G__9210;
              count__9187_9197 = G__9211;
              i__9188_9198 = G__9212;
              continue;
            } else {
              var vec__9190_9213 = cljs.core.first.call(null, seq__9185_9207__$1);
              var k_9214 = cljs.core.nth.call(null, vec__9190_9213, 0, null);
              var v_9215 = cljs.core.nth.call(null, vec__9190_9213, 1, null);
              enfocus.core.add_map_attrs.call(null, elem, k_9214, v_9215);
              var G__9216 = cljs.core.next.call(null, seq__9185_9207__$1);
              var G__9217 = null;
              var G__9218 = 0;
              var G__9219 = 0;
              seq__9185_9195 = G__9216;
              chunk__9186_9196 = G__9217;
              count__9187_9197 = G__9218;
              i__9188_9198 = G__9219;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem;
    } else {
      return null;
    }
  } else {
    return null;
  }
};
enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$3 = function(elem, k, v) {
  elem.setAttribute(cljs.core.name.call(null, k), v);
  return elem;
};
enfocus.core.add_map_attrs.cljs$lang$maxFixedArity = 3;
enfocus.core.tpl_load_cnt = cljs.core.atom.call(null, 0);
enfocus.core.tpl_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.hide_style = (new cljs.core.PersistentArrayMap(null, 1, ["style", "display: none; width: 0px; height: 0px"], null)).strobj;
enfocus.core.create_hidden_dom = function enfocus$core$create_hidden_dom(child) {
  var div = goog.dom.createDom("div", enfocus.core.hide_style);
  if (cljs.core._EQ_.call(null, child.nodeType, 11)) {
    goog.dom.appendChild(div, child);
  } else {
    enfocus.core.log_debug.call(null, cljs.core.count.call(null, domina.nodes.call(null, child)));
    var seq__9224_9228 = cljs.core.seq.call(null, domina.nodes.call(null, child));
    var chunk__9225_9229 = null;
    var count__9226_9230 = 0;
    var i__9227_9231 = 0;
    while (true) {
      if (i__9227_9231 < count__9226_9230) {
        var node_9232 = cljs.core._nth.call(null, chunk__9225_9229, i__9227_9231);
        goog.dom.appendChild(div, node_9232);
        var G__9233 = seq__9224_9228;
        var G__9234 = chunk__9225_9229;
        var G__9235 = count__9226_9230;
        var G__9236 = i__9227_9231 + 1;
        seq__9224_9228 = G__9233;
        chunk__9225_9229 = G__9234;
        count__9226_9230 = G__9235;
        i__9227_9231 = G__9236;
        continue;
      } else {
        var temp__4425__auto___9237 = cljs.core.seq.call(null, seq__9224_9228);
        if (temp__4425__auto___9237) {
          var seq__9224_9238__$1 = temp__4425__auto___9237;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9224_9238__$1)) {
            var c__7004__auto___9239 = cljs.core.chunk_first.call(null, seq__9224_9238__$1);
            var G__9240 = cljs.core.chunk_rest.call(null, seq__9224_9238__$1);
            var G__9241 = c__7004__auto___9239;
            var G__9242 = cljs.core.count.call(null, c__7004__auto___9239);
            var G__9243 = 0;
            seq__9224_9228 = G__9240;
            chunk__9225_9229 = G__9241;
            count__9226_9230 = G__9242;
            i__9227_9231 = G__9243;
            continue;
          } else {
            var node_9244 = cljs.core.first.call(null, seq__9224_9238__$1);
            goog.dom.appendChild(div, node_9244);
            var G__9245 = cljs.core.next.call(null, seq__9224_9238__$1);
            var G__9246 = null;
            var G__9247 = 0;
            var G__9248 = 0;
            seq__9224_9228 = G__9245;
            chunk__9225_9229 = G__9246;
            count__9226_9230 = G__9247;
            i__9227_9231 = G__9248;
            continue;
          }
        } else {
        }
      }
      break;
    }
  }
  goog.dom.appendChild(goog.dom.getDocument().documentElement, div);
  return div;
};
enfocus.core.remove_node_return_child = function enfocus$core$remove_node_return_child(div) {
  var child = div.childNodes;
  var frag = document.createDocumentFragment();
  goog.dom.append(frag, child);
  goog.dom.removeNode(div);
  return frag;
};
enfocus.core.last_element_child = function enfocus$core$last_element_child(node) {
  return goog.dom.getLastElementChild(node);
};
enfocus.core.replace_ids = function enfocus$core$replace_ids(var_args) {
  var args9249 = [];
  var len__7263__auto___9252 = arguments.length;
  var i__7264__auto___9253 = 0;
  while (true) {
    if (i__7264__auto___9253 < len__7263__auto___9252) {
      args9249.push(arguments[i__7264__auto___9253]);
      var G__9254 = i__7264__auto___9253 + 1;
      i__7264__auto___9253 = G__9254;
      continue;
    } else {
    }
    break;
  }
  var G__9251 = args9249.length;
  switch(G__9251) {
    case 1:
      return enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9249.length)].join(""));;
  }
};
enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$1 = function(text) {
  return enfocus.core.replace_ids.call(null, [cljs.core.str(cljs.core.name.call(null, cljs.core.gensym.call(null, "id"))), cljs.core.str("_")].join(""), text);
};
enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$2 = function(id_mask, text) {
  var re = new RegExp("(\x3c.*?\\sid\x3d['\"])(.*?)(['\"].*?\x3e)", "g");
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id_mask, text.replace(re, function(re) {
    return function(a, b, c, d) {
      return [cljs.core.str(b), cljs.core.str(id_mask), cljs.core.str(c), cljs.core.str(d)].join("");
    };
  }(re))], null);
};
enfocus.core.replace_ids.cljs$lang$maxFixedArity = 2;
enfocus.core.reset_ids = function enfocus$core$reset_ids(sym, nod) {
  var id_nodes = enfocus.core.css_select.call(null, nod, "*[id]");
  var nod_col = enfocus.core.nodes__GT_coll.call(null, id_nodes);
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(id_nodes, nod_col) {
    return function(p1__9256_SHARP_) {
      var id = p1__9256_SHARP_.getAttribute("id");
      var rid = id.replace(sym, "");
      return p1__9256_SHARP_.setAttribute("id", rid);
    };
  }(id_nodes, nod_col), nod_col));
};
enfocus.core.load_remote_dom = function enfocus$core$load_remote_dom(uri, dom_key, id_mask) {
  if (cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, dom_key) == null) {
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.inc);
    var req = new goog.net.XhrIo;
    var callback = function(req) {
      return function(req__$1) {
        var text = req__$1.getResponseText();
        var vec__9258 = enfocus.core.replace_ids.call(null, id_mask, text);
        var sym = cljs.core.nth.call(null, vec__9258, 0, null);
        var txt = cljs.core.nth.call(null, vec__9258, 1, null);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, dom_key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, txt], null));
      };
    }(req);
    goog.events.listen(req, goog.net.EventType.COMPLETE, function(req, callback) {
      return function() {
        callback.call(null, req);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.dec);
      };
    }(req, callback));
    return req.send(uri, "GET");
  } else {
    return null;
  }
};
enfocus.core.html_to_dom = function enfocus$core$html_to_dom(html) {
  var dfa = enfocus.core.nodes__GT_coll.call(null, domina.html_to_dom.call(null, html));
  var frag = document.createDocumentFragment();
  enfocus.core.log_debug.call(null, cljs.core.count.call(null, dfa));
  var seq__9263_9267 = cljs.core.seq.call(null, dfa);
  var chunk__9264_9268 = null;
  var count__9265_9269 = 0;
  var i__9266_9270 = 0;
  while (true) {
    if (i__9266_9270 < count__9265_9269) {
      var df_9271 = cljs.core._nth.call(null, chunk__9264_9268, i__9266_9270);
      goog.dom.append(frag, df_9271);
      var G__9272 = seq__9263_9267;
      var G__9273 = chunk__9264_9268;
      var G__9274 = count__9265_9269;
      var G__9275 = i__9266_9270 + 1;
      seq__9263_9267 = G__9272;
      chunk__9264_9268 = G__9273;
      count__9265_9269 = G__9274;
      i__9266_9270 = G__9275;
      continue;
    } else {
      var temp__4425__auto___9276 = cljs.core.seq.call(null, seq__9263_9267);
      if (temp__4425__auto___9276) {
        var seq__9263_9277__$1 = temp__4425__auto___9276;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9263_9277__$1)) {
          var c__7004__auto___9278 = cljs.core.chunk_first.call(null, seq__9263_9277__$1);
          var G__9279 = cljs.core.chunk_rest.call(null, seq__9263_9277__$1);
          var G__9280 = c__7004__auto___9278;
          var G__9281 = cljs.core.count.call(null, c__7004__auto___9278);
          var G__9282 = 0;
          seq__9263_9267 = G__9279;
          chunk__9264_9268 = G__9280;
          count__9265_9269 = G__9281;
          i__9266_9270 = G__9282;
          continue;
        } else {
          var df_9283 = cljs.core.first.call(null, seq__9263_9277__$1);
          goog.dom.append(frag, df_9283);
          var G__9284 = cljs.core.next.call(null, seq__9263_9277__$1);
          var G__9285 = null;
          var G__9286 = 0;
          var G__9287 = 0;
          seq__9263_9267 = G__9284;
          chunk__9264_9268 = G__9285;
          count__9265_9269 = G__9286;
          i__9266_9270 = G__9287;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return frag;
};
enfocus.core.get_cached_dom = function enfocus$core$get_cached_dom(uri) {
  var nod = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, uri);
  if (cljs.core.truth_(nod)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, nod), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, nod))], null);
  } else {
    return null;
  }
};
enfocus.core.get_cached_snippet = function enfocus$core$get_cached_snippet(uri, sel) {
  var sel_str = enfocus.core.create_sel_str.call(null, sel);
  var cache = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""));
  if (cljs.core.truth_(cache)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, cache), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, cache))], null);
  } else {
    var vec__9290 = enfocus.core.get_cached_dom.call(null, uri);
    var sym = cljs.core.nth.call(null, vec__9290, 0, null);
    var tdom = cljs.core.nth.call(null, vec__9290, 1, null);
    var dom = enfocus.core.create_hidden_dom.call(null, tdom);
    var tsnip = domina.nodes.call(null, enfocus.core.css_select.call(null, sym, dom, sel));
    var html_snip = cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(vec__9290, sym, tdom, dom, tsnip, sel_str, cache) {
      return function(p1__9288_SHARP_) {
        return p1__9288_SHARP_.outerHTML;
      };
    }(vec__9290, sym, tdom, dom, tsnip, sel_str, cache), tsnip));
    enfocus.core.remove_node_return_child.call(null, dom);
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, html_snip], null));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, enfocus.core.html_to_dom.call(null, html_snip)], null);
  }
};
enfocus.core.extr_multi_node = function enfocus$core$extr_multi_node(var_args) {
  var args9291 = [];
  var len__7263__auto___9298 = arguments.length;
  var i__7264__auto___9299 = 0;
  while (true) {
    if (i__7264__auto___9299 < len__7263__auto___9298) {
      args9291.push(arguments[i__7264__auto___9299]);
      var G__9300 = i__7264__auto___9299 + 1;
      i__7264__auto___9299 = G__9300;
      continue;
    } else {
    }
    break;
  }
  var G__9293 = args9291.length;
  switch(G__9293) {
    case 1:
      return enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9291.length)].join(""));;
  }
};
enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$1 = function(func) {
  return enfocus.core.extr_multi_node.call(null, func, null);
};
enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$2 = function(func, filt) {
  var trans = function enfocus$core$trans(pnodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
    var result = cljs.core.map.call(null, func, pnod_col);
    var result__$1 = cljs.core.truth_(filt) ? cljs.core.filter.call(null, filt, result) : result;
    if (cljs.core.count.call(null, result__$1) <= 1) {
      return cljs.core.first.call(null, result__$1);
    } else {
      return result__$1;
    }
  };
  if (typeof enfocus.core.t_enfocus$core9294 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core9294 = function(func, filt, trans, meta9295) {
      this.func = func;
      this.filt = filt;
      this.trans = trans;
      this.meta9295 = meta9295;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core9294.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_9296, meta9295__$1) {
        var self__ = this;
        var _9296__$1 = this;
        return new enfocus.core.t_enfocus$core9294(self__.func, self__.filt, self__.trans, meta9295__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_9296) {
        var self__ = this;
        var _9296__$1 = this;
        return self__.meta9295;
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core9294.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.call = function(trans) {
      return function() {
        var G__9302 = null;
        var G__9302__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__9302__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__9302 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__9302__2.call(this, self__, nodes);
            case 3:
              return G__9302__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9302.cljs$core$IFn$_invoke$arity$2 = G__9302__2;
        G__9302.cljs$core$IFn$_invoke$arity$3 = G__9302__3;
        return G__9302;
      }();
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.apply = function(trans) {
      return function(self__, args9297) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9297)));
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "filt", "filt", 1809760609, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta9295", "meta9295", -430592647, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9294.cljs$lang$type = true;
    enfocus.core.t_enfocus$core9294.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core9294";
    enfocus.core.t_enfocus$core9294.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "enfocus.core/t_enfocus$core9294");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core9294 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core9294(func__$1, filt__$1, trans__$1, meta9295) {
        return new enfocus.core.t_enfocus$core9294(func__$1, filt__$1, trans__$1, meta9295);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core9294(func, filt, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.extr_multi_node.cljs$lang$maxFixedArity = 2;
enfocus.core.multi_node_chain = function enfocus$core$multi_node_chain(var_args) {
  var args9304 = [];
  var len__7263__auto___9315 = arguments.length;
  var i__7264__auto___9316 = 0;
  while (true) {
    if (i__7264__auto___9316 < len__7263__auto___9315) {
      args9304.push(arguments[i__7264__auto___9316]);
      var G__9317 = i__7264__auto___9316 + 1;
      i__7264__auto___9316 = G__9317;
      continue;
    } else {
    }
    break;
  }
  var G__9306 = args9304.length;
  switch(G__9306) {
    case 1:
      return enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9304.length)].join(""));;
  }
};
enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$1 = function(func) {
  var trans = function(nodes, chain) {
    var val = func.call(null, nodes);
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  if (typeof enfocus.core.t_enfocus$core9307 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core9307 = function(func, trans, meta9308) {
      this.func = func;
      this.trans = trans;
      this.meta9308 = meta9308;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core9307.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_9309, meta9308__$1) {
        var self__ = this;
        var _9309__$1 = this;
        return new enfocus.core.t_enfocus$core9307(self__.func, self__.trans, meta9308__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_9309) {
        var self__ = this;
        var _9309__$1 = this;
        return self__.meta9308;
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core9307.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.call = function(trans) {
      return function() {
        var G__9319 = null;
        var G__9319__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__9319__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__9319 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__9319__2.call(this, self__, nodes);
            case 3:
              return G__9319__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9319.cljs$core$IFn$_invoke$arity$2 = G__9319__2;
        G__9319.cljs$core$IFn$_invoke$arity$3 = G__9319__3;
        return G__9319;
      }();
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.apply = function(trans) {
      return function(self__, args9310) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9310)));
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta9308", "meta9308", -1489823097, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9307.cljs$lang$type = true;
    enfocus.core.t_enfocus$core9307.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core9307";
    enfocus.core.t_enfocus$core9307.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "enfocus.core/t_enfocus$core9307");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core9307 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core9307(func__$1, trans__$1, meta9308) {
        return new enfocus.core.t_enfocus$core9307(func__$1, trans__$1, meta9308);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core9307(func, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$2 = function(values, func) {
  var trans = function(nodes, chain) {
    var vnodes = cljs.core.mapcat.call(null, function(p1__9303_SHARP_) {
      return domina.nodes.call(null, p1__9303_SHARP_);
    }, values);
    var val = func.call(null, nodes, vnodes);
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  if (typeof enfocus.core.t_enfocus$core9311 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core9311 = function(values, func, trans, meta9312) {
      this.values = values;
      this.func = func;
      this.trans = trans;
      this.meta9312 = meta9312;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core9311.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_9313, meta9312__$1) {
        var self__ = this;
        var _9313__$1 = this;
        return new enfocus.core.t_enfocus$core9311(self__.values, self__.func, self__.trans, meta9312__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_9313) {
        var self__ = this;
        var _9313__$1 = this;
        return self__.meta9312;
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core9311.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.call = function(trans) {
      return function() {
        var G__9320 = null;
        var G__9320__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__9320__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__9320 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__9320__2.call(this, self__, nodes);
            case 3:
              return G__9320__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9320.cljs$core$IFn$_invoke$arity$2 = G__9320__2;
        G__9320.cljs$core$IFn$_invoke$arity$3 = G__9320__3;
        return G__9320;
      }();
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.apply = function(trans) {
      return function(self__, args9314) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9314)));
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "values", "values", 2013177083, null), new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta9312", "meta9312", -1935313428, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9311.cljs$lang$type = true;
    enfocus.core.t_enfocus$core9311.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core9311";
    enfocus.core.t_enfocus$core9311.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "enfocus.core/t_enfocus$core9311");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core9311 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core9311(values__$1, func__$1, trans__$1, meta9312) {
        return new enfocus.core.t_enfocus$core9311(values__$1, func__$1, trans__$1, meta9312);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core9311(values, func, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.multi_node_chain.cljs$lang$maxFixedArity = 2;
enfocus.core.content = function enfocus$core$content(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9324 = arguments.length;
  var i__7264__auto___9325 = 0;
  while (true) {
    if (i__7264__auto___9325 < len__7263__auto___9324) {
      args__7270__auto__.push(arguments[i__7264__auto___9325]);
      var G__9326 = i__7264__auto___9325 + 1;
      i__7264__auto___9325 = G__9326;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9321_SHARP_, p2__9322_SHARP_) {
    domina.destroy_children_BANG_.call(null, p1__9321_SHARP_);
    return domina.append_BANG_.call(null, p1__9321_SHARP_, p2__9322_SHARP_);
  });
};
enfocus.core.content.cljs$lang$maxFixedArity = 0;
enfocus.core.content.cljs$lang$applyTo = function(seq9323) {
  return enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9323));
};
enfocus.core.html_content = function enfocus$core$html_content(txt) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9327_SHARP_) {
    return domina.set_html_BANG_.call(null, p1__9327_SHARP_, txt);
  });
};
enfocus.core.set_attr = function enfocus$core$set_attr(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9336 = arguments.length;
  var i__7264__auto___9337 = 0;
  while (true) {
    if (i__7264__auto___9337 < len__7263__auto___9336) {
      args__7270__auto__.push(arguments[i__7264__auto___9337]);
      var G__9338 = i__7264__auto___9337 + 1;
      i__7264__auto___9337 = G__9338;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  var pairs = cljs.core.partition.call(null, 2, values);
  return enfocus.core.multi_node_chain.call(null, function(pairs) {
    return function(p1__9328_SHARP_) {
      var seq__9330 = cljs.core.seq.call(null, pairs);
      var chunk__9331 = null;
      var count__9332 = 0;
      var i__9333 = 0;
      while (true) {
        if (i__9333 < count__9332) {
          var vec__9334 = cljs.core._nth.call(null, chunk__9331, i__9333);
          var name = cljs.core.nth.call(null, vec__9334, 0, null);
          var value = cljs.core.nth.call(null, vec__9334, 1, null);
          domina.set_attr_BANG_.call(null, p1__9328_SHARP_, name, value);
          var G__9339 = seq__9330;
          var G__9340 = chunk__9331;
          var G__9341 = count__9332;
          var G__9342 = i__9333 + 1;
          seq__9330 = G__9339;
          chunk__9331 = G__9340;
          count__9332 = G__9341;
          i__9333 = G__9342;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__9330);
          if (temp__4425__auto__) {
            var seq__9330__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9330__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9330__$1);
              var G__9343 = cljs.core.chunk_rest.call(null, seq__9330__$1);
              var G__9344 = c__7004__auto__;
              var G__9345 = cljs.core.count.call(null, c__7004__auto__);
              var G__9346 = 0;
              seq__9330 = G__9343;
              chunk__9331 = G__9344;
              count__9332 = G__9345;
              i__9333 = G__9346;
              continue;
            } else {
              var vec__9335 = cljs.core.first.call(null, seq__9330__$1);
              var name = cljs.core.nth.call(null, vec__9335, 0, null);
              var value = cljs.core.nth.call(null, vec__9335, 1, null);
              domina.set_attr_BANG_.call(null, p1__9328_SHARP_, name, value);
              var G__9347 = cljs.core.next.call(null, seq__9330__$1);
              var G__9348 = null;
              var G__9349 = 0;
              var G__9350 = 0;
              seq__9330 = G__9347;
              chunk__9331 = G__9348;
              count__9332 = G__9349;
              i__9333 = G__9350;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(pairs));
};
enfocus.core.set_attr.cljs$lang$maxFixedArity = 0;
enfocus.core.set_attr.cljs$lang$applyTo = function(seq9329) {
  return enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9329));
};
enfocus.core.remove_attr = function enfocus$core$remove_attr(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9357 = arguments.length;
  var i__7264__auto___9358 = 0;
  while (true) {
    if (i__7264__auto___9358 < len__7263__auto___9357) {
      args__7270__auto__.push(arguments[i__7264__auto___9358]);
      var G__9359 = i__7264__auto___9358 + 1;
      i__7264__auto___9358 = G__9359;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9351_SHARP_) {
    var seq__9353 = cljs.core.seq.call(null, values);
    var chunk__9354 = null;
    var count__9355 = 0;
    var i__9356 = 0;
    while (true) {
      if (i__9356 < count__9355) {
        var name = cljs.core._nth.call(null, chunk__9354, i__9356);
        domina.remove_attr_BANG_.call(null, p1__9351_SHARP_, name);
        var G__9360 = seq__9353;
        var G__9361 = chunk__9354;
        var G__9362 = count__9355;
        var G__9363 = i__9356 + 1;
        seq__9353 = G__9360;
        chunk__9354 = G__9361;
        count__9355 = G__9362;
        i__9356 = G__9363;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__9353);
        if (temp__4425__auto__) {
          var seq__9353__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9353__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9353__$1);
            var G__9364 = cljs.core.chunk_rest.call(null, seq__9353__$1);
            var G__9365 = c__7004__auto__;
            var G__9366 = cljs.core.count.call(null, c__7004__auto__);
            var G__9367 = 0;
            seq__9353 = G__9364;
            chunk__9354 = G__9365;
            count__9355 = G__9366;
            i__9356 = G__9367;
            continue;
          } else {
            var name = cljs.core.first.call(null, seq__9353__$1);
            domina.remove_attr_BANG_.call(null, p1__9351_SHARP_, name);
            var G__9368 = cljs.core.next.call(null, seq__9353__$1);
            var G__9369 = null;
            var G__9370 = 0;
            var G__9371 = 0;
            seq__9353 = G__9368;
            chunk__9354 = G__9369;
            count__9355 = G__9370;
            i__9356 = G__9371;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.remove_attr.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_attr.cljs$lang$applyTo = function(seq9352) {
  return enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9352));
};
enfocus.core.set_prop = function enfocus$core$set_prop(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9375 = arguments.length;
  var i__7264__auto___9376 = 0;
  while (true) {
    if (i__7264__auto___9376 < len__7263__auto___9375) {
      args__7270__auto__.push(arguments[i__7264__auto___9376]);
      var G__9377 = i__7264__auto___9376 + 1;
      i__7264__auto___9376 = G__9377;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic = function(forms) {
  return function(node) {
    var h = cljs.core.mapcat.call(null, function(p__9373) {
      var vec__9374 = p__9373;
      var n = cljs.core.nth.call(null, vec__9374, 0, null);
      var v = cljs.core.nth.call(null, vec__9374, 1, null);
      var x__7027__auto__ = cljs.core.name.call(null, n);
      return cljs.core._conj.call(null, function() {
        var x__7027__auto____$1 = v;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
      }(), x__7027__auto__);
    }, cljs.core.partition.call(null, 2, forms));
    return goog.dom.setProperties(node, cljs.core.apply.call(null, cljs.core.js_obj, h));
  };
};
enfocus.core.set_prop.cljs$lang$maxFixedArity = 0;
enfocus.core.set_prop.cljs$lang$applyTo = function(seq9372) {
  return enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9372));
};
enfocus.core.has_class = function enfocus$core$has_class(el, cls) {
  return goog.dom.classes.hasClass(el, cls);
};
enfocus.core.add_class = function enfocus$core$add_class(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9384 = arguments.length;
  var i__7264__auto___9385 = 0;
  while (true) {
    if (i__7264__auto___9385 < len__7263__auto___9384) {
      args__7270__auto__.push(arguments[i__7264__auto___9385]);
      var G__9386 = i__7264__auto___9385 + 1;
      i__7264__auto___9385 = G__9386;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9378_SHARP_) {
    var seq__9380 = cljs.core.seq.call(null, values);
    var chunk__9381 = null;
    var count__9382 = 0;
    var i__9383 = 0;
    while (true) {
      if (i__9383 < count__9382) {
        var val = cljs.core._nth.call(null, chunk__9381, i__9383);
        domina.add_class_BANG_.call(null, p1__9378_SHARP_, val);
        var G__9387 = seq__9380;
        var G__9388 = chunk__9381;
        var G__9389 = count__9382;
        var G__9390 = i__9383 + 1;
        seq__9380 = G__9387;
        chunk__9381 = G__9388;
        count__9382 = G__9389;
        i__9383 = G__9390;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__9380);
        if (temp__4425__auto__) {
          var seq__9380__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9380__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9380__$1);
            var G__9391 = cljs.core.chunk_rest.call(null, seq__9380__$1);
            var G__9392 = c__7004__auto__;
            var G__9393 = cljs.core.count.call(null, c__7004__auto__);
            var G__9394 = 0;
            seq__9380 = G__9391;
            chunk__9381 = G__9392;
            count__9382 = G__9393;
            i__9383 = G__9394;
            continue;
          } else {
            var val = cljs.core.first.call(null, seq__9380__$1);
            domina.add_class_BANG_.call(null, p1__9378_SHARP_, val);
            var G__9395 = cljs.core.next.call(null, seq__9380__$1);
            var G__9396 = null;
            var G__9397 = 0;
            var G__9398 = 0;
            seq__9380 = G__9395;
            chunk__9381 = G__9396;
            count__9382 = G__9397;
            i__9383 = G__9398;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.add_class.cljs$lang$maxFixedArity = 0;
enfocus.core.add_class.cljs$lang$applyTo = function(seq9379) {
  return enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9379));
};
enfocus.core.remove_class = function enfocus$core$remove_class(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9405 = arguments.length;
  var i__7264__auto___9406 = 0;
  while (true) {
    if (i__7264__auto___9406 < len__7263__auto___9405) {
      args__7270__auto__.push(arguments[i__7264__auto___9406]);
      var G__9407 = i__7264__auto___9406 + 1;
      i__7264__auto___9406 = G__9407;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9399_SHARP_) {
    var seq__9401 = cljs.core.seq.call(null, values);
    var chunk__9402 = null;
    var count__9403 = 0;
    var i__9404 = 0;
    while (true) {
      if (i__9404 < count__9403) {
        var val = cljs.core._nth.call(null, chunk__9402, i__9404);
        domina.remove_class_BANG_.call(null, p1__9399_SHARP_, val);
        var G__9408 = seq__9401;
        var G__9409 = chunk__9402;
        var G__9410 = count__9403;
        var G__9411 = i__9404 + 1;
        seq__9401 = G__9408;
        chunk__9402 = G__9409;
        count__9403 = G__9410;
        i__9404 = G__9411;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__9401);
        if (temp__4425__auto__) {
          var seq__9401__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9401__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9401__$1);
            var G__9412 = cljs.core.chunk_rest.call(null, seq__9401__$1);
            var G__9413 = c__7004__auto__;
            var G__9414 = cljs.core.count.call(null, c__7004__auto__);
            var G__9415 = 0;
            seq__9401 = G__9412;
            chunk__9402 = G__9413;
            count__9403 = G__9414;
            i__9404 = G__9415;
            continue;
          } else {
            var val = cljs.core.first.call(null, seq__9401__$1);
            domina.remove_class_BANG_.call(null, p1__9399_SHARP_, val);
            var G__9416 = cljs.core.next.call(null, seq__9401__$1);
            var G__9417 = null;
            var G__9418 = 0;
            var G__9419 = 0;
            seq__9401 = G__9416;
            chunk__9402 = G__9417;
            count__9403 = G__9418;
            i__9404 = G__9419;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.remove_class.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_class.cljs$lang$applyTo = function(seq9400) {
  return enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9400));
};
enfocus.core.set_class = function enfocus$core$set_class(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9422 = arguments.length;
  var i__7264__auto___9423 = 0;
  while (true) {
    if (i__7264__auto___9423 < len__7263__auto___9422) {
      args__7270__auto__.push(arguments[i__7264__auto___9423]);
      var G__9424 = i__7264__auto___9423 + 1;
      i__7264__auto___9423 = G__9424;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9420_SHARP_) {
    return domina.set_classes_BANG_.call(null, p1__9420_SHARP_, values);
  });
};
enfocus.core.set_class.cljs$lang$maxFixedArity = 0;
enfocus.core.set_class.cljs$lang$applyTo = function(seq9421) {
  return enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9421));
};
enfocus.core.do__GT_ = function enfocus$core$do__GT_(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9430 = arguments.length;
  var i__7264__auto___9431 = 0;
  while (true) {
    if (i__7264__auto___9431 < len__7263__auto___9430) {
      args__7270__auto__.push(arguments[i__7264__auto___9431]);
      var G__9432 = i__7264__auto___9431 + 1;
      i__7264__auto___9431 = G__9432;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic = function(forms) {
  return function(pnod) {
    var seq__9426 = cljs.core.seq.call(null, forms);
    var chunk__9427 = null;
    var count__9428 = 0;
    var i__9429 = 0;
    while (true) {
      if (i__9429 < count__9428) {
        var fun = cljs.core._nth.call(null, chunk__9427, i__9429);
        enfocus.core.apply_transform.call(null, fun, pnod);
        var G__9433 = seq__9426;
        var G__9434 = chunk__9427;
        var G__9435 = count__9428;
        var G__9436 = i__9429 + 1;
        seq__9426 = G__9433;
        chunk__9427 = G__9434;
        count__9428 = G__9435;
        i__9429 = G__9436;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__9426);
        if (temp__4425__auto__) {
          var seq__9426__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9426__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9426__$1);
            var G__9437 = cljs.core.chunk_rest.call(null, seq__9426__$1);
            var G__9438 = c__7004__auto__;
            var G__9439 = cljs.core.count.call(null, c__7004__auto__);
            var G__9440 = 0;
            seq__9426 = G__9437;
            chunk__9427 = G__9438;
            count__9428 = G__9439;
            i__9429 = G__9440;
            continue;
          } else {
            var fun = cljs.core.first.call(null, seq__9426__$1);
            enfocus.core.apply_transform.call(null, fun, pnod);
            var G__9441 = cljs.core.next.call(null, seq__9426__$1);
            var G__9442 = null;
            var G__9443 = 0;
            var G__9444 = 0;
            seq__9426 = G__9441;
            chunk__9427 = G__9442;
            count__9428 = G__9443;
            i__9429 = G__9444;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
};
enfocus.core.do__GT_.cljs$lang$maxFixedArity = 0;
enfocus.core.do__GT_.cljs$lang$applyTo = function(seq9425) {
  return enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9425));
};
enfocus.core.append = function enfocus$core$append(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9448 = arguments.length;
  var i__7264__auto___9449 = 0;
  while (true) {
    if (i__7264__auto___9449 < len__7263__auto___9448) {
      args__7270__auto__.push(arguments[i__7264__auto___9449]);
      var G__9450 = i__7264__auto___9449 + 1;
      i__7264__auto___9449 = G__9450;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9445_SHARP_, p2__9446_SHARP_) {
    return domina.append_BANG_.call(null, p1__9445_SHARP_, p2__9446_SHARP_);
  });
};
enfocus.core.append.cljs$lang$maxFixedArity = 0;
enfocus.core.append.cljs$lang$applyTo = function(seq9447) {
  return enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9447));
};
enfocus.core.prepend = function enfocus$core$prepend(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9454 = arguments.length;
  var i__7264__auto___9455 = 0;
  while (true) {
    if (i__7264__auto___9455 < len__7263__auto___9454) {
      args__7270__auto__.push(arguments[i__7264__auto___9455]);
      var G__9456 = i__7264__auto___9455 + 1;
      i__7264__auto___9455 = G__9456;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9451_SHARP_, p2__9452_SHARP_) {
    return domina.prepend_BANG_.call(null, p1__9451_SHARP_, p2__9452_SHARP_);
  });
};
enfocus.core.prepend.cljs$lang$maxFixedArity = 0;
enfocus.core.prepend.cljs$lang$applyTo = function(seq9453) {
  return enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9453));
};
enfocus.core.before = function enfocus$core$before(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9460 = arguments.length;
  var i__7264__auto___9461 = 0;
  while (true) {
    if (i__7264__auto___9461 < len__7263__auto___9460) {
      args__7270__auto__.push(arguments[i__7264__auto___9461]);
      var G__9462 = i__7264__auto___9461 + 1;
      i__7264__auto___9461 = G__9462;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9457_SHARP_, p2__9458_SHARP_) {
    return domina.insert_before_BANG_.call(null, p1__9457_SHARP_, p2__9458_SHARP_);
  });
};
enfocus.core.before.cljs$lang$maxFixedArity = 0;
enfocus.core.before.cljs$lang$applyTo = function(seq9459) {
  return enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9459));
};
enfocus.core.after = function enfocus$core$after(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9466 = arguments.length;
  var i__7264__auto___9467 = 0;
  while (true) {
    if (i__7264__auto___9467 < len__7263__auto___9466) {
      args__7270__auto__.push(arguments[i__7264__auto___9467]);
      var G__9468 = i__7264__auto___9467 + 1;
      i__7264__auto___9467 = G__9468;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9463_SHARP_, p2__9464_SHARP_) {
    return domina.insert_after_BANG_.call(null, p1__9463_SHARP_, p2__9464_SHARP_);
  });
};
enfocus.core.after.cljs$lang$maxFixedArity = 0;
enfocus.core.after.cljs$lang$applyTo = function(seq9465) {
  return enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9465));
};
enfocus.core.substitute = function enfocus$core$substitute(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9472 = arguments.length;
  var i__7264__auto___9473 = 0;
  while (true) {
    if (i__7264__auto___9473 < len__7263__auto___9472) {
      args__7270__auto__.push(arguments[i__7264__auto___9473]);
      var G__9474 = i__7264__auto___9473 + 1;
      i__7264__auto___9473 = G__9474;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__9469_SHARP_, p2__9470_SHARP_) {
    return domina.swap_content_BANG_.call(null, p1__9469_SHARP_, p2__9470_SHARP_);
  });
};
enfocus.core.substitute.cljs$lang$maxFixedArity = 0;
enfocus.core.substitute.cljs$lang$applyTo = function(seq9471) {
  return enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9471));
};
enfocus.core.remove_node = function enfocus$core$remove_node() {
  return enfocus.core.multi_node_chain.call(null, function(p1__9475_SHARP_) {
    return domina.detach_BANG_.call(null, p1__9475_SHARP_);
  });
};
enfocus.core.wrap = function enfocus$core$wrap(elm, mattr) {
  return function(pnod) {
    var elem = goog.dom.createElement(cljs.core.name.call(null, elm));
    enfocus.core.add_map_attrs.call(null, elem, mattr);
    enfocus.core.at.call(null, elem, enfocus.core.content.call(null, pnod.cloneNode(true)));
    return enfocus.core.at.call(null, pnod, enfocus.core.do__GT_.call(null, enfocus.core.after.call(null, elem), enfocus.core.remove_node.call(null)));
  };
};
enfocus.core.unwrap = function enfocus$core$unwrap() {
  return function(pnod) {
    var frag = document.createDocumentFragment();
    goog.dom.append(frag, pnod.childNodes);
    return goog.dom.replaceNode(frag, pnod);
  };
};
enfocus.core.set_style = function enfocus$core$set_style(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9484 = arguments.length;
  var i__7264__auto___9485 = 0;
  while (true) {
    if (i__7264__auto___9485 < len__7263__auto___9484) {
      args__7270__auto__.push(arguments[i__7264__auto___9485]);
      var G__9486 = i__7264__auto___9485 + 1;
      i__7264__auto___9485 = G__9486;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  var pairs = cljs.core.partition.call(null, 2, values);
  return enfocus.core.multi_node_chain.call(null, function(pairs) {
    return function(p1__9476_SHARP_) {
      var seq__9478 = cljs.core.seq.call(null, pairs);
      var chunk__9479 = null;
      var count__9480 = 0;
      var i__9481 = 0;
      while (true) {
        if (i__9481 < count__9480) {
          var vec__9482 = cljs.core._nth.call(null, chunk__9479, i__9481);
          var name = cljs.core.nth.call(null, vec__9482, 0, null);
          var value = cljs.core.nth.call(null, vec__9482, 1, null);
          domina.set_style_BANG_.call(null, p1__9476_SHARP_, name, value);
          var G__9487 = seq__9478;
          var G__9488 = chunk__9479;
          var G__9489 = count__9480;
          var G__9490 = i__9481 + 1;
          seq__9478 = G__9487;
          chunk__9479 = G__9488;
          count__9480 = G__9489;
          i__9481 = G__9490;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__9478);
          if (temp__4425__auto__) {
            var seq__9478__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9478__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9478__$1);
              var G__9491 = cljs.core.chunk_rest.call(null, seq__9478__$1);
              var G__9492 = c__7004__auto__;
              var G__9493 = cljs.core.count.call(null, c__7004__auto__);
              var G__9494 = 0;
              seq__9478 = G__9491;
              chunk__9479 = G__9492;
              count__9480 = G__9493;
              i__9481 = G__9494;
              continue;
            } else {
              var vec__9483 = cljs.core.first.call(null, seq__9478__$1);
              var name = cljs.core.nth.call(null, vec__9483, 0, null);
              var value = cljs.core.nth.call(null, vec__9483, 1, null);
              domina.set_style_BANG_.call(null, p1__9476_SHARP_, name, value);
              var G__9495 = cljs.core.next.call(null, seq__9478__$1);
              var G__9496 = null;
              var G__9497 = 0;
              var G__9498 = 0;
              seq__9478 = G__9495;
              chunk__9479 = G__9496;
              count__9480 = G__9497;
              i__9481 = G__9498;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(pairs));
};
enfocus.core.set_style.cljs$lang$maxFixedArity = 0;
enfocus.core.set_style.cljs$lang$applyTo = function(seq9477) {
  return enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9477));
};
enfocus.core.remove_style = function enfocus$core$remove_style(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9500 = arguments.length;
  var i__7264__auto___9501 = 0;
  while (true) {
    if (i__7264__auto___9501 < len__7263__auto___9500) {
      args__7270__auto__.push(arguments[i__7264__auto___9501]);
      var G__9502 = i__7264__auto___9501 + 1;
      i__7264__auto___9501 = G__9502;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return function(pnod) {
    return enfocus.core.style_remove.call(null, pnod, values);
  };
};
enfocus.core.remove_style.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_style.cljs$lang$applyTo = function(seq9499) {
  return enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9499));
};
enfocus.core.focus = function enfocus$core$focus() {
  return function(node) {
    return node.focus();
  };
};
enfocus.core.blur = function enfocus$core$blur() {
  return function(node) {
    return node.blur();
  };
};
enfocus.core.set_data = function enfocus$core$set_data(ky, val) {
  return enfocus.core.multi_node_chain.call(null, function(p1__9503_SHARP_) {
    return domina.set_data_BANG_.call(null, p1__9503_SHARP_, ky, val);
  });
};
enfocus.core.delay = function enfocus$core$delay(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9506 = arguments.length;
  var i__7264__auto___9507 = 0;
  while (true) {
    if (i__7264__auto___9507 < len__7263__auto___9506) {
      args__7270__auto__.push(arguments[i__7264__auto___9507]);
      var G__9508 = i__7264__auto___9507 + 1;
      i__7264__auto___9507 = G__9508;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic = function(ttime, funcs) {
  return function(pnod) {
    return enfocus.core.setTimeout.call(null, function() {
      return cljs.core.apply.call(null, enfocus.core.at, pnod, funcs);
    }, ttime);
  };
};
enfocus.core.delay.cljs$lang$maxFixedArity = 1;
enfocus.core.delay.cljs$lang$applyTo = function(seq9504) {
  var G__9505 = cljs.core.first.call(null, seq9504);
  var seq9504__$1 = cljs.core.next.call(null, seq9504);
  return enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic(G__9505, seq9504__$1);
};
enfocus.core.replace_vars = function enfocus$core$replace_vars(vars) {
  var rep_str = function enfocus$core$replace_vars_$_rep_str(text) {
    return clojure.string.replace.call(null, text, /\$\{\s*(\S+)\s*}/, function(p1__9510_SHARP_, p2__9509_SHARP_) {
      return vars.call(null, cljs.core.keyword.call(null, p2__9509_SHARP_));
    });
  };
  return function enfocus$core$replace_vars_$_rep_node(pnod) {
    if (cljs.core.truth_(pnod.attributes)) {
      var seq__9535_9543 = cljs.core.seq.call(null, cljs.core.range.call(null, pnod.attributes.length));
      var chunk__9536_9544 = null;
      var count__9537_9545 = 0;
      var i__9538_9546 = 0;
      while (true) {
        if (i__9538_9546 < count__9537_9545) {
          var idx_9547 = cljs.core._nth.call(null, chunk__9536_9544, i__9538_9546);
          var attr_9548 = pnod.attributes.item(idx_9547);
          if (cljs.core.truth_(attr_9548.specified)) {
            attr_9548.value = rep_str.call(null, attr_9548.value);
          } else {
          }
          var G__9549 = seq__9535_9543;
          var G__9550 = chunk__9536_9544;
          var G__9551 = count__9537_9545;
          var G__9552 = i__9538_9546 + 1;
          seq__9535_9543 = G__9549;
          chunk__9536_9544 = G__9550;
          count__9537_9545 = G__9551;
          i__9538_9546 = G__9552;
          continue;
        } else {
          var temp__4425__auto___9553 = cljs.core.seq.call(null, seq__9535_9543);
          if (temp__4425__auto___9553) {
            var seq__9535_9554__$1 = temp__4425__auto___9553;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9535_9554__$1)) {
              var c__7004__auto___9555 = cljs.core.chunk_first.call(null, seq__9535_9554__$1);
              var G__9556 = cljs.core.chunk_rest.call(null, seq__9535_9554__$1);
              var G__9557 = c__7004__auto___9555;
              var G__9558 = cljs.core.count.call(null, c__7004__auto___9555);
              var G__9559 = 0;
              seq__9535_9543 = G__9556;
              chunk__9536_9544 = G__9557;
              count__9537_9545 = G__9558;
              i__9538_9546 = G__9559;
              continue;
            } else {
              var idx_9560 = cljs.core.first.call(null, seq__9535_9554__$1);
              var attr_9561 = pnod.attributes.item(idx_9560);
              if (cljs.core.truth_(attr_9561.specified)) {
                attr_9561.value = rep_str.call(null, attr_9561.value);
              } else {
              }
              var G__9562 = cljs.core.next.call(null, seq__9535_9554__$1);
              var G__9563 = null;
              var G__9564 = 0;
              var G__9565 = 0;
              seq__9535_9543 = G__9562;
              chunk__9536_9544 = G__9563;
              count__9537_9545 = G__9564;
              i__9538_9546 = G__9565;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
    }
    if (cljs.core._EQ_.call(null, pnod.nodeType, 3)) {
      return pnod.nodeValue = rep_str.call(null, pnod.nodeValue);
    } else {
      var seq__9539 = cljs.core.seq.call(null, enfocus.core.nodes__GT_coll.call(null, pnod.childNodes));
      var chunk__9540 = null;
      var count__9541 = 0;
      var i__9542 = 0;
      while (true) {
        if (i__9542 < count__9541) {
          var cnode = cljs.core._nth.call(null, chunk__9540, i__9542);
          enfocus$core$replace_vars_$_rep_node.call(null, cnode);
          var G__9566 = seq__9539;
          var G__9567 = chunk__9540;
          var G__9568 = count__9541;
          var G__9569 = i__9542 + 1;
          seq__9539 = G__9566;
          chunk__9540 = G__9567;
          count__9541 = G__9568;
          i__9542 = G__9569;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__9539);
          if (temp__4425__auto__) {
            var seq__9539__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9539__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9539__$1);
              var G__9570 = cljs.core.chunk_rest.call(null, seq__9539__$1);
              var G__9571 = c__7004__auto__;
              var G__9572 = cljs.core.count.call(null, c__7004__auto__);
              var G__9573 = 0;
              seq__9539 = G__9570;
              chunk__9540 = G__9571;
              count__9541 = G__9572;
              i__9542 = G__9573;
              continue;
            } else {
              var cnode = cljs.core.first.call(null, seq__9539__$1);
              enfocus$core$replace_vars_$_rep_node.call(null, cnode);
              var G__9574 = cljs.core.next.call(null, seq__9539__$1);
              var G__9575 = null;
              var G__9576 = 0;
              var G__9577 = 0;
              seq__9539 = G__9574;
              chunk__9540 = G__9575;
              count__9541 = G__9576;
              i__9542 = G__9577;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }
  };
};
enfocus.core.exists_in_QMARK_ = function enfocus$core$exists_in_QMARK_(col_or_val, val) {
  if (cljs.core.coll_QMARK_.call(null, col_or_val)) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([val], true), col_or_val);
  } else {
    return cljs.core._EQ_.call(null, col_or_val, val);
  }
};
enfocus.core.set_form_input = function enfocus$core$set_form_input(val) {
  return function(el) {
    if (cljs.core._EQ_.call(null, el.type, "checkbox") || cljs.core._EQ_.call(null, el.type, "radio")) {
      return el.checked = enfocus.core.exists_in_QMARK_.call(null, val, el.value);
    } else {
      var nval = cljs.core.coll_QMARK_.call(null, val) && !(typeof val === "string") ? cljs.core.vec.call(null, val) : cljs.core._EQ_.call(null, el.type, "select-multiple") ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [val], null) : val;
      return goog.dom.forms.setValue(el, cljs.core.clj__GT_js.call(null, nval));
    }
  };
};
enfocus.core.set_form = function enfocus$core$set_form(value_map) {
  return function(form_node) {
    if (cljs.core._EQ_.call(null, form_node.nodeName, "FORM")) {
      var seq__9582 = cljs.core.seq.call(null, cljs.core.range.call(null, form_node.length));
      var chunk__9583 = null;
      var count__9584 = 0;
      var i__9585 = 0;
      while (true) {
        if (i__9585 < count__9584) {
          var idx = cljs.core._nth.call(null, chunk__9583, i__9585);
          var el_9586 = form_node.elements[idx];
          var ky_9587 = cljs.core.keyword.call(null, el_9586.name);
          var val_9588 = ky_9587.call(null, value_map);
          if (cljs.core.contains_QMARK_.call(null, value_map, ky_9587)) {
            var val_9589__$1 = cljs.core.truth_(val_9588) ? val_9588 : "";
            enfocus.core.set_form_input.call(null, val_9589__$1).call(null, el_9586);
          } else {
          }
          var G__9590 = seq__9582;
          var G__9591 = chunk__9583;
          var G__9592 = count__9584;
          var G__9593 = i__9585 + 1;
          seq__9582 = G__9590;
          chunk__9583 = G__9591;
          count__9584 = G__9592;
          i__9585 = G__9593;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__9582);
          if (temp__4425__auto__) {
            var seq__9582__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9582__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9582__$1);
              var G__9594 = cljs.core.chunk_rest.call(null, seq__9582__$1);
              var G__9595 = c__7004__auto__;
              var G__9596 = cljs.core.count.call(null, c__7004__auto__);
              var G__9597 = 0;
              seq__9582 = G__9594;
              chunk__9583 = G__9595;
              count__9584 = G__9596;
              i__9585 = G__9597;
              continue;
            } else {
              var idx = cljs.core.first.call(null, seq__9582__$1);
              var el_9598 = form_node.elements[idx];
              var ky_9599 = cljs.core.keyword.call(null, el_9598.name);
              var val_9600 = ky_9599.call(null, value_map);
              if (cljs.core.contains_QMARK_.call(null, value_map, ky_9599)) {
                var val_9601__$1 = cljs.core.truth_(val_9600) ? val_9600 : "";
                enfocus.core.set_form_input.call(null, val_9601__$1).call(null, el_9598);
              } else {
              }
              var G__9602 = cljs.core.next.call(null, seq__9582__$1);
              var G__9603 = null;
              var G__9604 = 0;
              var G__9605 = 0;
              seq__9582 = G__9602;
              chunk__9583 = G__9603;
              count__9584 = G__9604;
              i__9585 = G__9605;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  };
};
enfocus.core.html = function enfocus$core$html(node_spec) {
  if (typeof node_spec === "string") {
    return document.createTextNode(node_spec);
  } else {
    if (cljs.core.vector_QMARK_.call(null, node_spec)) {
      var vec__9615 = node_spec;
      var tag = cljs.core.nth.call(null, vec__9615, 0, null);
      var vec__9616 = cljs.core.nthnext.call(null, vec__9615, 1);
      var m = cljs.core.nth.call(null, vec__9616, 0, null);
      var ms = cljs.core.nthnext.call(null, vec__9616, 1);
      var more = vec__9616;
      var vec__9617 = cljs.core.name.call(null, tag).split(/(?=[#.])/);
      var tag_name = cljs.core.nth.call(null, vec__9617, 0, null);
      var segments = cljs.core.nthnext.call(null, vec__9617, 1);
      var id = cljs.core.some.call(null, function(vec__9615, tag, vec__9616, m, ms, more, vec__9617, tag_name, segments) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, "#", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__9615, tag, vec__9616, m, ms, more, vec__9617, tag_name, segments), segments);
      var classes = cljs.core.keep.call(null, function(vec__9615, tag, vec__9616, m, ms, more, vec__9617, tag_name, segments, id) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, ".", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__9615, tag, vec__9616, m, ms, more, vec__9617, tag_name, segments, id), segments);
      var attrs = cljs.core.map_QMARK_.call(null, m) ? m : cljs.core.PersistentArrayMap.EMPTY;
      var attrs__$1 = cljs.core.truth_(id) ? cljs.core.assoc.call(null, attrs, new cljs.core.Keyword(null, "id", "id", -1388402092), id) : attrs;
      var attrs__$2 = !cljs.core.empty_QMARK_.call(null, classes) ? cljs.core.assoc.call(null, attrs__$1, new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", classes))) : attrs__$1;
      var content = cljs.core.flatten.call(null, cljs.core.map.call(null, enfocus$core$html, cljs.core.map_QMARK_.call(null, m) ? ms : more));
      var node = document.createElement(tag_name);
      var seq__9618_9624 = cljs.core.seq.call(null, attrs__$2);
      var chunk__9619_9625 = null;
      var count__9620_9626 = 0;
      var i__9621_9627 = 0;
      while (true) {
        if (i__9621_9627 < count__9620_9626) {
          var vec__9622_9628 = cljs.core._nth.call(null, chunk__9619_9625, i__9621_9627);
          var key_9629 = cljs.core.nth.call(null, vec__9622_9628, 0, null);
          var val_9630 = cljs.core.nth.call(null, vec__9622_9628, 1, null);
          node.setAttribute(cljs.core.name.call(null, key_9629), val_9630);
          var G__9631 = seq__9618_9624;
          var G__9632 = chunk__9619_9625;
          var G__9633 = count__9620_9626;
          var G__9634 = i__9621_9627 + 1;
          seq__9618_9624 = G__9631;
          chunk__9619_9625 = G__9632;
          count__9620_9626 = G__9633;
          i__9621_9627 = G__9634;
          continue;
        } else {
          var temp__4425__auto___9635 = cljs.core.seq.call(null, seq__9618_9624);
          if (temp__4425__auto___9635) {
            var seq__9618_9636__$1 = temp__4425__auto___9635;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9618_9636__$1)) {
              var c__7004__auto___9637 = cljs.core.chunk_first.call(null, seq__9618_9636__$1);
              var G__9638 = cljs.core.chunk_rest.call(null, seq__9618_9636__$1);
              var G__9639 = c__7004__auto___9637;
              var G__9640 = cljs.core.count.call(null, c__7004__auto___9637);
              var G__9641 = 0;
              seq__9618_9624 = G__9638;
              chunk__9619_9625 = G__9639;
              count__9620_9626 = G__9640;
              i__9621_9627 = G__9641;
              continue;
            } else {
              var vec__9623_9642 = cljs.core.first.call(null, seq__9618_9636__$1);
              var key_9643 = cljs.core.nth.call(null, vec__9623_9642, 0, null);
              var val_9644 = cljs.core.nth.call(null, vec__9623_9642, 1, null);
              node.setAttribute(cljs.core.name.call(null, key_9643), val_9644);
              var G__9645 = cljs.core.next.call(null, seq__9618_9636__$1);
              var G__9646 = null;
              var G__9647 = 0;
              var G__9648 = 0;
              seq__9618_9624 = G__9645;
              chunk__9619_9625 = G__9646;
              count__9620_9626 = G__9647;
              i__9621_9627 = G__9648;
              continue;
            }
          } else {
          }
        }
        break;
      }
      if (cljs.core.truth_(content)) {
        return domina.append_BANG_.call(null, node, content);
      } else {
        return null;
      }
    } else {
      if (cljs.core.sequential_QMARK_.call(null, node_spec)) {
        return cljs.core.flatten.call(null, cljs.core.map.call(null, enfocus$core$html, node_spec));
      } else {
        return document.createTextNode([cljs.core.str(node_spec)].join(""));
      }
    }
  }
};
enfocus.core.get_attr = function enfocus$core$get_attr(attr) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod.getAttribute(cljs.core.name.call(null, attr));
  });
};
enfocus.core.get_text = function enfocus$core$get_text() {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return goog.dom.getTextContent(pnod);
  });
};
enfocus.core.get_data = function enfocus$core$get_data(var_args) {
  var args9649 = [];
  var len__7263__auto___9652 = arguments.length;
  var i__7264__auto___9653 = 0;
  while (true) {
    if (i__7264__auto___9653 < len__7263__auto___9652) {
      args9649.push(arguments[i__7264__auto___9653]);
      var G__9654 = i__7264__auto___9653 + 1;
      i__7264__auto___9653 = G__9654;
      continue;
    } else {
    }
    break;
  }
  var G__9651 = args9649.length;
  switch(G__9651) {
    case 1:
      return enfocus.core.get_data.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.get_data.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9649.length)].join(""));;
  }
};
enfocus.core.get_data.cljs$core$IFn$_invoke$arity$1 = function(ky) {
  return enfocus.core.get_data.call(null, ky, false);
};
enfocus.core.get_data.cljs$core$IFn$_invoke$arity$2 = function(ky, bubble) {
  return enfocus.core.extr_multi_node.call(null, function(node) {
    return domina.get_data.call(null, node, ky, bubble);
  });
};
enfocus.core.get_data.cljs$lang$maxFixedArity = 2;
enfocus.core.get_prop = function enfocus$core$get_prop(prop) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod[cljs.core.name.call(null, prop)];
  });
};
enfocus.core.merge_form_val = function enfocus$core$merge_form_val(form_map, ky, val) {
  var mval = form_map.call(null, ky);
  if (cljs.core.truth_(val)) {
    if (cljs.core.coll_QMARK_.call(null, mval) && cljs.core.coll_QMARK_.call(null, val)) {
      return cljs.core.assoc.call(null, form_map, ky, cljs.core.into.call(null, mval, val));
    } else {
      if (cljs.core.coll_QMARK_.call(null, mval)) {
        return cljs.core.assoc.call(null, form_map, ky, cljs.core.conj.call(null, mval, val));
      } else {
        if (cljs.core.truth_(mval)) {
          return cljs.core.assoc.call(null, form_map, ky, cljs.core.PersistentHashSet.fromArray([mval, val], true));
        } else {
          return cljs.core.assoc.call(null, form_map, ky, val);
        }
      }
    }
  } else {
    return form_map;
  }
};
enfocus.core.read_form_input = function enfocus$core$read_form_input() {
  var trans = function(nodes, chain) {
    var nod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var result = cljs.core.reduce.call(null, function(nod_col) {
      return function(p1__9657_SHARP_, p2__9656_SHARP_) {
        var vals = cljs.core.js__GT_clj.call(null, goog.dom.forms.getValue(p2__9656_SHARP_));
        if (!(typeof vals === "string") && cljs.core.coll_QMARK_.call(null, vals)) {
          return cljs.core.into.call(null, p1__9657_SHARP_, vals);
        } else {
          if (cljs.core.truth_(vals)) {
            return cljs.core.conj.call(null, p1__9657_SHARP_, vals);
          } else {
            return p1__9657_SHARP_;
          }
        }
      };
    }(nod_col), cljs.core.PersistentHashSet.EMPTY, nod_col);
    if (cljs.core.empty_QMARK_.call(null, result)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, result)) && cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["checkbox", null, "select-multiple", null], null), null)).call(null, cljs.core.first.call(null, nod_col).type))) {
        return cljs.core.first.call(null, result);
      } else {
        return result;
      }
    }
  };
  if (typeof enfocus.core.t_enfocus$core9662 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core9662 = function(read_form_input, trans, meta9663) {
      this.read_form_input = read_form_input;
      this.trans = trans;
      this.meta9663 = meta9663;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core9662.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_9664, meta9663__$1) {
        var self__ = this;
        var _9664__$1 = this;
        return new enfocus.core.t_enfocus$core9662(self__.read_form_input, self__.trans, meta9663__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_9664) {
        var self__ = this;
        var _9664__$1 = this;
        return self__.meta9663;
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core9662.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.call = function(trans) {
      return function() {
        var G__9666 = null;
        var G__9666__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__9666__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__9666 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__9666__2.call(this, self__, nodes);
            case 3:
              return G__9666__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9666.cljs$core$IFn$_invoke$arity$2 = G__9666__2;
        G__9666.cljs$core$IFn$_invoke$arity$3 = G__9666__3;
        return G__9666;
      }();
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.apply = function(trans) {
      return function(self__, args9665) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9665)));
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "read-form-input", "read-form-input", 1575979010, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY)), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "returns the value of a given form input (text,select,checkbox,etc...)    If more than  one value exists it will return a set of values."], 
        null)), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta9663", "meta9663", -785925324, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core9662.cljs$lang$type = true;
    enfocus.core.t_enfocus$core9662.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core9662";
    enfocus.core.t_enfocus$core9662.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "enfocus.core/t_enfocus$core9662");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core9662 = function(trans) {
      return function enfocus$core$read_form_input_$___GT_t_enfocus$core9662(read_form_input__$1, trans__$1, meta9663) {
        return new enfocus.core.t_enfocus$core9662(read_form_input__$1, trans__$1, meta9663);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core9662(enfocus$core$read_form_input, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.read_form = function enfocus$core$read_form() {
  return enfocus.core.extr_multi_node.call(null, function(node) {
    var inputs = node.elements;
    return cljs.core.reduce.call(null, function(inputs) {
      return function(p1__9668_SHARP_, p2__9667_SHARP_) {
        if (!cljs.core.empty_QMARK_.call(null, inputs.item(p2__9667_SHARP_).name)) {
          return enfocus.core.merge_form_val.call(null, p1__9668_SHARP_, cljs.core.keyword.call(null, inputs.item(p2__9667_SHARP_).name), enfocus.core.read_form_input.call(null).call(null, inputs.item(p2__9667_SHARP_)));
        } else {
          return p1__9668_SHARP_;
        }
      };
    }(inputs), cljs.core.PersistentArrayMap.EMPTY, cljs.core.range.call(null, inputs.length));
  });
};
enfocus.core.reg_filt = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.filter = function enfocus$core$filter(tst, trans) {
  return enfocus.core.multi_node_chain.call(null, function() {
    var enfocus$core$filter_$_filt = null;
    var enfocus$core$filter_$_filt__1 = function(pnodes) {
      return enfocus$core$filter_$_filt.call(null, pnodes, null);
    };
    var enfocus$core$filter_$_filt__2 = function(pnodes, chain) {
      var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
      var ttest = tst instanceof cljs.core.Keyword ? cljs.core.deref.call(null, enfocus.core.reg_filt).call(null, tst) : tst;
      var res = cljs.core.filter.call(null, ttest, pnod_col);
      if (chain == null) {
        return enfocus.core.apply_transform.call(null, trans, res);
      } else {
        return enfocus.core.apply_transform.call(null, trans, res, chain);
      }
    };
    enfocus$core$filter_$_filt = function(pnodes, chain) {
      switch(arguments.length) {
        case 1:
          return enfocus$core$filter_$_filt__1.call(this, pnodes);
        case 2:
          return enfocus$core$filter_$_filt__2.call(this, pnodes, chain);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    enfocus$core$filter_$_filt.cljs$core$IFn$_invoke$arity$1 = enfocus$core$filter_$_filt__1;
    enfocus$core$filter_$_filt.cljs$core$IFn$_invoke$arity$2 = enfocus$core$filter_$_filt__2;
    return enfocus$core$filter_$_filt;
  }());
};
enfocus.core.register_filter = function enfocus$core$register_filter(ky, func) {
  return cljs.core.swap_BANG_.call(null, enfocus.core.reg_filt, cljs.core.assoc, ky, func);
};
enfocus.core.selected_options = function enfocus$core$selected_options(pnod) {
  return pnod.selected;
};
enfocus.core.checked_radio_checkbox = function enfocus$core$checked_radio_checkbox(pnod) {
  return pnod.checked;
};
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "selected", "selected", 574897764), enfocus.core.selected_options);
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "checked", "checked", -50955819), enfocus.core.checked_radio_checkbox);
enfocus.core.match_QMARK_ = function enfocus$core$match_QMARK_(selector) {
  return function(node) {
    if (cljs.core.truth_(node["matches"])) {
      return node.matches(selector);
    } else {
      if (cljs.core.truth_(node["matchesSelector"])) {
        return node.matchesSelector(selector);
      } else {
        if (cljs.core.truth_(node["msMatchesSelector"])) {
          return node.msMatchesSelector(selector);
        } else {
          if (cljs.core.truth_(node["mozMatchesSelector"])) {
            return node.mozMatchesSelector(selector);
          } else {
            if (cljs.core.truth_(node["webkitMatchesSelector"])) {
              return node.webkitMatchesSelector(selector);
            } else {
              return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([node], true), enfocus.core.nodes__GT_coll.call(null, enfocus.core.select.call(null, node)));
            }
          }
        }
      }
    }
  };
};
enfocus.core.create_sel_str = function enfocus$core$create_sel_str(var_args) {
  var args9670 = [];
  var len__7263__auto___9673 = arguments.length;
  var i__7264__auto___9674 = 0;
  while (true) {
    if (i__7264__auto___9674 < len__7263__auto___9673) {
      args9670.push(arguments[i__7264__auto___9674]);
      var G__9675 = i__7264__auto___9674 + 1;
      i__7264__auto___9674 = G__9675;
      continue;
    } else {
    }
    break;
  }
  var G__9672 = args9670.length;
  switch(G__9672) {
    case 1:
      return enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9670.length)].join(""));;
  }
};
enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$1 = function(css_sel) {
  return enfocus.core.create_sel_str.call(null, "", css_sel);
};
enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$2 = function(id_mask_sym, css_sel) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__9669_SHARP_) {
    if (p1__9669_SHARP_ instanceof cljs.core.Symbol) {
      return enfocus.core.css_syms.call(null, p1__9669_SHARP_);
    } else {
      if (p1__9669_SHARP_ instanceof cljs.core.Keyword) {
        return [cljs.core.str(" "), cljs.core.str(cljs.core.name.call(null, p1__9669_SHARP_).replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join("")))].join("");
      } else {
        if (cljs.core.vector_QMARK_.call(null, p1__9669_SHARP_)) {
          return enfocus.core.create_sel_str.call(null, p1__9669_SHARP_);
        } else {
          if (typeof p1__9669_SHARP_ === "string") {
            return p1__9669_SHARP_.replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }, css_sel));
};
enfocus.core.create_sel_str.cljs$lang$maxFixedArity = 2;
enfocus.core.css_select = function enfocus$core$css_select(var_args) {
  var args9677 = [];
  var len__7263__auto___9680 = arguments.length;
  var i__7264__auto___9681 = 0;
  while (true) {
    if (i__7264__auto___9681 < len__7263__auto___9680) {
      args9677.push(arguments[i__7264__auto___9681]);
      var G__9682 = i__7264__auto___9681 + 1;
      i__7264__auto___9681 = G__9682;
      continue;
    } else {
    }
    break;
  }
  var G__9679 = args9677.length;
  switch(G__9679) {
    case 1:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9677.length)].join(""));;
  }
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$1 = function(css_sel) {
  return enfocus.core.css_select.call(null, "", document, css_sel);
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$2 = function(dom_node, css_sel) {
  return enfocus.core.css_select.call(null, "", dom_node, css_sel);
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$3 = function(id_mask_sym, dom_node, css_sel) {
  var sel = clojure.string.trim.call(null, enfocus.enlive.syntax.convert.call(null, enfocus.core.create_sel_str.call(null, id_mask_sym, css_sel)));
  var ret = domina.css.sel.call(null, dom_node, sel);
  return ret;
};
enfocus.core.css_select.cljs$lang$maxFixedArity = 3;
enfocus.core.nil_t = function enfocus$core$nil_t(func) {
  var or__6193__auto__ = func;
  if (cljs.core.truth_(or__6193__auto__)) {
    return or__6193__auto__;
  } else {
    return enfocus.core.remove_node;
  }
};
enfocus.core.i_at = function enfocus$core$i_at(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9696 = arguments.length;
  var i__7264__auto___9697 = 0;
  while (true) {
    if (i__7264__auto___9697 < len__7263__auto___9696) {
      args__7270__auto__.push(arguments[i__7264__auto___9697]);
      var G__9698 = i__7264__auto___9697 + 1;
      i__7264__auto___9697 = G__9698;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 2 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(2), 0, null) : null;
  return enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7271__auto__);
};
enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic = function(id_mask, node, trans) {
  var cnt = cljs.core.count.call(null, trans);
  var sel_QMARK_ = function() {
    var and__6181__auto__ = !(node == null);
    if (and__6181__auto__) {
      if (!(node == null)) {
        if (false || node.enfocus$core$ISelector$) {
          return true;
        } else {
          if (!node.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
      }
    } else {
      return and__6181__auto__;
    }
  }();
  if (!sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
    return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
  } else {
    var vec__9689 = sel_QMARK_ ? function() {
      var x__7027__auto__ = document;
      return cljs.core._conj.call(null, function() {
        var x__7027__auto____$1 = cljs.core.conj.call(null, trans, node);
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
      }(), x__7027__auto__);
    }() : function() {
      var x__7027__auto__ = node;
      return cljs.core._conj.call(null, function() {
        var x__7027__auto____$1 = trans;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
      }(), x__7027__auto__);
    }();
    var node__$1 = cljs.core.nth.call(null, vec__9689, 0, null);
    var trans__$1 = cljs.core.nth.call(null, vec__9689, 1, null);
    var seq__9690 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, trans__$1));
    var chunk__9691 = null;
    var count__9692 = 0;
    var i__9693 = 0;
    while (true) {
      if (i__9693 < count__9692) {
        var vec__9694 = cljs.core._nth.call(null, chunk__9691, i__9693);
        var sel = cljs.core.nth.call(null, vec__9694, 0, null);
        var t = cljs.core.nth.call(null, vec__9694, 1, null);
        enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
        var G__9699 = seq__9690;
        var G__9700 = chunk__9691;
        var G__9701 = count__9692;
        var G__9702 = i__9693 + 1;
        seq__9690 = G__9699;
        chunk__9691 = G__9700;
        count__9692 = G__9701;
        i__9693 = G__9702;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__9690);
        if (temp__4425__auto__) {
          var seq__9690__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9690__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__9690__$1);
            var G__9703 = cljs.core.chunk_rest.call(null, seq__9690__$1);
            var G__9704 = c__7004__auto__;
            var G__9705 = cljs.core.count.call(null, c__7004__auto__);
            var G__9706 = 0;
            seq__9690 = G__9703;
            chunk__9691 = G__9704;
            count__9692 = G__9705;
            i__9693 = G__9706;
            continue;
          } else {
            var vec__9695 = cljs.core.first.call(null, seq__9690__$1);
            var sel = cljs.core.nth.call(null, vec__9695, 0, null);
            var t = cljs.core.nth.call(null, vec__9695, 1, null);
            enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
            var G__9707 = cljs.core.next.call(null, seq__9690__$1);
            var G__9708 = null;
            var G__9709 = 0;
            var G__9710 = 0;
            seq__9690 = G__9707;
            chunk__9691 = G__9708;
            count__9692 = G__9709;
            i__9693 = G__9710;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }
};
enfocus.core.i_at.cljs$lang$maxFixedArity = 2;
enfocus.core.i_at.cljs$lang$applyTo = function(seq9684) {
  var G__9685 = cljs.core.first.call(null, seq9684);
  var seq9684__$1 = cljs.core.next.call(null, seq9684);
  var G__9686 = cljs.core.first.call(null, seq9684__$1);
  var seq9684__$2 = cljs.core.next.call(null, seq9684__$1);
  return enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic(G__9685, G__9686, seq9684__$2);
};
enfocus.core.at = function enfocus$core$at(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9713 = arguments.length;
  var i__7264__auto___9714 = 0;
  while (true) {
    if (i__7264__auto___9714 < len__7263__auto___9713) {
      args__7270__auto__.push(arguments[i__7264__auto___9714]);
      var G__9715 = i__7264__auto___9714 + 1;
      i__7264__auto___9714 = G__9715;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic = function(node, trans) {
  return cljs.core.apply.call(null, enfocus.core.i_at, "", node, trans);
};
enfocus.core.at.cljs$lang$maxFixedArity = 1;
enfocus.core.at.cljs$lang$applyTo = function(seq9711) {
  var G__9712 = cljs.core.first.call(null, seq9711);
  var seq9711__$1 = cljs.core.next.call(null, seq9711);
  return enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic(G__9712, seq9711__$1);
};
enfocus.core.from = function enfocus$core$from(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___9722 = arguments.length;
  var i__7264__auto___9723 = 0;
  while (true) {
    if (i__7264__auto___9723 < len__7263__auto___9722) {
      args__7270__auto__.push(arguments[i__7264__auto___9723]);
      var G__9724 = i__7264__auto___9723 + 1;
      i__7264__auto___9723 = G__9724;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic = function(node, trans) {
  var cnt = cljs.core.count.call(null, trans);
  var sel_QMARK_ = !(node == null) ? false || node.enfocus$core$ISelector$ ? true : !node.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node) : false : cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
  if (sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
    return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), enfocus.core.select.call(null, node));
  } else {
    if (cljs.core._EQ_.call(null, 1, cnt)) {
      return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
    } else {
      var vec__9719 = sel_QMARK_ ? function() {
        var x__7027__auto__ = document;
        return cljs.core._conj.call(null, function() {
          var x__7027__auto____$1 = cljs.core.conj.call(null, trans, node);
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
        }(), x__7027__auto__);
      }() : function() {
        var x__7027__auto__ = node;
        return cljs.core._conj.call(null, function() {
          var x__7027__auto____$1 = trans;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__7027__auto____$1);
        }(), x__7027__auto__);
      }();
      var node__$1 = cljs.core.nth.call(null, vec__9719, 0, null);
      var trans__$1 = cljs.core.nth.call(null, vec__9719, 1, null);
      return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(vec__9719, node__$1, trans__$1, cnt, sel_QMARK_) {
        return function(p__9720) {
          var vec__9721 = p__9720;
          var ky = cljs.core.nth.call(null, vec__9721, 0, null);
          var sel = cljs.core.nth.call(null, vec__9721, 1, null);
          var ext = cljs.core.nth.call(null, vec__9721, 2, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ky, enfocus.core.apply_transform.call(null, ext, enfocus.core.select.call(null, sel, node__$1, ""))], null);
        };
      }(vec__9719, node__$1, trans__$1, cnt, sel_QMARK_), cljs.core.partition.call(null, 3, trans__$1)));
    }
  }
};
enfocus.core.from.cljs$lang$maxFixedArity = 1;
enfocus.core.from.cljs$lang$applyTo = function(seq9716) {
  var G__9717 = cljs.core.first.call(null, seq9716);
  var seq9716__$1 = cljs.core.next.call(null, seq9716);
  return enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic(G__9717, seq9716__$1);
};
enfocus.core.xpath = function enfocus$core$xpath(path) {
  return function(root, id_mask) {
    if (cljs.core.empty_QMARK_.call(null, id_mask)) {
      return domina.xpath.xpath.call(null, root, path);
    } else {
      var tmp = path.replace("@ID\x3d'", [cljs.core.str("@ID\x3d'"), cljs.core.str(id_mask)].join(""));
      var mpath = path.replace("@id\x3d'", [cljs.core.str("@id\x3d'"), cljs.core.str(id_mask)].join(""));
      return domina.xpath.xpath.call(null, root, mpath);
    }
  };
};
enfocus.core.this_node = function enfocus$core$this_node(root, id_mask) {
  return root;
};
if (cljs.core.truth_(typeof Text != "undefined")) {
  Text.prototype.domina$DomContent$ = true;
  Text.prototype.domina$DomContent$nodes$arity$1 = function(content) {
    var content__$1 = this;
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content__$1], null);
  };
  Text.prototype.domina$DomContent$single_node$arity$1 = function(content) {
    var content__$1 = this;
    return content__$1;
  };
} else {
}
enfocus.core.ISelector["function"] = true;
enfocus.core.select["function"] = function() {
  var G__9725 = null;
  var G__9725__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__9725__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__9725__3 = function(this$, root, id_mask) {
    return this$.call(null, root, id_mask);
  };
  G__9725 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__9725__1.call(this, this$);
      case 2:
        return G__9725__2.call(this, this$, root);
      case 3:
        return G__9725__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9725.cljs$core$IFn$_invoke$arity$1 = G__9725__1;
  G__9725.cljs$core$IFn$_invoke$arity$2 = G__9725__2;
  G__9725.cljs$core$IFn$_invoke$arity$3 = G__9725__3;
  return G__9725;
}();
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$ = true;
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$1 = function(this$) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, document, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$2 = function(this$, root) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, root, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$3 = function(this$, root, id_mask) {
  var this$__$1 = this;
  return enfocus.core.css_select.call(null, id_mask, root, this$__$1);
};
enfocus.core.ISelector["string"] = true;
enfocus.core.select["string"] = function() {
  var G__9726 = null;
  var G__9726__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__9726__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__9726__3 = function(this$, root, id_mask) {
    return enfocus.core.css_select.call(null, id_mask, root, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$], null));
  };
  G__9726 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__9726__1.call(this, this$);
      case 2:
        return G__9726__2.call(this, this$, root);
      case 3:
        return G__9726__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9726.cljs$core$IFn$_invoke$arity$1 = G__9726__1;
  G__9726.cljs$core$IFn$_invoke$arity$2 = G__9726__2;
  G__9726.cljs$core$IFn$_invoke$arity$3 = G__9726__3;
  return G__9726;
}();
enfocus.core.ISelector["null"] = true;
enfocus.core.select["null"] = function() {
  var G__9727 = null;
  var G__9727__1 = function(this$) {
    return cljs.core.List.EMPTY;
  };
  var G__9727__2 = function(this$, root) {
    return cljs.core.List.EMPTY;
  };
  var G__9727__3 = function(this$, root, id_mask) {
    return cljs.core.List.EMPTY;
  };
  G__9727 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__9727__1.call(this, this$);
      case 2:
        return G__9727__2.call(this, this$, root);
      case 3:
        return G__9727__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9727.cljs$core$IFn$_invoke$arity$1 = G__9727__1;
  G__9727.cljs$core$IFn$_invoke$arity$2 = G__9727__2;
  G__9727.cljs$core$IFn$_invoke$arity$3 = G__9727__3;
  return G__9727;
}();
enfocus.core.ITransform["function"] = true;
enfocus.core.apply_transform["function"] = function() {
  var G__9728 = null;
  var G__9728__2 = function(trans, nodes) {
    return cljs.core.doall.call(null, cljs.core.map.call(null, trans, enfocus.core.nodes__GT_coll.call(null, nodes)));
  };
  var G__9728__3 = function(trans, nodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var val = cljs.core.doall.call(null, cljs.core.map.call(null, trans, pnod_col));
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  G__9728 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__9728__2.call(this, trans, nodes);
      case 3:
        return G__9728__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9728.cljs$core$IFn$_invoke$arity$2 = G__9728__2;
  G__9728.cljs$core$IFn$_invoke$arity$3 = G__9728__3;
  return G__9728;
}();
enfocus.core.ITransform["null"] = true;
enfocus.core.apply_transform["null"] = function() {
  var G__9729 = null;
  var G__9729__2 = function(trans, nodes) {
    return nodes;
  };
  var G__9729__3 = function(trans, nodes, chain) {
    return nodes;
  };
  G__9729 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__9729__2.call(this, trans, nodes);
      case 3:
        return G__9729__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9729.cljs$core$IFn$_invoke$arity$2 = G__9729__2;
  G__9729.cljs$core$IFn$_invoke$arity$3 = G__9729__3;
  return G__9729;
}();
goog.provide("goog.fx.Transition");
goog.provide("goog.fx.Transition.EventType");
goog.fx.Transition = function() {
};
goog.fx.Transition.EventType = {PLAY:"play", BEGIN:"begin", RESUME:"resume", END:"end", STOP:"stop", FINISH:"finish", PAUSE:"pause"};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide("goog.fx.TransitionBase");
goog.provide("goog.fx.TransitionBase.State");
goog.require("goog.events.EventTarget");
goog.require("goog.fx.Transition");
goog.fx.TransitionBase = function() {
  goog.fx.TransitionBase.base(this, "constructor");
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
  this.startTime = null;
  this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {STOPPED:0, PAUSED:-1, PLAYING:1};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function() {
  return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function() {
  this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function() {
  this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function() {
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function() {
  return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function() {
  return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function() {
  return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(type);
};
goog.provide("goog.async.AnimationDelay");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.functions");
goog.async.AnimationDelay = function(listener, opt_window, opt_handler) {
  goog.async.AnimationDelay.base(this, "constructor");
  this.id_ = null;
  this.usingListeners_ = false;
  this.listener_ = listener;
  this.handler_ = opt_handler;
  this.win_ = opt_window || window;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = "MozBeforePaint";
goog.async.AnimationDelay.prototype.start = function() {
  this.stop();
  this.usingListeners_ = false;
  var raf = this.getRaf_();
  var cancelRaf = this.getCancelRaf_();
  if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
    this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
    this.win_.mozRequestAnimationFrame(null);
    this.usingListeners_ = true;
  } else {
    if (raf && cancelRaf) {
      this.id_ = raf.call(this.win_, this.callback_);
    } else {
      this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
  }
};
goog.async.AnimationDelay.prototype.stop = function() {
  if (this.isActive()) {
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
      goog.events.unlistenByKey(this.id_);
    } else {
      if (raf && cancelRaf) {
        cancelRaf.call(this.win_, (this.id_));
      } else {
        this.win_.clearTimeout((this.id_));
      }
    }
  }
  this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.AnimationDelay.prototype.isActive = function() {
  return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function() {
  if (this.usingListeners_ && this.id_) {
    goog.events.unlistenByKey(this.id_);
  }
  this.id_ = null;
  this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function() {
  this.stop();
  goog.async.AnimationDelay.base(this, "disposeInternal");
};
goog.async.AnimationDelay.prototype.getRaf_ = function() {
  var win = this.win_;
  return win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || null;
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function() {
  var win = this.win_;
  return win.cancelAnimationFrame || win.cancelRequestAnimationFrame || win.webkitCancelRequestAnimationFrame || win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame || win.msCancelRequestAnimationFrame || null;
};
goog.provide("goog.fx.anim");
goog.provide("goog.fx.anim.Animated");
goog.require("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.object");
goog.fx.anim.Animated = function() {
};
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function(animation) {
  var uid = goog.getUid(animation);
  if (!(uid in goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.activeAnimations_[uid] = animation;
  }
  goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function(animation) {
  var uid = goog.getUid(animation);
  delete goog.fx.anim.activeAnimations_[uid];
  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.cancelAnimationFrame_();
  }
};
goog.fx.anim.tearDown = function() {
  goog.fx.anim.animationWindow_ = null;
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function(animationWindow) {
  var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.animationWindow_ = animationWindow;
  if (hasTimer) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.fx.anim.requestAnimationFrame_ = function() {
  if (!goog.fx.anim.animationDelay_) {
    if (goog.fx.anim.animationWindow_) {
      goog.fx.anim.animationDelay_ = new goog.async.AnimationDelay(function(now) {
        goog.fx.anim.cycleAnimations_(now);
      }, goog.fx.anim.animationWindow_);
    } else {
      goog.fx.anim.animationDelay_ = new goog.async.Delay(function() {
        goog.fx.anim.cycleAnimations_(goog.now());
      }, goog.fx.anim.TIMEOUT);
    }
  }
  var delay = goog.fx.anim.animationDelay_;
  if (!delay.isActive()) {
    delay.start();
  }
};
goog.fx.anim.cancelAnimationFrame_ = function() {
  if (goog.fx.anim.animationDelay_) {
    goog.fx.anim.animationDelay_.stop();
  }
};
goog.fx.anim.cycleAnimations_ = function(now) {
  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
    anim.onAnimationFrame(now);
  });
  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.provide("goog.fx.Animation");
goog.provide("goog.fx.Animation.EventType");
goog.provide("goog.fx.Animation.State");
goog.provide("goog.fx.AnimationEvent");
goog.require("goog.array");
goog.require("goog.events.Event");
goog.require("goog.fx.Transition");
goog.require("goog.fx.TransitionBase");
goog.require("goog.fx.anim");
goog.require("goog.fx.anim.Animated");
goog.fx.Animation = function(start, end, duration, opt_acc) {
  goog.fx.Animation.base(this, "constructor");
  if (!goog.isArray(start) || !goog.isArray(end)) {
    throw Error("Start and end parameters must be arrays");
  }
  if (start.length != end.length) {
    throw Error("Start and end points must be the same length");
  }
  this.startPoint = start;
  this.endPoint = end;
  this.duration = duration;
  this.accel_ = opt_acc;
  this.coords = [];
  this.useRightPositioningForRtl_ = false;
  this.fps_ = 0;
  this.progress = 0;
  this.lastFrame = null;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {
  return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {PLAY:goog.fx.Transition.EventType.PLAY, BEGIN:goog.fx.Transition.EventType.BEGIN, RESUME:goog.fx.Transition.EventType.RESUME, END:goog.fx.Transition.EventType.END, STOP:goog.fx.Transition.EventType.STOP, FINISH:goog.fx.Transition.EventType.FINISH, PAUSE:goog.fx.Transition.EventType.PAUSE, ANIMATE:"animate", DESTROY:"destroy"};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function(animationWindow) {
  goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.play = function(opt_restart) {
  if (opt_restart || this.isStopped()) {
    this.progress = 0;
    this.coords = this.startPoint;
  } else {
    if (this.isPlaying()) {
      return false;
    }
  }
  goog.fx.anim.unregisterAnimation(this);
  var now = (goog.now());
  this.startTime = now;
  if (this.isPaused()) {
    this.startTime -= this.duration * this.progress;
  }
  this.endTime = this.startTime + this.duration;
  this.lastFrame = this.startTime;
  if (!this.progress) {
    this.onBegin();
  }
  this.onPlay();
  if (this.isPaused()) {
    this.onResume();
  }
  this.setStatePlaying();
  goog.fx.anim.registerAnimation(this);
  this.cycle(now);
  return true;
};
goog.fx.Animation.prototype.stop = function(opt_gotoEnd) {
  goog.fx.anim.unregisterAnimation(this);
  this.setStateStopped();
  if (!!opt_gotoEnd) {
    this.progress = 1;
  }
  this.updateCoords_(this.progress);
  this.onStop();
  this.onEnd();
};
goog.fx.Animation.prototype.pause = function() {
  if (this.isPlaying()) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStatePaused();
    this.onPause();
  }
};
goog.fx.Animation.prototype.getProgress = function() {
  return this.progress;
};
goog.fx.Animation.prototype.setProgress = function(progress) {
  this.progress = progress;
  if (this.isPlaying()) {
    var now = goog.now();
    this.startTime = now - this.duration * this.progress;
    this.endTime = this.startTime + this.duration;
  }
};
goog.fx.Animation.prototype.disposeInternal = function() {
  if (!this.isStopped()) {
    this.stop(false);
  }
  this.onDestroy();
  goog.fx.Animation.base(this, "disposeInternal");
};
goog.fx.Animation.prototype.destroy = function() {
  this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function(now) {
  this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function(now) {
  this.progress = (now - this.startTime) / (this.endTime - this.startTime);
  if (this.progress >= 1) {
    this.progress = 1;
  }
  this.fps_ = 1E3 / (now - this.lastFrame);
  this.lastFrame = now;
  this.updateCoords_(this.progress);
  if (this.progress == 1) {
    this.setStateStopped();
    goog.fx.anim.unregisterAnimation(this);
    this.onFinish();
    this.onEnd();
  } else {
    if (this.isPlaying()) {
      this.onAnimate();
    }
  }
};
goog.fx.Animation.prototype.updateCoords_ = function(t) {
  if (goog.isFunction(this.accel_)) {
    t = this.accel_(t);
  }
  this.coords = new Array(this.startPoint.length);
  for (var i = 0;i < this.startPoint.length;i++) {
    this.coords[i] = (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
  }
};
goog.fx.Animation.prototype.onAnimate = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function(type, anim) {
  goog.fx.AnimationEvent.base(this, "constructor", type);
  this.coords = anim.coords;
  this.x = anim.coords[0];
  this.y = anim.coords[1];
  this.z = anim.coords[2];
  this.duration = anim.duration;
  this.progress = anim.getProgress();
  this.fps = anim.fps_;
  this.state = anim.getStateInternal();
  this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function() {
  return goog.array.map(this.coords, Math.round);
};
goog.provide("goog.fx.easing");
goog.fx.easing.easeIn = function(t) {
  return goog.fx.easing.easeInInternal_(t, 3);
};
goog.fx.easing.easeInInternal_ = function(t, exp) {
  return Math.pow(t, exp);
};
goog.fx.easing.easeOut = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 3);
};
goog.fx.easing.easeOutInternal_ = function(t, exp) {
  return 1 - goog.fx.easing.easeInInternal_(1 - t, exp);
};
goog.fx.easing.easeOutLong = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 4);
};
goog.fx.easing.inAndOut = function(t) {
  return 3 * t * t - 2 * t * t * t;
};
goog.provide("goog.fx");
goog.require("goog.asserts");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Animation.EventType");
goog.require("goog.fx.Animation.State");
goog.require("goog.fx.AnimationEvent");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.easing");
goog.provide("goog.color.names");
goog.color.names = {"aliceblue":"#f0f8ff", "antiquewhite":"#faebd7", "aqua":"#00ffff", "aquamarine":"#7fffd4", "azure":"#f0ffff", "beige":"#f5f5dc", "bisque":"#ffe4c4", "black":"#000000", "blanchedalmond":"#ffebcd", "blue":"#0000ff", "blueviolet":"#8a2be2", "brown":"#a52a2a", "burlywood":"#deb887", "cadetblue":"#5f9ea0", "chartreuse":"#7fff00", "chocolate":"#d2691e", "coral":"#ff7f50", "cornflowerblue":"#6495ed", "cornsilk":"#fff8dc", "crimson":"#dc143c", "cyan":"#00ffff", "darkblue":"#00008b", "darkcyan":"#008b8b", 
"darkgoldenrod":"#b8860b", "darkgray":"#a9a9a9", "darkgreen":"#006400", "darkgrey":"#a9a9a9", "darkkhaki":"#bdb76b", "darkmagenta":"#8b008b", "darkolivegreen":"#556b2f", "darkorange":"#ff8c00", "darkorchid":"#9932cc", "darkred":"#8b0000", "darksalmon":"#e9967a", "darkseagreen":"#8fbc8f", "darkslateblue":"#483d8b", "darkslategray":"#2f4f4f", "darkslategrey":"#2f4f4f", "darkturquoise":"#00ced1", "darkviolet":"#9400d3", "deeppink":"#ff1493", "deepskyblue":"#00bfff", "dimgray":"#696969", "dimgrey":"#696969", 
"dodgerblue":"#1e90ff", "firebrick":"#b22222", "floralwhite":"#fffaf0", "forestgreen":"#228b22", "fuchsia":"#ff00ff", "gainsboro":"#dcdcdc", "ghostwhite":"#f8f8ff", "gold":"#ffd700", "goldenrod":"#daa520", "gray":"#808080", "green":"#008000", "greenyellow":"#adff2f", "grey":"#808080", "honeydew":"#f0fff0", "hotpink":"#ff69b4", "indianred":"#cd5c5c", "indigo":"#4b0082", "ivory":"#fffff0", "khaki":"#f0e68c", "lavender":"#e6e6fa", "lavenderblush":"#fff0f5", "lawngreen":"#7cfc00", "lemonchiffon":"#fffacd", 
"lightblue":"#add8e6", "lightcoral":"#f08080", "lightcyan":"#e0ffff", "lightgoldenrodyellow":"#fafad2", "lightgray":"#d3d3d3", "lightgreen":"#90ee90", "lightgrey":"#d3d3d3", "lightpink":"#ffb6c1", "lightsalmon":"#ffa07a", "lightseagreen":"#20b2aa", "lightskyblue":"#87cefa", "lightslategray":"#778899", "lightslategrey":"#778899", "lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0", "lime":"#00ff00", "limegreen":"#32cd32", "linen":"#faf0e6", "magenta":"#ff00ff", "maroon":"#800000", "mediumaquamarine":"#66cdaa", 
"mediumblue":"#0000cd", "mediumorchid":"#ba55d3", "mediumpurple":"#9370db", "mediumseagreen":"#3cb371", "mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a", "mediumturquoise":"#48d1cc", "mediumvioletred":"#c71585", "midnightblue":"#191970", "mintcream":"#f5fffa", "mistyrose":"#ffe4e1", "moccasin":"#ffe4b5", "navajowhite":"#ffdead", "navy":"#000080", "oldlace":"#fdf5e6", "olive":"#808000", "olivedrab":"#6b8e23", "orange":"#ffa500", "orangered":"#ff4500", "orchid":"#da70d6", "palegoldenrod":"#eee8aa", 
"palegreen":"#98fb98", "paleturquoise":"#afeeee", "palevioletred":"#db7093", "papayawhip":"#ffefd5", "peachpuff":"#ffdab9", "peru":"#cd853f", "pink":"#ffc0cb", "plum":"#dda0dd", "powderblue":"#b0e0e6", "purple":"#800080", "red":"#ff0000", "rosybrown":"#bc8f8f", "royalblue":"#4169e1", "saddlebrown":"#8b4513", "salmon":"#fa8072", "sandybrown":"#f4a460", "seagreen":"#2e8b57", "seashell":"#fff5ee", "sienna":"#a0522d", "silver":"#c0c0c0", "skyblue":"#87ceeb", "slateblue":"#6a5acd", "slategray":"#708090", 
"slategrey":"#708090", "snow":"#fffafa", "springgreen":"#00ff7f", "steelblue":"#4682b4", "tan":"#d2b48c", "teal":"#008080", "thistle":"#d8bfd8", "tomato":"#ff6347", "turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3", "white":"#ffffff", "whitesmoke":"#f5f5f5", "yellow":"#ffff00", "yellowgreen":"#9acd32"};
goog.provide("goog.color");
goog.provide("goog.color.Hsl");
goog.provide("goog.color.Hsv");
goog.provide("goog.color.Rgb");
goog.require("goog.color.names");
goog.require("goog.math");
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if (goog.color.isValidHexColor_(maybeHex)) {
    result.hex = goog.color.normalizeHex(maybeHex);
    result.type = "hex";
    return result;
  } else {
    var rgb = goog.color.isValidRgbColor_(str);
    if (rgb.length) {
      result.hex = goog.color.rgbArrayToHex(rgb);
      result.type = "rgb";
      return result;
    } else {
      if (goog.color.names) {
        var hex = goog.color.names[str.toLowerCase()];
        if (hex) {
          result.hex = hex;
          result.type = "named";
          return result;
        }
      }
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  return !!(goog.color.isValidHexColor_(maybeHex) || goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]);
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if (!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb;
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if (!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  if (hexColor.length == 4) {
    hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3");
  }
  return hexColor.toLowerCase();
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  var r = parseInt(hexColor.substr(1, 2), 16);
  var g = parseInt(hexColor.substr(3, 2), 16);
  var b = parseInt(hexColor.substr(5, 2), 16);
  return [r, g, b];
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if (isNaN(r) || r < 0 || r > 255 || isNaN(g) || g < 0 || g > 255 || isNaN(b) || b < 0 || b > 255) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16));
  var hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16));
  var hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
  return "#" + hexR + hexG + hexB;
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255;
  var normG = g / 255;
  var normB = b / 255;
  var max = Math.max(normR, normG, normB);
  var min = Math.min(normR, normG, normB);
  var h = 0;
  var s = 0;
  var l = .5 * (max + min);
  if (max != min) {
    if (max == normR) {
      h = 60 * (normG - normB) / (max - min);
    } else {
      if (max == normG) {
        h = 60 * (normB - normR) / (max - min) + 120;
      } else {
        if (max == normB) {
          h = 60 * (normR - normG) / (max - min) + 240;
        }
      }
    }
    if (0 < l && l <= .5) {
      s = (max - min) / (2 * l);
    } else {
      s = (max - min) / (2 - 2 * l);
    }
  }
  return [Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  if (vH < 0) {
    vH += 1;
  } else {
    if (vH > 1) {
      vH -= 1;
    }
  }
  if (6 * vH < 1) {
    return v1 + (v2 - v1) * 6 * vH;
  } else {
    if (2 * vH < 1) {
      return v2;
    } else {
      if (3 * vH < 2) {
        return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
      }
    }
  }
  return v1;
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0;
  var g = 0;
  var b = 0;
  var normH = h / 360;
  if (s == 0) {
    r = g = b = l * 255;
  } else {
    var temp1 = 0;
    var temp2 = 0;
    if (l < .5) {
      temp2 = l * (1 + s);
    } else {
      temp2 = l + s - s * l;
    }
    temp1 = 2 * l - temp2;
    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3);
    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3);
  }
  return [Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str);
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function(str) {
  return goog.color.normalizedHexColorRe_.test(str);
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if (regExpResultArray) {
    var r = Number(regExpResultArray[1]);
    var g = Number(regExpResultArray[2]);
    var b = Number(regExpResultArray[3]);
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
      return [r, g, b];
    }
  }
  return [];
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return hex.length == 1 ? "0" + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return str.charAt(0) == "#" ? str : "#" + str;
};
goog.color.rgbStyle_ = function(rgb) {
  return "rgb(" + rgb.join(",") + ")";
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0;
  var green = 0;
  var blue = 0;
  if (s == 0) {
    red = brightness;
    green = brightness;
    blue = brightness;
  } else {
    var sextant = Math.floor(h / 60);
    var remainder = h / 60 - sextant;
    var val1 = brightness * (1 - s);
    var val2 = brightness * (1 - s * remainder);
    var val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      ;
      case 0:
        red = brightness;
        green = val3;
        blue = val1;
        break;
    }
  }
  return [Math.floor(red), Math.floor(green), Math.floor(blue)];
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue);
  var min = Math.min(Math.min(red, green), blue);
  var hue;
  var saturation;
  var value = max;
  if (min == max) {
    hue = 0;
    saturation = 0;
  } else {
    var delta = max - min;
    saturation = delta / max;
    if (red == max) {
      hue = (green - blue) / delta;
    } else {
      if (green == max) {
        hue = 2 + (blue - red) / delta;
      } else {
        hue = 4 + (red - green) / delta;
      }
    }
    hue *= 60;
    if (hue < 0) {
      hue += 360;
    }
    if (hue > 360) {
      hue -= 360;
    }
  }
  return [hue, saturation, value];
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  if (hsl1[2] <= .5) {
    sl1 = hsl1[1] * hsl1[2];
  } else {
    sl1 = hsl1[1] * (1 - hsl1[2]);
  }
  if (hsl2[2] <= .5) {
    sl2 = hsl2[1] * hsl2[2];
  } else {
    sl2 = hsl2[1] * (1 - hsl2[2]);
  }
  var h1 = hsl1[0] / 360;
  var h2 = hsl2[0] / 360;
  var dh = (h1 - h2) * 2 * Math.PI;
  return (hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return [Math.round(factor * rgb1[0] + (1 - factor) * rgb2[0]), Math.round(factor * rgb1[1] + (1 - factor) * rgb2[1]), Math.round(factor * rgb1[2] + (1 - factor) * rgb2[2])];
};
goog.color.darken = function(rgb, factor) {
  var black = [0, 0, 0];
  return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function(rgb, factor) {
  var white = [255, 255, 255];
  return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function(prime, suggestions) {
  var suggestionsWithDiff = [];
  for (var i = 0;i < suggestions.length;i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)});
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff;
  });
  return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1E3);
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide("goog.style.bidi");
goog.require("goog.dom");
goog.require("goog.style");
goog.require("goog.userAgent");
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  if (isRtl && goog.userAgent.GECKO) {
    return -element.scrollLeft;
  } else {
    if (isRtl && !(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
      var overflowX = goog.style.getComputedOverflowX(element);
      if (overflowX == "visible") {
        return element.scrollLeft;
      } else {
        return element.scrollWidth - element.clientWidth - element.scrollLeft;
      }
    }
  }
  return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function(element) {
  element = (element);
  var offsetLeftForReal = element.offsetLeft;
  var bestParent = element.offsetParent;
  if (!bestParent && goog.style.getComputedPosition(element) == "fixed") {
    bestParent = goog.dom.getOwnerDocument(element).documentElement;
  }
  if (!bestParent) {
    return offsetLeftForReal;
  }
  if (goog.userAgent.GECKO) {
    var borderWidths = goog.style.getBorderBox(bestParent);
    offsetLeftForReal += borderWidths.left;
  } else {
    if (goog.userAgent.isDocumentModeOrHigher(8) && !goog.userAgent.isDocumentModeOrHigher(9)) {
      var borderWidths = goog.style.getBorderBox(bestParent);
      offsetLeftForReal -= borderWidths.left;
    }
  }
  if (goog.style.isRightToLeft(bestParent)) {
    var elementRightOffset = offsetLeftForReal + element.offsetWidth;
    return bestParent.clientWidth - elementRightOffset;
  }
  return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  if (!goog.style.isRightToLeft(element)) {
    element.scrollLeft = offsetStart;
  } else {
    if (goog.userAgent.GECKO) {
      element.scrollLeft = -offsetStart;
    } else {
      if (!(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
        element.scrollLeft = element.scrollWidth - offsetStart - element.clientWidth;
      } else {
        element.scrollLeft = offsetStart;
      }
    }
  }
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  if (!goog.isNull(top)) {
    elem.style.top = top + "px";
  }
  if (isRtl) {
    elem.style.right = left + "px";
    elem.style.left = "";
  } else {
    elem.style.left = left + "px";
    elem.style.right = "";
  }
};
goog.provide("goog.fx.dom");
goog.provide("goog.fx.dom.BgColorTransform");
goog.provide("goog.fx.dom.ColorTransform");
goog.provide("goog.fx.dom.Fade");
goog.provide("goog.fx.dom.FadeIn");
goog.provide("goog.fx.dom.FadeInAndShow");
goog.provide("goog.fx.dom.FadeOut");
goog.provide("goog.fx.dom.FadeOutAndHide");
goog.provide("goog.fx.dom.PredefinedEffect");
goog.provide("goog.fx.dom.Resize");
goog.provide("goog.fx.dom.ResizeHeight");
goog.provide("goog.fx.dom.ResizeWidth");
goog.provide("goog.fx.dom.Scroll");
goog.provide("goog.fx.dom.Slide");
goog.provide("goog.fx.dom.SlideFrom");
goog.provide("goog.fx.dom.Swipe");
goog.require("goog.color");
goog.require("goog.events");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Transition");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.fx.dom.PredefinedEffect = function(element, start, end, time, opt_acc) {
  goog.fx.Animation.call(this, start, end, time, opt_acc);
  this.element = element;
  this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function() {
  if (!goog.isDef(this.rightToLeft_)) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.element);
  }
  return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function() {
  var pos = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "right" : "left";
  this.element.style[pos] = Math.round(this.coords[0]) + "px";
  this.element.style.top = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.SlideFrom = function(element, end, time, opt_acc) {
  this.startPoint;
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(element) : (element).offsetLeft;
  var start = [offsetLeft, (element).offsetTop];
  goog.fx.dom.Slide.call(this, element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function() {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(this.element) : this.element.offsetLeft;
  this.startPoint = [offsetLeft, (this.element).offsetTop];
  goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
  this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
  this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function() {
  var x = this.coords[0];
  var y = this.coords[1];
  this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
  this.element.style.width = Math.round(x) + "px";
  var marginX = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "marginRight" : "marginLeft";
  this.element.style[marginX] = Math.round(x) - this.maxWidth_ + "px";
  this.element.style.marginTop = Math.round(y) - this.maxHeight_ + "px";
};
goog.fx.dom.Swipe.prototype.clip_ = function(x, y, w, h) {
  this.element.style.clip = "rect(" + (h - y) + "px " + w + "px " + h + "px " + (w - x) + "px)";
};
goog.fx.dom.Scroll = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function() {
  if (this.isRightPositioningForRtlEnabled()) {
    goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
  } else {
    this.element.scrollLeft = Math.round(this.coords[0]);
  }
  this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
  this.element.style.height = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.ResizeWidth = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.ResizeHeight = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function() {
  this.element.style.height = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.Fade = function(element, start, end, time, opt_acc) {
  if (goog.isNumber(start)) {
    start = [start];
  }
  if (goog.isNumber(end)) {
    end = [end];
  }
  goog.fx.dom.Fade.base(this, "constructor", element, start, end, time, opt_acc);
  if (start.length != 1 || end.length != 1) {
    throw Error("Start and end points must be 1D");
  }
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.TOLERANCE_ = 1 / 1024;
goog.fx.dom.Fade.OPACITY_UNSET_ = -1;
goog.fx.dom.Fade.prototype.updateStyle = function() {
  var opacity = this.coords[0];
  var delta = Math.abs(opacity - this.lastOpacityUpdate_);
  if (delta >= goog.fx.dom.Fade.TOLERANCE_) {
    goog.style.setOpacity(this.element, opacity);
    this.lastOpacityUpdate_ = opacity;
  }
};
goog.fx.dom.Fade.prototype.onBegin = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onBegin");
};
goog.fx.dom.Fade.prototype.onEnd = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onEnd");
};
goog.fx.dom.Fade.prototype.show = function() {
  this.element.style.display = "";
};
goog.fx.dom.Fade.prototype.hide = function() {
  this.element.style.display = "none";
};
goog.fx.dom.FadeOut = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function() {
  this.hide();
  goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function() {
  this.setColor();
};
goog.fx.dom.bgColorFadeIn = function(element, start, time, opt_eventHandler) {
  var initialBgColor = element.style.backgroundColor || "";
  var computedBgColor = goog.style.getBackgroundColor(element);
  var end;
  if (computedBgColor && computedBgColor != "transparent" && computedBgColor != "rgba(0, 0, 0, 0)") {
    end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
  } else {
    end = [255, 255, 255];
  }
  var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
  function setBgColor() {
    element.style.backgroundColor = initialBgColor;
  }
  if (opt_eventHandler) {
    opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  } else {
    goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  }
  anim.play();
};
goog.fx.dom.ColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.color = color;
};
goog.provide("enfocus.effects");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("enfocus.core");
goog.require("goog.fx");
goog.require("goog.fx.dom");
goog.require("goog.events");
goog.require("goog.style");
enfocus.effects.chainable_effect = function enfocus$effects$chainable_effect(func, callback) {
  var trans = function(pnodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
    var cnt = cljs.core.atom.call(null, cljs.core.count.call(null, pnod_col));
    var partial_cback = function(pnod_col, cnt) {
      return function() {
        cljs.core.swap_BANG_.call(null, cnt, cljs.core.dec);
        if (cljs.core._EQ_.call(null, 0, cljs.core.deref.call(null, cnt))) {
          if (cljs.core.truth_(callback)) {
            enfocus.core.apply_transform.call(null, callback, pnodes);
          } else {
          }
          if (cljs.core.truth_(chain)) {
            return enfocus.core.apply_transform.call(null, chain, pnodes);
          } else {
            return null;
          }
        } else {
          return null;
        }
      };
    }(pnod_col, cnt);
    var seq__15475 = cljs.core.seq.call(null, pnod_col);
    var chunk__15476 = null;
    var count__15477 = 0;
    var i__15478 = 0;
    while (true) {
      if (i__15478 < count__15477) {
        var pnod = cljs.core._nth.call(null, chunk__15476, i__15478);
        func.call(null, pnod, partial_cback);
        var G__15482 = seq__15475;
        var G__15483 = chunk__15476;
        var G__15484 = count__15477;
        var G__15485 = i__15478 + 1;
        seq__15475 = G__15482;
        chunk__15476 = G__15483;
        count__15477 = G__15484;
        i__15478 = G__15485;
        continue;
      } else {
        var temp__4425__auto__ = cljs.core.seq.call(null, seq__15475);
        if (temp__4425__auto__) {
          var seq__15475__$1 = temp__4425__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15475__$1)) {
            var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__15475__$1);
            var G__15486 = cljs.core.chunk_rest.call(null, seq__15475__$1);
            var G__15487 = c__7004__auto__;
            var G__15488 = cljs.core.count.call(null, c__7004__auto__);
            var G__15489 = 0;
            seq__15475 = G__15486;
            chunk__15476 = G__15487;
            count__15477 = G__15488;
            i__15478 = G__15489;
            continue;
          } else {
            var pnod = cljs.core.first.call(null, seq__15475__$1);
            func.call(null, pnod, partial_cback);
            var G__15490 = cljs.core.next.call(null, seq__15475__$1);
            var G__15491 = null;
            var G__15492 = 0;
            var G__15493 = 0;
            seq__15475 = G__15490;
            chunk__15476 = G__15491;
            count__15477 = G__15492;
            i__15478 = G__15493;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  if (typeof enfocus.effects.t_enfocus$effects15479 !== "undefined") {
  } else {
    enfocus.effects.t_enfocus$effects15479 = function(chainable_effect, func, callback, trans, meta15480) {
      this.chainable_effect = chainable_effect;
      this.func = func;
      this.callback = callback;
      this.trans = trans;
      this.meta15480 = meta15480;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.effects.t_enfocus$effects15479.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_15481, meta15480__$1) {
        var self__ = this;
        var _15481__$1 = this;
        return new enfocus.effects.t_enfocus$effects15479(self__.chainable_effect, self__.func, self__.callback, self__.trans, meta15480__$1);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects15479.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_15481) {
        var self__ = this;
        var _15481__$1 = this;
        return self__.meta15480;
      };
    }(trans);
    enfocus.effects.t_enfocus$effects15479.prototype.enfocus$core$ITransform$ = true;
    enfocus.effects.t_enfocus$effects15479.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects15479.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects15479.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "chainable-effect", "chainable-effect", -2085024423, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
        "func", "func", 1401825487, null), new cljs.core.Symbol(null, "callback", "callback", 935395299, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "wrapper function for effects, maps the effect to all nodes returned by the\n   selector and provides chaining and callback functionality"], null)), new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "callback", "callback", 935395299, null), new cljs.core.Symbol(null, "trans", "trans", 
        322027676, null), new cljs.core.Symbol(null, "meta15480", "meta15480", -891958689, null)], null);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects15479.cljs$lang$type = true;
    enfocus.effects.t_enfocus$effects15479.cljs$lang$ctorStr = "enfocus.effects/t_enfocus$effects15479";
    enfocus.effects.t_enfocus$effects15479.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6799__auto__, writer__6800__auto__, opt__6801__auto__) {
        return cljs.core._write.call(null, writer__6800__auto__, "enfocus.effects/t_enfocus$effects15479");
      };
    }(trans);
    enfocus.effects.__GT_t_enfocus$effects15479 = function(trans) {
      return function enfocus$effects$chainable_effect_$___GT_t_enfocus$effects15479(chainable_effect__$1, func__$1, callback__$1, trans__$1, meta15480) {
        return new enfocus.effects.t_enfocus$effects15479(chainable_effect__$1, func__$1, callback__$1, trans__$1, meta15480);
      };
    }(trans);
  }
  return new enfocus.effects.t_enfocus$effects15479(enfocus$effects$chainable_effect, func, callback, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.effects.chain = function enfocus$effects$chain(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___15496 = arguments.length;
  var i__7264__auto___15497 = 0;
  while (true) {
    if (i__7264__auto___15497 < len__7263__auto___15496) {
      args__7270__auto__.push(arguments[i__7264__auto___15497]);
      var G__15498 = i__7264__auto___15497 + 1;
      i__7264__auto___15497 = G__15498;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 1 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(1), 0, null) : null;
  return enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7271__auto__);
};
enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic = function(func, chains) {
  if (cljs.core.empty_QMARK_.call(null, chains)) {
    return function(pnod) {
      return enfocus.core.apply_transform.call(null, func, pnod);
    };
  } else {
    return function(pnod) {
      return enfocus.core.apply_transform.call(null, func, pnod, cljs.core.apply.call(null, enfocus.effects.chain, chains));
    };
  }
};
enfocus.effects.chain.cljs$lang$maxFixedArity = 1;
enfocus.effects.chain.cljs$lang$applyTo = function(seq15494) {
  var G__15495 = cljs.core.first.call(null, seq15494);
  var seq15494__$1 = cljs.core.next.call(null, seq15494);
  return enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic(G__15495, seq15494__$1);
};
enfocus.effects.fade_out = function enfocus$effects$fade_out(var_args) {
  var args15499 = [];
  var len__7263__auto___15502 = arguments.length;
  var i__7264__auto___15503 = 0;
  while (true) {
    if (i__7264__auto___15503 < len__7263__auto___15502) {
      args15499.push(arguments[i__7264__auto___15503]);
      var G__15504 = i__7264__auto___15503 + 1;
      i__7264__auto___15503 = G__15504;
      continue;
    } else {
    }
    break;
  }
  var G__15501 = args15499.length;
  switch(G__15501) {
    case 1:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15499.length)].join(""));;
  }
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$1 = function(ttime) {
  return enfocus.effects.fade_out.call(null, ttime, null, null);
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$2 = function(ttime, callback) {
  return enfocus.effects.fade_out.call(null, ttime, callback, null);
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$3 = function(ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var anim = new goog.fx.dom.FadeOut(pnod, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.fade_out.cljs$lang$maxFixedArity = 3;
enfocus.effects.fade_in = function enfocus$effects$fade_in(var_args) {
  var args15506 = [];
  var len__7263__auto___15509 = arguments.length;
  var i__7264__auto___15510 = 0;
  while (true) {
    if (i__7264__auto___15510 < len__7263__auto___15509) {
      args15506.push(arguments[i__7264__auto___15510]);
      var G__15511 = i__7264__auto___15510 + 1;
      i__7264__auto___15510 = G__15511;
      continue;
    } else {
    }
    break;
  }
  var G__15508 = args15506.length;
  switch(G__15508) {
    case 1:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15506.length)].join(""));;
  }
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$1 = function(ttime) {
  return enfocus.effects.fade_in.call(null, ttime, null, null);
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$2 = function(ttime, callback) {
  return enfocus.effects.fade_in.call(null, ttime, callback, null);
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$3 = function(ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var anim = new goog.fx.dom.FadeIn(pnod, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.fade_in.cljs$lang$maxFixedArity = 3;
enfocus.effects.resize = function enfocus$effects$resize(var_args) {
  var args15513 = [];
  var len__7263__auto___15516 = arguments.length;
  var i__7264__auto___15517 = 0;
  while (true) {
    if (i__7264__auto___15517 < len__7263__auto___15516) {
      args15513.push(arguments[i__7264__auto___15517]);
      var G__15518 = i__7264__auto___15517 + 1;
      i__7264__auto___15517 = G__15518;
      continue;
    } else {
    }
    break;
  }
  var G__15515 = args15513.length;
  switch(G__15515) {
    case 2:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15513.length)].join(""));;
  }
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$2 = function(wth, hgt) {
  return enfocus.effects.resize.call(null, wth, hgt, 0, null, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$3 = function(wth, hgt, ttime) {
  return enfocus.effects.resize.call(null, wth, hgt, ttime, null, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$4 = function(wth, hgt, ttime, callback) {
  return enfocus.effects.resize.call(null, wth, hgt, ttime, callback, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$5 = function(wth, hgt, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var csize = goog.style.getContentBoxSize(pnod);
    var start = [csize.width, csize.height];
    var wth__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curwidth", "curwidth", 1831107733), wth) ? csize.width : wth;
    var hgt__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curheight", "curheight", -119931765), hgt) ? csize.height : hgt;
    var end = [wth__$1, hgt__$1];
    var anim = new goog.fx.dom.Resize(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.resize.cljs$lang$maxFixedArity = 5;
enfocus.effects.move = function enfocus$effects$move(var_args) {
  var args15520 = [];
  var len__7263__auto___15523 = arguments.length;
  var i__7264__auto___15524 = 0;
  while (true) {
    if (i__7264__auto___15524 < len__7263__auto___15523) {
      args15520.push(arguments[i__7264__auto___15524]);
      var G__15525 = i__7264__auto___15524 + 1;
      i__7264__auto___15524 = G__15525;
      continue;
    } else {
    }
    break;
  }
  var G__15522 = args15520.length;
  switch(G__15522) {
    case 2:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15520.length)].join(""));;
  }
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$2 = function(xpos, ypos) {
  return enfocus.effects.move.call(null, xpos, ypos, 0, null, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$3 = function(xpos, ypos, ttime) {
  return enfocus.effects.move.call(null, xpos, ypos, ttime, null, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$4 = function(xpos, ypos, ttime, callback) {
  return enfocus.effects.move.call(null, xpos, ypos, ttime, callback, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$5 = function(xpos, ypos, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var cpos = goog.style.getPosition(pnod);
    var start = [cpos.x, cpos.y];
    var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? cpos.x : xpos;
    var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? cpos.y : ypos;
    var end = [xpos__$1, ypos__$1];
    var anim = new goog.fx.dom.Slide(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.move.cljs$lang$maxFixedArity = 5;
enfocus.effects.scroll = function enfocus$effects$scroll(var_args) {
  var args15527 = [];
  var len__7263__auto___15530 = arguments.length;
  var i__7264__auto___15531 = 0;
  while (true) {
    if (i__7264__auto___15531 < len__7263__auto___15530) {
      args15527.push(arguments[i__7264__auto___15531]);
      var G__15532 = i__7264__auto___15531 + 1;
      i__7264__auto___15531 = G__15532;
      continue;
    } else {
    }
    break;
  }
  var G__15529 = args15527.length;
  switch(G__15529) {
    case 2:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15527.length)].join(""));;
  }
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$2 = function(xpos, ypos) {
  return enfocus.effects.scroll.call(null, xpos, ypos, 0, null, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$3 = function(xpos, ypos, ttime) {
  return enfocus.effects.scroll.call(null, xpos, ypos, ttime, null, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$4 = function(xpos, ypos, ttime, callback) {
  return enfocus.effects.scroll.call(null, xpos, ypos, ttime, callback, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$5 = function(xpos, ypos, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var start = [pnod.scrollLeft, pnod.scrollTop];
    var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? pnod.scrollLeft : xpos;
    var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? pnod.scrollTop : ypos;
    var end = [xpos__$1, ypos__$1];
    var anim = new goog.fx.dom.Scroll(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.scroll.cljs$lang$maxFixedArity = 5;
enfocus.effects.liner = function enfocus$effects$liner(t) {
  return t;
};
enfocus.effects.ease_in_quad = function enfocus$effects$ease_in_quad(t) {
  return t * t;
};
enfocus.effects.ease_out_quad = function enfocus$effects$ease_out_quad(t) {
  return -1 * (t * (t - 2));
};
enfocus.effects.ease_in_out_quad = function enfocus$effects$ease_in_out_quad(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt;
  } else {
    return -.5 * ((nt - 1) * (nt - 2) - 1);
  }
};
enfocus.effects.ease_in_cubic = function enfocus$effects$ease_in_cubic(t) {
  return t * t * t;
};
enfocus.effects.ease_out_cubic = function enfocus$effects$ease_out_cubic(t) {
  var nt = t - 1;
  return nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_cubic = function enfocus$effects$ease_in_out_cubic(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt);
  }
};
enfocus.effects.ease_in_quart = function enfocus$effects$ease_in_quart(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quart = function enfocus$effects$ease_out_quart(t) {
  var nt = t - 1;
  return -1 * (nt * nt * nt * nt - 1);
};
enfocus.effects.ease_in_out_quart = function enfocus$effects$ease_in_out_quart(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt * mt);
  }
};
enfocus.effects.ease_in_quint = function enfocus$effects$ease_in_quint(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quint = function enfocus$effects$ease_out_quint(t) {
  var nt = t - 1;
  return nt * nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_quint = function enfocus$effects$ease_in_out_quint(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt * mt * mt);
  }
};
enfocus.effects.sign_in = function enfocus$effects$sign_in(t) {
  return -1 * Math.cos(.5 * Math.PI * t) + 1;
};
enfocus.effects.sign_out = function enfocus$effects$sign_out(t) {
  return Math.sin(t * Math.PI * .5);
};
enfocus.effects.sign_in_out = function enfocus$effects$sign_in_out(t) {
  return -.5 * (Math.cos(Math.PI * t) - 1);
};
enfocus.effects.expo_in = function enfocus$effects$expo_in(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    return Math.pow(2, 10 * (t - 1));
  }
};
enfocus.effects.expo_out = function enfocus$effects$expo_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 1;
  } else {
    return -1 * Math.pow(2, -10 * t) + 1;
  }
};
enfocus.effects.expo_in_out = function enfocus$effects$expo_in_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    if (cljs.core._EQ_.call(null, t, 1)) {
      return 1;
    } else {
      if (t < 1) {
        return .5 * Math.pow(2, 10 * (t - 1));
      } else {
        return .5 * (-1 * Math.pow(2, -10 * (t - 1)) + 2);
      }
    }
  }
};
enfocus.effects.circular_in = function enfocus$effects$circular_in(t) {
  return -1 * (Math.sqrt(1 - Math.pow(t, 2)) - 1);
};
enfocus.effects.circular_out = function enfocus$effects$circular_out(t) {
  var nt = t - 1;
  return Math.sqrt(1 - Math.pow(nt, 2));
};
enfocus.effects.circular_in_out = function enfocus$effects$circular_in_out(t) {
  var nt = t * 2;
  if (t < 1) {
    return -.5 * (Math.sqrt(1 - Math.pow(nt, 2)) - 1);
  } else {
    var mt = nt - 2;
    return -.5 * (Math.sqrt(1 - Math.pow(nt, 2)) + 1);
  }
};
goog.provide("enfocus.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("enfocus.core");
goog.require("goog.object");
enfocus.events.view_port_monitor = cljs.core.atom.call(null, null);
enfocus.events.get_vp_monitor = function enfocus$events$get_vp_monitor() {
  if (cljs.core.truth_(cljs.core.deref.call(null, enfocus.events.view_port_monitor))) {
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  } else {
    cljs.core.swap_BANG_.call(null, enfocus.events.view_port_monitor, function() {
      return new goog.dom.ViewportSizeMonitor;
    });
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  }
};
enfocus.events.gen_enter_leave_wrapper = function enfocus$events$gen_enter_leave_wrapper(event) {
  var obj = new Object;
  obj.listen = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var callback = enfocus.events.mouse_enter_leave.call(null, func);
      callback.listen = func;
      callback.scope = opt_scope;
      if (cljs.core.truth_(opt_handler)) {
        return opt_handler.listen(elm, cljs.core.name.call(null, event), callback);
      } else {
        return goog.events.listen(elm, cljs.core.name.call(null, event), callback);
      }
    };
  }(obj);
  obj.unlisten = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var listeners = goog.events.getListeners(elm, cljs.core.name.call(null, event), false);
      var seq__15334_15338 = cljs.core.seq.call(null, listeners);
      var chunk__15335_15339 = null;
      var count__15336_15340 = 0;
      var i__15337_15341 = 0;
      while (true) {
        if (i__15337_15341 < count__15336_15340) {
          var obj_15342__$1 = cljs.core._nth.call(null, chunk__15335_15339, i__15337_15341);
          var listener_15343 = obj_15342__$1.listener;
          if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_15343.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_15343.scope, opt_scope))) {
            if (cljs.core.truth_(opt_handler)) {
              opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_15343);
            } else {
              goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_15343);
            }
          } else {
          }
          var G__15344 = seq__15334_15338;
          var G__15345 = chunk__15335_15339;
          var G__15346 = count__15336_15340;
          var G__15347 = i__15337_15341 + 1;
          seq__15334_15338 = G__15344;
          chunk__15335_15339 = G__15345;
          count__15336_15340 = G__15346;
          i__15337_15341 = G__15347;
          continue;
        } else {
          var temp__4425__auto___15348 = cljs.core.seq.call(null, seq__15334_15338);
          if (temp__4425__auto___15348) {
            var seq__15334_15349__$1 = temp__4425__auto___15348;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15334_15349__$1)) {
              var c__7004__auto___15350 = cljs.core.chunk_first.call(null, seq__15334_15349__$1);
              var G__15351 = cljs.core.chunk_rest.call(null, seq__15334_15349__$1);
              var G__15352 = c__7004__auto___15350;
              var G__15353 = cljs.core.count.call(null, c__7004__auto___15350);
              var G__15354 = 0;
              seq__15334_15338 = G__15351;
              chunk__15335_15339 = G__15352;
              count__15336_15340 = G__15353;
              i__15337_15341 = G__15354;
              continue;
            } else {
              var obj_15355__$1 = cljs.core.first.call(null, seq__15334_15349__$1);
              var listener_15356 = obj_15355__$1.listener;
              if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_15356.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_15356.scope, opt_scope))) {
                if (cljs.core.truth_(opt_handler)) {
                  opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_15356);
                } else {
                  goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_15356);
                }
              } else {
              }
              var G__15357 = cljs.core.next.call(null, seq__15334_15349__$1);
              var G__15358 = null;
              var G__15359 = 0;
              var G__15360 = 0;
              seq__15334_15338 = G__15357;
              chunk__15335_15339 = G__15358;
              count__15336_15340 = G__15359;
              i__15337_15341 = G__15360;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return listeners;
    };
  }(obj);
  return obj;
};
enfocus.events.wrapper_register = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303)), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890))], null);
enfocus.events.listen = function enfocus$events$listen(event, func) {
  var wrapper = enfocus.events.wrapper_register.call(null, event);
  return function(wrapper) {
    return function(pnod) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "resize", "resize", 297367086), event) && window === pnod) {
        return goog.events.listen(enfocus.events.get_vp_monitor.call(null), "resize", func);
      } else {
        if (wrapper == null) {
          return goog.events.listen(pnod, cljs.core.name.call(null, event), func);
        } else {
          return goog.events.listenWithWrapper(pnod, wrapper, func);
        }
      }
    };
  }(wrapper);
};
enfocus.events.remove_listeners = function enfocus$events$remove_listeners(var_args) {
  var args__7270__auto__ = [];
  var len__7263__auto___15367 = arguments.length;
  var i__7264__auto___15368 = 0;
  while (true) {
    if (i__7264__auto___15368 < len__7263__auto___15367) {
      args__7270__auto__.push(arguments[i__7264__auto___15368]);
      var G__15369 = i__7264__auto___15368 + 1;
      i__7264__auto___15368 = G__15369;
      continue;
    } else {
    }
    break;
  }
  var argseq__7271__auto__ = 0 < args__7270__auto__.length ? new cljs.core.IndexedSeq(args__7270__auto__.slice(0), 0, null) : null;
  return enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic(argseq__7271__auto__);
};
enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic = function(event_list) {
  var get_name = function(p1__15361_SHARP_) {
    return cljs.core.name.call(null, cljs.core._EQ_.call(null, p1__15361_SHARP_, new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560)) ? new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303) : cljs.core._EQ_.call(null, p1__15361_SHARP_, new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580)) ? new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890) : p1__15361_SHARP_);
  };
  return function(get_name) {
    return function(pnod) {
      var seq__15363 = cljs.core.seq.call(null, event_list);
      var chunk__15364 = null;
      var count__15365 = 0;
      var i__15366 = 0;
      while (true) {
        if (i__15366 < count__15365) {
          var ev = cljs.core._nth.call(null, chunk__15364, i__15366);
          goog.events.removeAll(pnod, get_name.call(null, ev));
          var G__15370 = seq__15363;
          var G__15371 = chunk__15364;
          var G__15372 = count__15365;
          var G__15373 = i__15366 + 1;
          seq__15363 = G__15370;
          chunk__15364 = G__15371;
          count__15365 = G__15372;
          i__15366 = G__15373;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__15363);
          if (temp__4425__auto__) {
            var seq__15363__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15363__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__15363__$1);
              var G__15374 = cljs.core.chunk_rest.call(null, seq__15363__$1);
              var G__15375 = c__7004__auto__;
              var G__15376 = cljs.core.count.call(null, c__7004__auto__);
              var G__15377 = 0;
              seq__15363 = G__15374;
              chunk__15364 = G__15375;
              count__15365 = G__15376;
              i__15366 = G__15377;
              continue;
            } else {
              var ev = cljs.core.first.call(null, seq__15363__$1);
              goog.events.removeAll(pnod, get_name.call(null, ev));
              var G__15378 = cljs.core.next.call(null, seq__15363__$1);
              var G__15379 = null;
              var G__15380 = 0;
              var G__15381 = 0;
              seq__15363 = G__15378;
              chunk__15364 = G__15379;
              count__15365 = G__15380;
              i__15366 = G__15381;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(get_name);
};
enfocus.events.remove_listeners.cljs$lang$maxFixedArity = 0;
enfocus.events.remove_listeners.cljs$lang$applyTo = function(seq15362) {
  return enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq15362));
};
enfocus.events.unlisten = function enfocus$events$unlisten(var_args) {
  var args15382 = [];
  var len__7263__auto___15385 = arguments.length;
  var i__7264__auto___15386 = 0;
  while (true) {
    if (i__7264__auto___15386 < len__7263__auto___15385) {
      args15382.push(arguments[i__7264__auto___15386]);
      var G__15387 = i__7264__auto___15386 + 1;
      i__7264__auto___15386 = G__15387;
      continue;
    } else {
    }
    break;
  }
  var G__15384 = args15382.length;
  switch(G__15384) {
    case 1:
      return enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15382.length)].join(""));;
  }
};
enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$1 = function(event) {
  return enfocus.events.remove_listeners.call(null, event);
};
enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$2 = function(event, func) {
  var wrapper = enfocus.events.wrapper_register.call(null, event);
  return function(wrapper) {
    return function(pnod) {
      if (wrapper == null) {
        return goog.events.unlisten(pnod, cljs.core.name.call(null, event), func);
      } else {
        return goog.events.unlistenWithWrapper(pnod, wrapper, func);
      }
    };
  }(wrapper);
};
enfocus.events.unlisten.cljs$lang$maxFixedArity = 2;
enfocus.events.get_node_chain = function enfocus$events$get_node_chain(top, node) {
  if (node == null || cljs.core._EQ_.call(null, node, top)) {
    return cljs.core.List.EMPTY;
  } else {
    return cljs.core.conj.call(null, enfocus$events$get_node_chain.call(null, top, node.parentNode), node);
  }
};
enfocus.events.create_event = function enfocus$events$create_event(cur, cur_event) {
  var event = goog.object.clone(cur_event);
  event.currentTarget = cur;
  return event;
};
enfocus.events.listen_live = function enfocus$events$listen_live(event, selector, func) {
  return function(node) {
    return enfocus.core.at.call(null, node, enfocus.events.listen.call(null, event, function(p1__15389_SHARP_) {
      var seq__15394 = cljs.core.seq.call(null, enfocus.events.get_node_chain.call(null, node, p1__15389_SHARP_.target));
      var chunk__15395 = null;
      var count__15396 = 0;
      var i__15397 = 0;
      while (true) {
        if (i__15397 < count__15396) {
          var el = cljs.core._nth.call(null, chunk__15395, i__15397);
          enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__15394, chunk__15395, count__15396, i__15397, el) {
            return function(node__$1) {
              var event_copy = enfocus.events.create_event.call(null, el, p1__15389_SHARP_);
              func.call(null, event_copy);
              if (cljs.core.truth_(event_copy.defaultPrevented)) {
                p1__15389_SHARP_.preventDefault();
              } else {
              }
              if (cljs.core.truth_(event_copy.propagationStopped)) {
                return p1__15389_SHARP_.stopPropagation();
              } else {
                return null;
              }
            };
          }(seq__15394, chunk__15395, count__15396, i__15397, el)));
          var G__15398 = seq__15394;
          var G__15399 = chunk__15395;
          var G__15400 = count__15396;
          var G__15401 = i__15397 + 1;
          seq__15394 = G__15398;
          chunk__15395 = G__15399;
          count__15396 = G__15400;
          i__15397 = G__15401;
          continue;
        } else {
          var temp__4425__auto__ = cljs.core.seq.call(null, seq__15394);
          if (temp__4425__auto__) {
            var seq__15394__$1 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15394__$1)) {
              var c__7004__auto__ = cljs.core.chunk_first.call(null, seq__15394__$1);
              var G__15402 = cljs.core.chunk_rest.call(null, seq__15394__$1);
              var G__15403 = c__7004__auto__;
              var G__15404 = cljs.core.count.call(null, c__7004__auto__);
              var G__15405 = 0;
              seq__15394 = G__15402;
              chunk__15395 = G__15403;
              count__15396 = G__15404;
              i__15397 = G__15405;
              continue;
            } else {
              var el = cljs.core.first.call(null, seq__15394__$1);
              enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__15394, chunk__15395, count__15396, i__15397, el, seq__15394__$1, temp__4425__auto__) {
                return function(node__$1) {
                  var event_copy = enfocus.events.create_event.call(null, el, p1__15389_SHARP_);
                  func.call(null, event_copy);
                  if (cljs.core.truth_(event_copy.defaultPrevented)) {
                    p1__15389_SHARP_.preventDefault();
                  } else {
                  }
                  if (cljs.core.truth_(event_copy.propagationStopped)) {
                    return p1__15389_SHARP_.stopPropagation();
                  } else {
                    return null;
                  }
                };
              }(seq__15394, chunk__15395, count__15396, i__15397, el, seq__15394__$1, temp__4425__auto__)));
              var G__15406 = cljs.core.next.call(null, seq__15394__$1);
              var G__15407 = null;
              var G__15408 = 0;
              var G__15409 = 0;
              seq__15394 = G__15406;
              chunk__15395 = G__15407;
              count__15396 = G__15408;
              i__15397 = G__15409;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }));
  };
};
enfocus.events.child_of_QMARK_ = function enfocus$events$child_of_QMARK_(parent, child) {
  while (true) {
    if (cljs.core.not.call(null, child)) {
      return false;
    } else {
      if (parent === child) {
        return false;
      } else {
        if (child.parentNode === parent) {
          return true;
        } else {
          var G__15410 = parent;
          var G__15411 = child.parentNode;
          parent = G__15410;
          child = G__15411;
          continue;
        }
      }
    }
    break;
  }
};
enfocus.events.mouse_enter_leave = function enfocus$events$mouse_enter_leave(func) {
  return function(e) {
    var re = e.relatedTarget;
    var this$ = e.currentTarget;
    if (!(re === this$) && cljs.core.not.call(null, enfocus.events.child_of_QMARK_.call(null, this$, re))) {
      return func.call(null, e);
    } else {
      return null;
    }
  };
};
goog.provide("cheshire_cat.core");
goog.require("cljs.core");
goog.require("enfocus.core");
goog.require("clojure.browser.repl");
goog.require("cljs_http.client");
goog.require("enfocus.events");
goog.require("enfocus.effects");
goog.require("cljs.core.async");
cheshire_cat.core.say_goodbye = function cheshire_cat$core$say_goodbye() {
  return enfocus.core.at.call(null, "#cat-name", enfocus.effects.fade_out.call(null, 500), "#button1", enfocus.effects.fade_out.call(null, 500), "#status", enfocus.effects.fade_out.call(null, 5E3));
};
cheshire_cat.core.init = function cheshire_cat$core$init() {
  clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
  var c__11914__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11914__auto__) {
    return function() {
      var f__11915__auto__ = function() {
        var switch__11849__auto__ = function(c__11914__auto__) {
          return function(state_15652) {
            var state_val_15653 = state_15652[1];
            if (state_val_15653 === 1) {
              var inst_15638 = cljs_http.client.get.call(null, "/cheshire-cat");
              var state_15652__$1 = state_15652;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15652__$1, 2, inst_15638);
            } else {
              if (state_val_15653 === 2) {
                var inst_15640 = state_15652[2];
                var inst_15641 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_15640);
                var inst_15642 = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(inst_15641);
                var inst_15643 = enfocus.core.content.call(null, inst_15642);
                var inst_15644 = (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(inst_15641);
                var inst_15645 = enfocus.core.content.call(null, inst_15644);
                var inst_15646 = enfocus.core.set_style.call(null, new cljs.core.Keyword(null, "font-size", "font-size", -1847940346), "500%");
                var inst_15647 = enfocus.core.do__GT_.call(null, inst_15645, inst_15646);
                var inst_15648 = enfocus.core.at.call(null, "#cat-name", inst_15643, "#status", inst_15647);
                var inst_15649 = enfocus.events.listen.call(null, new cljs.core.Keyword(null, "click", "click", 1912301393), cheshire_cat.core.say_goodbye);
                var inst_15650 = enfocus.core.at.call(null, "#button1", inst_15649);
                var state_15652__$1 = function() {
                  var statearr_15654 = state_15652;
                  statearr_15654[7] = inst_15648;
                  return statearr_15654;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15652__$1, inst_15650);
              } else {
                return null;
              }
            }
          };
        }(c__11914__auto__);
        return function(switch__11849__auto__, c__11914__auto__) {
          return function() {
            var cheshire_cat$core$init_$_state_machine__11850__auto__ = null;
            var cheshire_cat$core$init_$_state_machine__11850__auto____0 = function() {
              var statearr_15658 = [null, null, null, null, null, null, null, null];
              statearr_15658[0] = cheshire_cat$core$init_$_state_machine__11850__auto__;
              statearr_15658[1] = 1;
              return statearr_15658;
            };
            var cheshire_cat$core$init_$_state_machine__11850__auto____1 = function(state_15652) {
              while (true) {
                var ret_value__11851__auto__ = function() {
                  try {
                    while (true) {
                      var result__11852__auto__ = switch__11849__auto__.call(null, state_15652);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11852__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11852__auto__;
                      }
                      break;
                    }
                  } catch (e15659) {
                    if (e15659 instanceof Object) {
                      var ex__11853__auto__ = e15659;
                      var statearr_15660_15662 = state_15652;
                      statearr_15660_15662[5] = ex__11853__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15652);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15659;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11851__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15663 = state_15652;
                  state_15652 = G__15663;
                  continue;
                } else {
                  return ret_value__11851__auto__;
                }
                break;
              }
            };
            cheshire_cat$core$init_$_state_machine__11850__auto__ = function(state_15652) {
              switch(arguments.length) {
                case 0:
                  return cheshire_cat$core$init_$_state_machine__11850__auto____0.call(this);
                case 1:
                  return cheshire_cat$core$init_$_state_machine__11850__auto____1.call(this, state_15652);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cheshire_cat$core$init_$_state_machine__11850__auto__.cljs$core$IFn$_invoke$arity$0 = cheshire_cat$core$init_$_state_machine__11850__auto____0;
            cheshire_cat$core$init_$_state_machine__11850__auto__.cljs$core$IFn$_invoke$arity$1 = cheshire_cat$core$init_$_state_machine__11850__auto____1;
            return cheshire_cat$core$init_$_state_machine__11850__auto__;
          }();
        }(switch__11849__auto__, c__11914__auto__);
      }();
      var state__11916__auto__ = function() {
        var statearr_15661 = f__11915__auto__.call(null);
        statearr_15661[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11914__auto__;
        return statearr_15661;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11916__auto__);
    };
  }(c__11914__auto__));
  return c__11914__auto__;
};
goog.exportSymbol("cheshire_cat.core.init", cheshire_cat.core.init);
